
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004668  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b0  080048b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080048b0  080048b0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b0  080048b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac8  20000074  0800492c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b3c  0800492c  00021b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015263  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e04  00000000  00000000  00035300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  000393c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004452  00000000  00000000  0003a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cb7  00000000  00000000  0003e9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009158f  00000000  00000000  00054689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5c18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c4  00000000  00000000  000e5c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004760 	.word	0x08004760

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004760 	.word	0x08004760

08000150 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000154:	f000 fa38 	bl	80005c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000158:	f000 f834 	bl	80001c4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015c:	f000 f8a6 	bl	80002ac <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8000160:	f000 f876 	bl	8000250 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000164:	f001 fcfa 	bl	8001b5c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000168:	4a0d      	ldr	r2, [pc, #52]	; (80001a0 <main+0x50>)
 800016a:	2100      	movs	r1, #0
 800016c:	480d      	ldr	r0, [pc, #52]	; (80001a4 <main+0x54>)
 800016e:	f001 fd5b 	bl	8001c28 <osThreadNew>
 8000172:	4603      	mov	r3, r0
 8000174:	4a0c      	ldr	r2, [pc, #48]	; (80001a8 <main+0x58>)
 8000176:	6013      	str	r3, [r2, #0]

	/* creation of uartTask1 */
	uartTask1Handle = osThreadNew(uartFunc1, NULL, &uartTask1_attributes);
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <main+0x5c>)
 800017a:	2100      	movs	r1, #0
 800017c:	480c      	ldr	r0, [pc, #48]	; (80001b0 <main+0x60>)
 800017e:	f001 fd53 	bl	8001c28 <osThreadNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a0b      	ldr	r2, [pc, #44]	; (80001b4 <main+0x64>)
 8000186:	6013      	str	r3, [r2, #0]

	/* creation of uartTask2 */
	uartTask2Handle = osThreadNew(uartFunc2, NULL, &uartTask2_attributes);
 8000188:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <main+0x68>)
 800018a:	2100      	movs	r1, #0
 800018c:	480b      	ldr	r0, [pc, #44]	; (80001bc <main+0x6c>)
 800018e:	f001 fd4b 	bl	8001c28 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <main+0x70>)
 8000196:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000198:	f001 fd12 	bl	8001bc0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800019c:	e7fe      	b.n	800019c <main+0x4c>
 800019e:	bf00      	nop
 80001a0:	080047cc 	.word	0x080047cc
 80001a4:	080002d9 	.word	0x080002d9
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	080047f0 	.word	0x080047f0
 80001b0:	080002e9 	.word	0x080002e9
 80001b4:	200000d8 	.word	0x200000d8
 80001b8:	08004814 	.word	0x08004814
 80001bc:	08000325 	.word	0x08000325
 80001c0:	200000dc 	.word	0x200000dc

080001c4 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f004 f9fe 	bl	80045d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ee:	2310      	movs	r3, #16
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fc72 	bl	8000ae4 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	bf14      	ite	ne
 8000206:	2301      	movne	r3, #1
 8000208:	2300      	moveq	r3, #0
 800020a:	b2db      	uxtb	r3, r3
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <_Z18SystemClock_Configv+0x50>
	{
		Error_Handler();
 8000210:	f000 f8a2 	bl	8000358 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000218:	2300      	movs	r3, #0
 800021a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fedb 	bl	8000fe8 <HAL_RCC_ClockConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	bf14      	ite	ne
 8000238:	2301      	movne	r3, #1
 800023a:	2300      	moveq	r3, #0
 800023c:	b2db      	uxtb	r3, r3
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <_Z18SystemClock_Configv+0x82>
	{
		Error_Handler();
 8000242:	f000 f889 	bl	8000358 <Error_Handler>
	}
}
 8000246:	bf00      	nop
 8000248:	3740      	adds	r7, #64	; 0x40
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000256:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000258:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800025c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000260:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800026e:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000270:	2200      	movs	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000276:	220c      	movs	r2, #12
 8000278:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000282:	2200      	movs	r2, #0
 8000284:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000288:	f001 fab0 	bl	80017ec <HAL_UART_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	bf14      	ite	ne
 8000292:	2301      	movne	r3, #1
 8000294:	2300      	moveq	r3, #0
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <_ZL19MX_USART1_UART_Initv+0x50>
	{
		Error_Handler();
 800029c:	f000 f85c 	bl	8000358 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000090 	.word	0x20000090
 80002a8:	40013800 	.word	0x40013800

080002ac <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <_ZL12MX_GPIO_Initv+0x28>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <_ZL12MX_GPIO_Initv+0x28>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <_ZL12MX_GPIO_Initv+0x28>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0304 	and.w	r3, r3, #4
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <_Z16StartDefaultTaskPv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80002e0:	2001      	movs	r0, #1
 80002e2:	f001 fd4b 	bl	8001d7c <osDelay>
 80002e6:	e7fb      	b.n	80002e0 <_Z16StartDefaultTaskPv+0x8>

080002e8 <_Z9uartFunc1Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_uartFunc1 */
void uartFunc1(void *argument)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN uartFunc1 */
	/* Infinite loop */
	for(;;)
	{
		uint8_t txt1[] = "Chun\n";
 80002f0:	4a0a      	ldr	r2, [pc, #40]	; (800031c <_Z9uartFunc1Pv+0x34>)
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002fa:	6018      	str	r0, [r3, #0]
 80002fc:	3304      	adds	r3, #4
 80002fe:	8019      	strh	r1, [r3, #0]
		HAL_UART_Transmit(&huart1, txt1, sizeof(txt1), 500);
 8000300:	f107 0108 	add.w	r1, r7, #8
 8000304:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000308:	2206      	movs	r2, #6
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <_Z9uartFunc1Pv+0x38>)
 800030c:	f001 fabb 	bl	8001886 <HAL_UART_Transmit>
		osDelay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000314:	f001 fd32 	bl	8001d7c <osDelay>
	}
 8000318:	e7ea      	b.n	80002f0 <_Z9uartFunc1Pv+0x8>
 800031a:	bf00      	nop
 800031c:	0800479c 	.word	0x0800479c
 8000320:	20000090 	.word	0x20000090

08000324 <_Z9uartFunc2Pv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_uartFunc2 */
void uartFunc2(void *argument)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN uartFunc2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 800032c:	2001      	movs	r0, #1
 800032e:	f001 fd25 	bl	8001d7c <osDelay>
 8000332:	e7fb      	b.n	800032c <_Z9uartFunc2Pv+0x8>

08000334 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d101      	bne.n	800034a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000346:	f000 f955 	bl	80005f4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40012c00 	.word	0x40012c00

08000358 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000360:	e7fe      	b.n	8000360 <Error_Handler+0x8>
	...

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_MspInit+0x4c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <HAL_MspInit+0x4c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <HAL_MspInit+0x4c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <HAL_MspInit+0x4c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <HAL_MspInit+0x4c>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_MspInit+0x4c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	210f      	movs	r1, #15
 800039e:	f06f 0001 	mvn.w	r0, #1
 80003a2:	f000 f9f8 	bl	8000796 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <HAL_UART_MspInit+0x8c>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d131      	bne.n	8000438 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <HAL_UART_MspInit+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1a      	ldr	r2, [pc, #104]	; (8000444 <HAL_UART_MspInit+0x90>)
 80003da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <HAL_UART_MspInit+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_UART_MspInit+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <HAL_UART_MspInit+0x90>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_UART_MspInit+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040a:	2302      	movs	r3, #2
 800040c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040e:	2303      	movs	r3, #3
 8000410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <HAL_UART_MspInit+0x94>)
 800041a:	f000 f9e7 	bl	80007ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <HAL_UART_MspInit+0x94>)
 8000434:	f000 f9da 	bl	80007ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40013800 	.word	0x40013800
 8000444:	40021000 	.word	0x40021000
 8000448:	40010800 	.word	0x40010800

0800044c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b08c      	sub	sp, #48	; 0x30
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000454:	2300      	movs	r3, #0
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000458:	2300      	movs	r3, #0
 800045a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800045c:	2300      	movs	r3, #0
 800045e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <HAL_InitTick+0xd0>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a2d      	ldr	r2, [pc, #180]	; (800051c <HAL_InitTick+0xd0>)
 8000468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <HAL_InitTick+0xd0>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800047a:	f107 020c 	add.w	r2, r7, #12
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f000 ff29 	bl	80012dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800048a:	f000 ff13 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 800048e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000492:	4a23      	ldr	r2, [pc, #140]	; (8000520 <HAL_InitTick+0xd4>)
 8000494:	fba2 2303 	umull	r2, r3, r2, r3
 8000498:	0c9b      	lsrs	r3, r3, #18
 800049a:	3b01      	subs	r3, #1
 800049c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800049e:	4b21      	ldr	r3, [pc, #132]	; (8000524 <HAL_InitTick+0xd8>)
 80004a0:	4a21      	ldr	r2, [pc, #132]	; (8000528 <HAL_InitTick+0xdc>)
 80004a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <HAL_InitTick+0xd8>)
 80004a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004aa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <HAL_InitTick+0xd8>)
 80004ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <HAL_InitTick+0xd8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <HAL_InitTick+0xd8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	4b19      	ldr	r3, [pc, #100]	; (8000524 <HAL_InitTick+0xd8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80004c4:	4817      	ldr	r0, [pc, #92]	; (8000524 <HAL_InitTick+0xd8>)
 80004c6:	f000 ff57 	bl	8001378 <HAL_TIM_Base_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80004d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d11b      	bne.n	8000510 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <HAL_InitTick+0xd8>)
 80004da:	f000 ffa5 	bl	8001428 <HAL_TIM_Base_Start_IT>
 80004de:	4603      	mov	r3, r0
 80004e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80004e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004ec:	2019      	movs	r0, #25
 80004ee:	f000 f96e 	bl	80007ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b0f      	cmp	r3, #15
 80004f6:	d808      	bhi.n	800050a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80004f8:	2200      	movs	r2, #0
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	2019      	movs	r0, #25
 80004fe:	f000 f94a 	bl	8000796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_InitTick+0xe0>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6013      	str	r3, [r2, #0]
 8000508:	e002      	b.n	8000510 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000514:	4618      	mov	r0, r3
 8000516:	3730      	adds	r7, #48	; 0x30
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000
 8000520:	431bde83 	.word	0x431bde83
 8000524:	200000e0 	.word	0x200000e0
 8000528:	40012c00 	.word	0x40012c00
 800052c:	20000004 	.word	0x20000004

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
	...

0800055c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <TIM1_UP_IRQHandler+0x10>)
 8000562:	f000 ffad 	bl	80014c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000e0 	.word	0x200000e0

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a2:	f7ff ffe5 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f003 ffe1 	bl	800456c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fdd1 	bl	8000150 <main>
  bx lr
 80005ae:	4770      	bx	lr
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005b8:	080048b8 	.word	0x080048b8
  ldr r2, =_sbss
 80005bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005c0:	20001b3c 	.word	0x20001b3c

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>
	...

080005c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x28>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f8d1 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	200f      	movs	r0, #15
 80005e0:	f7ff ff34 	bl	800044c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f7ff febe 	bl	8000364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40022000 	.word	0x40022000

080005f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x20>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x20>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000008 	.word	0x20000008
 8000614:	20000128 	.word	0x20000128

08000618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000128 	.word	0x20000128

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <__NVIC_EnableIRQ+0x34>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff4f 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff64 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ffb2 	bl	800071c <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff81 	bl	80006c8 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff57 	bl	8000690 <__NVIC_EnableIRQ>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b08b      	sub	sp, #44	; 0x2c
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007fe:	e161      	b.n	8000ac4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000800:	2201      	movs	r2, #1
 8000802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	69fa      	ldr	r2, [r7, #28]
 8000810:	4013      	ands	r3, r2
 8000812:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	429a      	cmp	r2, r3
 800081a:	f040 8150 	bne.w	8000abe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	4a97      	ldr	r2, [pc, #604]	; (8000a80 <HAL_GPIO_Init+0x294>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d05e      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000828:	4a95      	ldr	r2, [pc, #596]	; (8000a80 <HAL_GPIO_Init+0x294>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d875      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800082e:	4a95      	ldr	r2, [pc, #596]	; (8000a84 <HAL_GPIO_Init+0x298>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d058      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000834:	4a93      	ldr	r2, [pc, #588]	; (8000a84 <HAL_GPIO_Init+0x298>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d86f      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800083a:	4a93      	ldr	r2, [pc, #588]	; (8000a88 <HAL_GPIO_Init+0x29c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d052      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000840:	4a91      	ldr	r2, [pc, #580]	; (8000a88 <HAL_GPIO_Init+0x29c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d869      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000846:	4a91      	ldr	r2, [pc, #580]	; (8000a8c <HAL_GPIO_Init+0x2a0>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d04c      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 800084c:	4a8f      	ldr	r2, [pc, #572]	; (8000a8c <HAL_GPIO_Init+0x2a0>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d863      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000852:	4a8f      	ldr	r2, [pc, #572]	; (8000a90 <HAL_GPIO_Init+0x2a4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d046      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000858:	4a8d      	ldr	r2, [pc, #564]	; (8000a90 <HAL_GPIO_Init+0x2a4>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d85d      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800085e:	2b12      	cmp	r3, #18
 8000860:	d82a      	bhi.n	80008b8 <HAL_GPIO_Init+0xcc>
 8000862:	2b12      	cmp	r3, #18
 8000864:	d859      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_GPIO_Init+0x80>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008e7 	.word	0x080008e7
 8000870:	080008c1 	.word	0x080008c1
 8000874:	080008d3 	.word	0x080008d3
 8000878:	08000915 	.word	0x08000915
 800087c:	0800091b 	.word	0x0800091b
 8000880:	0800091b 	.word	0x0800091b
 8000884:	0800091b 	.word	0x0800091b
 8000888:	0800091b 	.word	0x0800091b
 800088c:	0800091b 	.word	0x0800091b
 8000890:	0800091b 	.word	0x0800091b
 8000894:	0800091b 	.word	0x0800091b
 8000898:	0800091b 	.word	0x0800091b
 800089c:	0800091b 	.word	0x0800091b
 80008a0:	0800091b 	.word	0x0800091b
 80008a4:	0800091b 	.word	0x0800091b
 80008a8:	0800091b 	.word	0x0800091b
 80008ac:	0800091b 	.word	0x0800091b
 80008b0:	080008c9 	.word	0x080008c9
 80008b4:	080008dd 	.word	0x080008dd
 80008b8:	4a76      	ldr	r2, [pc, #472]	; (8000a94 <HAL_GPIO_Init+0x2a8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d013      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008be:	e02c      	b.n	800091a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	623b      	str	r3, [r7, #32]
          break;
 80008c6:	e029      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	3304      	adds	r3, #4
 80008ce:	623b      	str	r3, [r7, #32]
          break;
 80008d0:	e024      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	3308      	adds	r3, #8
 80008d8:	623b      	str	r3, [r7, #32]
          break;
 80008da:	e01f      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	330c      	adds	r3, #12
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e01a      	b.n	800091c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ee:	2304      	movs	r3, #4
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e013      	b.n	800091c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008fc:	2308      	movs	r3, #8
 80008fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	611a      	str	r2, [r3, #16]
          break;
 8000906:	e009      	b.n	800091c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	615a      	str	r2, [r3, #20]
          break;
 8000912:	e003      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
          break;
 8000918:	e000      	b.n	800091c <HAL_GPIO_Init+0x130>
          break;
 800091a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	2bff      	cmp	r3, #255	; 0xff
 8000920:	d801      	bhi.n	8000926 <HAL_GPIO_Init+0x13a>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	e001      	b.n	800092a <HAL_GPIO_Init+0x13e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3304      	adds	r3, #4
 800092a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2bff      	cmp	r3, #255	; 0xff
 8000930:	d802      	bhi.n	8000938 <HAL_GPIO_Init+0x14c>
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	e002      	b.n	800093e <HAL_GPIO_Init+0x152>
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	3b08      	subs	r3, #8
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	210f      	movs	r1, #15
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	401a      	ands	r2, r3
 8000950:	6a39      	ldr	r1, [r7, #32]
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	431a      	orrs	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 80a9 	beq.w	8000abe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800096c:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <HAL_GPIO_Init+0x2ac>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a49      	ldr	r2, [pc, #292]	; (8000a98 <HAL_GPIO_Init+0x2ac>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <HAL_GPIO_Init+0x2ac>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000984:	4a45      	ldr	r2, [pc, #276]	; (8000a9c <HAL_GPIO_Init+0x2b0>)
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a3d      	ldr	r2, [pc, #244]	; (8000aa0 <HAL_GPIO_Init+0x2b4>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d00d      	beq.n	80009cc <HAL_GPIO_Init+0x1e0>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a3c      	ldr	r2, [pc, #240]	; (8000aa4 <HAL_GPIO_Init+0x2b8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d007      	beq.n	80009c8 <HAL_GPIO_Init+0x1dc>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a3b      	ldr	r2, [pc, #236]	; (8000aa8 <HAL_GPIO_Init+0x2bc>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d101      	bne.n	80009c4 <HAL_GPIO_Init+0x1d8>
 80009c0:	2302      	movs	r3, #2
 80009c2:	e004      	b.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009c4:	2303      	movs	r3, #3
 80009c6:	e002      	b.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009c8:	2301      	movs	r3, #1
 80009ca:	e000      	b.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009cc:	2300      	movs	r3, #0
 80009ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d0:	f002 0203 	and.w	r2, r2, #3
 80009d4:	0092      	lsls	r2, r2, #2
 80009d6:	4093      	lsls	r3, r2
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009de:	492f      	ldr	r1, [pc, #188]	; (8000a9c <HAL_GPIO_Init+0x2b0>)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3302      	adds	r3, #2
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d006      	beq.n	8000a06 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	492b      	ldr	r1, [pc, #172]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	600b      	str	r3, [r1, #0]
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a06:	4b29      	ldr	r3, [pc, #164]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4927      	ldr	r1, [pc, #156]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	4921      	ldr	r1, [pc, #132]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	604b      	str	r3, [r1, #4]
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	491d      	ldr	r1, [pc, #116]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	4917      	ldr	r1, [pc, #92]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	608b      	str	r3, [r1, #8]
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4913      	ldr	r1, [pc, #76]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d01f      	beq.n	8000ab0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	490d      	ldr	r1, [pc, #52]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60cb      	str	r3, [r1, #12]
 8000a7c:	e01f      	b.n	8000abe <HAL_GPIO_Init+0x2d2>
 8000a7e:	bf00      	nop
 8000a80:	10320000 	.word	0x10320000
 8000a84:	10310000 	.word	0x10310000
 8000a88:	10220000 	.word	0x10220000
 8000a8c:	10210000 	.word	0x10210000
 8000a90:	10120000 	.word	0x10120000
 8000a94:	10110000 	.word	0x10110000
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	40011000 	.word	0x40011000
 8000aac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_GPIO_Init+0x2f4>)
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4909      	ldr	r1, [pc, #36]	; (8000ae0 <HAL_GPIO_Init+0x2f4>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	fa22 f303 	lsr.w	r3, r2, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f47f ae96 	bne.w	8000800 <HAL_GPIO_Init+0x14>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	372c      	adds	r7, #44	; 0x2c
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e272      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8087 	beq.w	8000c12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b04:	4b92      	ldr	r3, [pc, #584]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 030c 	and.w	r3, r3, #12
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d00c      	beq.n	8000b2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b10:	4b8f      	ldr	r3, [pc, #572]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 030c 	and.w	r3, r3, #12
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d112      	bne.n	8000b42 <HAL_RCC_OscConfig+0x5e>
 8000b1c:	4b8c      	ldr	r3, [pc, #560]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b28:	d10b      	bne.n	8000b42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2a:	4b89      	ldr	r3, [pc, #548]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d06c      	beq.n	8000c10 <HAL_RCC_OscConfig+0x12c>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d168      	bne.n	8000c10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e24c      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4a:	d106      	bne.n	8000b5a <HAL_RCC_OscConfig+0x76>
 8000b4c:	4b80      	ldr	r3, [pc, #512]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a7f      	ldr	r2, [pc, #508]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e02e      	b.n	8000bb8 <HAL_RCC_OscConfig+0xd4>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10c      	bne.n	8000b7c <HAL_RCC_OscConfig+0x98>
 8000b62:	4b7b      	ldr	r3, [pc, #492]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a7a      	ldr	r2, [pc, #488]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b78      	ldr	r3, [pc, #480]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a77      	ldr	r2, [pc, #476]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	e01d      	b.n	8000bb8 <HAL_RCC_OscConfig+0xd4>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b84:	d10c      	bne.n	8000ba0 <HAL_RCC_OscConfig+0xbc>
 8000b86:	4b72      	ldr	r3, [pc, #456]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a71      	ldr	r2, [pc, #452]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a6e      	ldr	r2, [pc, #440]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e00b      	b.n	8000bb8 <HAL_RCC_OscConfig+0xd4>
 8000ba0:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a6a      	ldr	r2, [pc, #424]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a67      	ldr	r2, [pc, #412]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d013      	beq.n	8000be8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fd2a 	bl	8000618 <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc8:	f7ff fd26 	bl	8000618 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b64      	cmp	r3, #100	; 0x64
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e200      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bda:	4b5d      	ldr	r3, [pc, #372]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f0      	beq.n	8000bc8 <HAL_RCC_OscConfig+0xe4>
 8000be6:	e014      	b.n	8000c12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fd16 	bl	8000618 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fd12 	bl	8000618 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b64      	cmp	r3, #100	; 0x64
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e1ec      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c02:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x10c>
 8000c0e:	e000      	b.n	8000c12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d063      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c1e:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 030c 	and.w	r3, r3, #12
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00b      	beq.n	8000c42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c2a:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	d11c      	bne.n	8000c70 <HAL_RCC_OscConfig+0x18c>
 8000c36:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d116      	bne.n	8000c70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <HAL_RCC_OscConfig+0x176>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d001      	beq.n	8000c5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e1c0      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4939      	ldr	r1, [pc, #228]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c6e:	e03a      	b.n	8000ce6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d020      	beq.n	8000cba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c78:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fccb 	bl	8000618 <HAL_GetTick>
 8000c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c84:	e008      	b.n	8000c98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c86:	f7ff fcc7 	bl	8000618 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d901      	bls.n	8000c98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e1a1      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f0      	beq.n	8000c86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	4927      	ldr	r1, [pc, #156]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	600b      	str	r3, [r1, #0]
 8000cb8:	e015      	b.n	8000ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_RCC_OscConfig+0x270>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fcaa 	bl	8000618 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cc8:	f7ff fca6 	bl	8000618 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e180      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d03a      	beq.n	8000d68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d019      	beq.n	8000d2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_RCC_OscConfig+0x274>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d00:	f7ff fc8a 	bl	8000618 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d08:	f7ff fc86 	bl	8000618 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e160      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fb08 	bl	800133c <RCC_Delay>
 8000d2c:	e01c      	b.n	8000d68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_RCC_OscConfig+0x274>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d34:	f7ff fc70 	bl	8000618 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3a:	e00f      	b.n	8000d5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc6c 	bl	8000618 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d908      	bls.n	8000d5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e146      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	42420000 	.word	0x42420000
 8000d58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	4b92      	ldr	r3, [pc, #584]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1e9      	bne.n	8000d3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80a6 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7a:	4b8b      	ldr	r3, [pc, #556]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10d      	bne.n	8000da2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b88      	ldr	r3, [pc, #544]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a87      	ldr	r2, [pc, #540]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b85      	ldr	r3, [pc, #532]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da2:	4b82      	ldr	r3, [pc, #520]	; (8000fac <HAL_RCC_OscConfig+0x4c8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d118      	bne.n	8000de0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dae:	4b7f      	ldr	r3, [pc, #508]	; (8000fac <HAL_RCC_OscConfig+0x4c8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7e      	ldr	r2, [pc, #504]	; (8000fac <HAL_RCC_OscConfig+0x4c8>)
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dba:	f7ff fc2d 	bl	8000618 <HAL_GetTick>
 8000dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc2:	f7ff fc29 	bl	8000618 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b64      	cmp	r3, #100	; 0x64
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e103      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd4:	4b75      	ldr	r3, [pc, #468]	; (8000fac <HAL_RCC_OscConfig+0x4c8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x312>
 8000de8:	4b6f      	ldr	r3, [pc, #444]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a6e      	ldr	r2, [pc, #440]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	e02d      	b.n	8000e52 <HAL_RCC_OscConfig+0x36e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x334>
 8000dfe:	4b6a      	ldr	r3, [pc, #424]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	4a69      	ldr	r2, [pc, #420]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6213      	str	r3, [r2, #32]
 8000e0a:	4b67      	ldr	r3, [pc, #412]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	4a66      	ldr	r2, [pc, #408]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	6213      	str	r3, [r2, #32]
 8000e16:	e01c      	b.n	8000e52 <HAL_RCC_OscConfig+0x36e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b05      	cmp	r3, #5
 8000e1e:	d10c      	bne.n	8000e3a <HAL_RCC_OscConfig+0x356>
 8000e20:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4a60      	ldr	r2, [pc, #384]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6213      	str	r3, [r2, #32]
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	4a5d      	ldr	r2, [pc, #372]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6213      	str	r3, [r2, #32]
 8000e38:	e00b      	b.n	8000e52 <HAL_RCC_OscConfig+0x36e>
 8000e3a:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	4a5a      	ldr	r2, [pc, #360]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6213      	str	r3, [r2, #32]
 8000e46:	4b58      	ldr	r3, [pc, #352]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a57      	ldr	r2, [pc, #348]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	f023 0304 	bic.w	r3, r3, #4
 8000e50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d015      	beq.n	8000e86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fbdd 	bl	8000618 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e60:	e00a      	b.n	8000e78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fbd9 	bl	8000618 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e0b1      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0ee      	beq.n	8000e62 <HAL_RCC_OscConfig+0x37e>
 8000e84:	e014      	b.n	8000eb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e86:	f7ff fbc7 	bl	8000618 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8c:	e00a      	b.n	8000ea4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fbc3 	bl	8000618 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e09b      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea4:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1ee      	bne.n	8000e8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d105      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a3b      	ldr	r2, [pc, #236]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8087 	beq.w	8000fda <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d061      	beq.n	8000f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d146      	bne.n	8000f6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee0:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <HAL_RCC_OscConfig+0x4cc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee6:	f7ff fb97 	bl	8000618 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eee:	f7ff fb93 	bl	8000618 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e06d      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d1f0      	bne.n	8000eee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f14:	d108      	bne.n	8000f28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	4921      	ldr	r1, [pc, #132]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a19      	ldr	r1, [r3, #32]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	491b      	ldr	r1, [pc, #108]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_RCC_OscConfig+0x4cc>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb67 	bl	8000618 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fb63 	bl	8000618 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e03d      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x46a>
 8000f6c:	e035      	b.n	8000fda <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_RCC_OscConfig+0x4cc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fb50 	bl	8000618 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fb4c 	bl	8000618 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e026      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x498>
 8000f9a:	e01e      	b.n	8000fda <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d107      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e019      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40007000 	.word	0x40007000
 8000fb0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_RCC_OscConfig+0x500>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d106      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d001      	beq.n	8000fda <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e0d0      	b.n	800119e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ffc:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d910      	bls.n	800102c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 0207 	bic.w	r2, r3, #7
 8001012:	4965      	ldr	r1, [pc, #404]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	4313      	orrs	r3, r2
 8001018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d001      	beq.n	800102c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0b8      	b.n	800119e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d020      	beq.n	800107a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	4a58      	ldr	r2, [pc, #352]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800104e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001068:	4b50      	ldr	r3, [pc, #320]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	494d      	ldr	r1, [pc, #308]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d040      	beq.n	8001108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d107      	bne.n	800109e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b47      	ldr	r3, [pc, #284]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d115      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e07f      	b.n	800119e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e073      	b.n	800119e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e06b      	b.n	800119e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c6:	4b39      	ldr	r3, [pc, #228]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f023 0203 	bic.w	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4936      	ldr	r1, [pc, #216]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010d8:	f7ff fa9e 	bl	8000618 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010de:	e00a      	b.n	80010f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e0:	f7ff fa9a 	bl	8000618 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e053      	b.n	800119e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 020c 	and.w	r2, r3, #12
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	429a      	cmp	r2, r3
 8001106:	d1eb      	bne.n	80010e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d210      	bcs.n	8001138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 0207 	bic.w	r2, r3, #7
 800111e:	4922      	ldr	r1, [pc, #136]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d001      	beq.n	8001138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e032      	b.n	800119e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4916      	ldr	r1, [pc, #88]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	490e      	ldr	r1, [pc, #56]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001176:	f000 f821 	bl	80011bc <HAL_RCC_GetSysClockFreq>
 800117a:	4602      	mov	r2, r0
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	490a      	ldr	r1, [pc, #40]	; (80011b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001188:	5ccb      	ldrb	r3, [r1, r3]
 800118a:	fa22 f303 	lsr.w	r3, r2, r3
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f958 	bl	800044c <HAL_InitTick>

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	08004838 	.word	0x08004838
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011bc:	b490      	push	{r4, r7}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_RCC_GetSysClockFreq+0xac>)
 80011c4:	1d3c      	adds	r4, r7, #4
 80011c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011cc:	f240 2301 	movw	r3, #513	; 0x201
 80011d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_RCC_GetSysClockFreq+0xb0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d002      	beq.n	80011fc <HAL_RCC_GetSysClockFreq+0x40>
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d003      	beq.n	8001202 <HAL_RCC_GetSysClockFreq+0x46>
 80011fa:	e02b      	b.n	8001254 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011fe:	623b      	str	r3, [r7, #32]
      break;
 8001200:	e02b      	b.n	800125a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3328      	adds	r3, #40	; 0x28
 800120c:	443b      	add	r3, r7
 800120e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001212:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d012      	beq.n	8001244 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	0c5b      	lsrs	r3, r3, #17
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	3328      	adds	r3, #40	; 0x28
 800122a:	443b      	add	r3, r7
 800122c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001230:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001236:	fb03 f202 	mul.w	r2, r3, r2
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
 8001242:	e004      	b.n	800124e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	623b      	str	r3, [r7, #32]
      break;
 8001252:	e002      	b.n	800125a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001256:	623b      	str	r3, [r7, #32]
      break;
 8001258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800125a:	6a3b      	ldr	r3, [r7, #32]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bc90      	pop	{r4, r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	080047a4 	.word	0x080047a4
 800126c:	40021000 	.word	0x40021000
 8001270:	007a1200 	.word	0x007a1200
 8001274:	003d0900 	.word	0x003d0900

08001278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <HAL_RCC_GetHCLKFreq+0x10>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000000 	.word	0x20000000

0800128c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001290:	f7ff fff2 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 8001294:	4602      	mov	r2, r0
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	4903      	ldr	r1, [pc, #12]	; (80012b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012a2:	5ccb      	ldrb	r3, [r1, r3]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	08004848 	.word	0x08004848

080012b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012b8:	f7ff ffde 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	0adb      	lsrs	r3, r3, #11
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	4903      	ldr	r1, [pc, #12]	; (80012d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ca:	5ccb      	ldrb	r3, [r1, r3]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	08004848 	.word	0x08004848

080012dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	220f      	movs	r2, #15
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_RCC_GetClockConfig+0x58>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_RCC_GetClockConfig+0x58>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_GetClockConfig+0x58>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_RCC_GetClockConfig+0x58>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0207 	and.w	r2, r3, #7
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40021000 	.word	0x40021000
 8001338:	40022000 	.word	0x40022000

0800133c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <RCC_Delay+0x34>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <RCC_Delay+0x38>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	0a5b      	lsrs	r3, r3, #9
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001358:	bf00      	nop
  }
  while (Delay --);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	60fa      	str	r2, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f9      	bne.n	8001358 <RCC_Delay+0x1c>
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000000 	.word	0x20000000
 8001374:	10624dd3 	.word	0x10624dd3

08001378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e041      	b.n	800140e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f839 	bl	8001416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3304      	adds	r3, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f000 f9ae 	bl	8001718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d001      	beq.n	8001440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e035      	b.n	80014ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_TIM_Base_Start_IT+0x90>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d009      	beq.n	8001476 <HAL_TIM_Base_Start_IT+0x4e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146a:	d004      	beq.n	8001476 <HAL_TIM_Base_Start_IT+0x4e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_TIM_Base_Start_IT+0x94>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d111      	bne.n	800149a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b06      	cmp	r3, #6
 8001486:	d010      	beq.n	80014aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001498:	e007      	b.n	80014aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0201 	orr.w	r2, r2, #1
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40012c00 	.word	0x40012c00
 80014bc:	40000400 	.word	0x40000400

080014c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d122      	bne.n	800151c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d11b      	bne.n	800151c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0202 	mvn.w	r2, #2
 80014ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f8ed 	bl	80016e2 <HAL_TIM_IC_CaptureCallback>
 8001508:	e005      	b.n	8001516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8e0 	bl	80016d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f8ef 	bl	80016f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b04      	cmp	r3, #4
 8001528:	d122      	bne.n	8001570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d11b      	bne.n	8001570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f06f 0204 	mvn.w	r2, #4
 8001540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2202      	movs	r2, #2
 8001546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f8c3 	bl	80016e2 <HAL_TIM_IC_CaptureCallback>
 800155c:	e005      	b.n	800156a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f8b6 	bl	80016d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f8c5 	bl	80016f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b08      	cmp	r3, #8
 800157c:	d122      	bne.n	80015c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b08      	cmp	r3, #8
 800158a:	d11b      	bne.n	80015c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f06f 0208 	mvn.w	r2, #8
 8001594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2204      	movs	r2, #4
 800159a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f899 	bl	80016e2 <HAL_TIM_IC_CaptureCallback>
 80015b0:	e005      	b.n	80015be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f88c 	bl	80016d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f89b 	bl	80016f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d122      	bne.n	8001618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b10      	cmp	r3, #16
 80015de:	d11b      	bne.n	8001618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f06f 0210 	mvn.w	r2, #16
 80015e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2208      	movs	r2, #8
 80015ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f86f 	bl	80016e2 <HAL_TIM_IC_CaptureCallback>
 8001604:	e005      	b.n	8001612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f862 	bl	80016d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f871 	bl	80016f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10e      	bne.n	8001644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d107      	bne.n	8001644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f06f 0201 	mvn.w	r2, #1
 800163c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7fe fe78 	bl	8000334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	2b80      	cmp	r3, #128	; 0x80
 8001650:	d10e      	bne.n	8001670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165c:	2b80      	cmp	r3, #128	; 0x80
 800165e:	d107      	bne.n	8001670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f8b5 	bl	80017da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167a:	2b40      	cmp	r3, #64	; 0x40
 800167c:	d10e      	bne.n	800169c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001688:	2b40      	cmp	r3, #64	; 0x40
 800168a:	d107      	bne.n	800169c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f835 	bl	8001706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d10e      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d107      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0220 	mvn.w	r2, #32
 80016c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f880 	bl	80017c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <TIM_Base_SetConfig+0xa8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d007      	beq.n	8001740 <TIM_Base_SetConfig+0x28>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001736:	d003      	beq.n	8001740 <TIM_Base_SetConfig+0x28>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <TIM_Base_SetConfig+0xac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d108      	bne.n	8001752 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <TIM_Base_SetConfig+0xa8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <TIM_Base_SetConfig+0x52>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d003      	beq.n	800176a <TIM_Base_SetConfig+0x52>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <TIM_Base_SetConfig+0xac>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d108      	bne.n	800177c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <TIM_Base_SetConfig+0xa8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d103      	bne.n	80017b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	615a      	str	r2, [r3, #20]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40000400 	.word	0x40000400

080017c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e03f      	b.n	800187e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fdce 	bl	80003b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	; 0x24
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800182e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f905 	bl	8001a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b08a      	sub	sp, #40	; 0x28
 800188a:	af02      	add	r7, sp, #8
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	d17c      	bne.n	80019a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_UART_Transmit+0x2c>
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e075      	b.n	80019a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_UART_Transmit+0x3e>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e06e      	b.n	80019a2 <HAL_UART_Transmit+0x11c>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2221      	movs	r2, #33	; 0x21
 80018d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018da:	f7fe fe9d 	bl	8000618 <HAL_GetTick>
 80018de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f4:	d108      	bne.n	8001908 <HAL_UART_Transmit+0x82>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	e003      	b.n	8001910 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001918:	e02a      	b.n	8001970 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2200      	movs	r2, #0
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f840 	bl	80019aa <UART_WaitOnFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e036      	b.n	80019a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10b      	bne.n	8001952 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001948:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3302      	adds	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	e007      	b.n	8001962 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1cf      	bne.n	800191a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2200      	movs	r2, #0
 8001982:	2140      	movs	r1, #64	; 0x40
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f810 	bl	80019aa <UART_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e006      	b.n	80019a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019a0:	2302      	movs	r3, #2
  }
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4613      	mov	r3, r2
 80019b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019ba:	e02c      	b.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c2:	d028      	beq.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <UART_WaitOnFlagUntilTimeout+0x30>
 80019ca:	f7fe fe25 	bl	8000618 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d21d      	bcs.n	8001a16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80019e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e00f      	b.n	8001a36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d0c3      	beq.n	80019bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a7a:	f023 030c 	bic.w	r3, r3, #12
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <UART_SetConfig+0x114>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d103      	bne.n	8001ab0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001aa8:	f7ff fc04 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	e002      	b.n	8001ab6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ab0:	f7ff fbec 	bl	800128c <HAL_RCC_GetPCLK1Freq>
 8001ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009a      	lsls	r2, r3, #2
 8001ac0:	441a      	add	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <UART_SetConfig+0x118>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	0119      	lsls	r1, r3, #4
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009a      	lsls	r2, r3, #2
 8001ae0:	441a      	add	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <UART_SetConfig+0x118>)
 8001aee:	fba3 0302 	umull	r0, r3, r3, r2
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	fb00 f303 	mul.w	r3, r0, r3
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	3332      	adds	r3, #50	; 0x32
 8001b00:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <UART_SetConfig+0x118>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b0c:	4419      	add	r1, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	009a      	lsls	r2, r3, #2
 8001b18:	441a      	add	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <UART_SetConfig+0x118>)
 8001b26:	fba3 0302 	umull	r0, r3, r3, r2
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2064      	movs	r0, #100	; 0x64
 8001b2e:	fb00 f303 	mul.w	r3, r0, r3
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	3332      	adds	r3, #50	; 0x32
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <UART_SetConfig+0x118>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	f003 020f 	and.w	r2, r3, #15
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	440a      	add	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40013800 	.word	0x40013800
 8001b58:	51eb851f 	.word	0x51eb851f

08001b5c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b62:	f3ef 8305 	mrs	r3, IPSR
 8001b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b72:	607b      	str	r3, [r7, #4]
  return(result);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <osKernelInitialize+0x32>
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <osKernelInitialize+0x60>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d109      	bne.n	8001b96 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b82:	f3ef 8311 	mrs	r3, BASEPRI
 8001b86:	603b      	str	r3, [r7, #0]
  return(result);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001b8e:	f06f 0305 	mvn.w	r3, #5
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e00c      	b.n	8001bb0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <osKernelInitialize+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <osKernelInitialize+0x60>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e002      	b.n	8001bb0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	2000012c 	.word	0x2000012c

08001bc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bc6:	f3ef 8305 	mrs	r3, IPSR
 8001bca:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd6:	607b      	str	r3, [r7, #4]
  return(result);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <osKernelStart+0x32>
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <osKernelStart+0x64>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d109      	bne.n	8001bfa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001be6:	f3ef 8311 	mrs	r3, BASEPRI
 8001bea:	603b      	str	r3, [r7, #0]
  return(result);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <osKernelStart+0x3a>
    stat = osErrorISR;
 8001bf2:	f06f 0305 	mvn.w	r3, #5
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	e00e      	b.n	8001c18 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <osKernelStart+0x64>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <osKernelStart+0x64>)
 8001c04:	2202      	movs	r2, #2
 8001c06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001c08:	f001 f890 	bl	8002d2c <vTaskStartScheduler>
      stat = osOK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e002      	b.n	8001c18 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000012c 	.word	0x2000012c

08001c28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b092      	sub	sp, #72	; 0x48
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c38:	f3ef 8305 	mrs	r3, IPSR
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 8094 	bne.w	8001d6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c46:	f3ef 8310 	mrs	r3, PRIMASK
 8001c4a:	623b      	str	r3, [r7, #32]
  return(result);
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 808d 	bne.w	8001d6e <osThreadNew+0x146>
 8001c54:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <osThreadNew+0x150>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d106      	bne.n	8001c6a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8001c60:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 8082 	bne.w	8001d6e <osThreadNew+0x146>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d07e      	beq.n	8001d6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001c74:	2318      	movs	r3, #24
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001c78:	2300      	movs	r3, #0
 8001c7a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001c7c:	f107 031b 	add.w	r3, r7, #27
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d045      	beq.n	8001d1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <osThreadNew+0x74>
        name = attr->name;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <osThreadNew+0x9a>
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	2b38      	cmp	r3, #56	; 0x38
 8001cb4:	d805      	bhi.n	8001cc2 <osThreadNew+0x9a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <osThreadNew+0x9e>
        return (NULL);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e054      	b.n	8001d70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00e      	beq.n	8001cfc <osThreadNew+0xd4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2bbb      	cmp	r3, #187	; 0xbb
 8001ce4:	d90a      	bls.n	8001cfc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d006      	beq.n	8001cfc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <osThreadNew+0xd4>
        mem = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfa:	e010      	b.n	8001d1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <osThreadNew+0xf6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d108      	bne.n	8001d1e <osThreadNew+0xf6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d104      	bne.n	8001d1e <osThreadNew+0xf6>
          mem = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d18:	e001      	b.n	8001d1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d110      	bne.n	8001d46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d2c:	9202      	str	r2, [sp, #8]
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fe12 	bl	8002964 <xTaskCreateStatic>
 8001d40:	4603      	mov	r3, r0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e013      	b.n	8001d6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d110      	bne.n	8001d6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fe5c 	bl	8002a1c <xTaskCreate>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <osThreadNew+0x146>
          hTask = NULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d6e:	697b      	ldr	r3, [r7, #20]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3738      	adds	r7, #56	; 0x38
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000012c 	.word	0x2000012c

08001d7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d84:	f3ef 8305 	mrs	r3, IPSR
 8001d88:	613b      	str	r3, [r7, #16]
  return(result);
 8001d8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10f      	bne.n	8001db0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d90:	f3ef 8310 	mrs	r3, PRIMASK
 8001d94:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <osDelay+0x34>
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <osDelay+0x58>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d109      	bne.n	8001db8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001da4:	f3ef 8311 	mrs	r3, BASEPRI
 8001da8:	60bb      	str	r3, [r7, #8]
  return(result);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <osDelay+0x3c>
    stat = osErrorISR;
 8001db0:	f06f 0305 	mvn.w	r3, #5
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e007      	b.n	8001dc8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 ff7e 	bl	8002cc4 <vTaskDelay>
    }
  }

  return (stat);
 8001dc8:	697b      	ldr	r3, [r7, #20]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000012c 	.word	0x2000012c

08001dd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <vApplicationGetIdleTaskMemory+0x28>)
 8001de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8001dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000130 	.word	0x20000130
 8001e04:	200001ec 	.word	0x200001ec

08001e08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <vApplicationGetTimerTaskMemory+0x30>)
 8001e1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e26:	601a      	str	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200003ec 	.word	0x200003ec
 8001e38:	200004a8 	.word	0x200004a8

08001e3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f103 0208 	add.w	r2, r3, #8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f103 0208 	add.w	r2, r3, #8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f103 0208 	add.w	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eee:	d103      	bne.n	8001ef8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e00c      	b.n	8001f12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3308      	adds	r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e002      	b.n	8001f06 <vListInsert+0x2e>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d2f6      	bcs.n	8001f00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6892      	ldr	r2, [r2, #8]
 8001f5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6852      	ldr	r2, [r2, #4]
 8001f68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d103      	bne.n	8001f7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb4:	f383 8811 	msr	BASEPRI, r3
 8001fb8:	f3bf 8f6f 	isb	sy
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fc2:	bf00      	nop
 8001fc4:	e7fe      	b.n	8001fc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001fc6:	f001 fff9 	bl	8003fbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	68f9      	ldr	r1, [r7, #12]
 8001fd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	441a      	add	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	441a      	add	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	22ff      	movs	r2, #255	; 0xff
 800200a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d114      	bne.n	8002046 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01a      	beq.n	800205a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3310      	adds	r3, #16
 8002028:	4618      	mov	r0, r3
 800202a:	f001 f91b 	bl	8003264 <xTaskRemoveFromEventList>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d012      	beq.n	800205a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <xQueueGenericReset+0xcc>)
 8002036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	f3bf 8f6f 	isb	sy
 8002044:	e009      	b.n	800205a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3310      	adds	r3, #16
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fef6 	bl	8001e3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3324      	adds	r3, #36	; 0x24
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fef1 	bl	8001e3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800205a:	f001 ffdf 	bl	800401c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	e000ed04 	.word	0xe000ed04

0800206c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020ae:	bf00      	nop
 80020b0:	e7fe      	b.n	80020b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <xQueueGenericCreateStatic+0x52>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <xQueueGenericCreateStatic+0x56>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <xQueueGenericCreateStatic+0x58>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	623b      	str	r3, [r7, #32]
}
 80020da:	bf00      	nop
 80020dc:	e7fe      	b.n	80020dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <xQueueGenericCreateStatic+0x7e>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <xQueueGenericCreateStatic+0x82>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <xQueueGenericCreateStatic+0x84>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80020f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f8:	f383 8811 	msr	BASEPRI, r3
 80020fc:	f3bf 8f6f 	isb	sy
 8002100:	f3bf 8f4f 	dsb	sy
 8002104:	61fb      	str	r3, [r7, #28]
}
 8002106:	bf00      	nop
 8002108:	e7fe      	b.n	8002108 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800210a:	2350      	movs	r3, #80	; 0x50
 800210c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b50      	cmp	r3, #80	; 0x50
 8002112:	d00a      	beq.n	800212a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	61bb      	str	r3, [r7, #24]
}
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800213c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f805 	bl	800215a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002152:	4618      	mov	r0, r3
 8002154:	3730      	adds	r7, #48	; 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e002      	b.n	800217c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002188:	2101      	movs	r1, #1
 800218a:	69b8      	ldr	r0, [r7, #24]
 800218c:	f7ff ff06 	bl	8001f9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021ae:	2300      	movs	r3, #0
 80021b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <xQueueGenericSend+0x32>
	__asm volatile
 80021bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	f3bf 8f6f 	isb	sy
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80021ce:	bf00      	nop
 80021d0:	e7fe      	b.n	80021d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <xQueueGenericSend+0x40>
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <xQueueGenericSend+0x44>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <xQueueGenericSend+0x46>
 80021e4:	2300      	movs	r3, #0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <xQueueGenericSend+0x60>
	__asm volatile
 80021ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021fc:	bf00      	nop
 80021fe:	e7fe      	b.n	80021fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d103      	bne.n	800220e <xQueueGenericSend+0x6e>
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <xQueueGenericSend+0x72>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <xQueueGenericSend+0x74>
 8002212:	2300      	movs	r3, #0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <xQueueGenericSend+0x8e>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	623b      	str	r3, [r7, #32]
}
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800222e:	f001 f9df 	bl	80035f0 <xTaskGetSchedulerState>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <xQueueGenericSend+0x9e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <xQueueGenericSend+0xa2>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <xQueueGenericSend+0xa4>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <xQueueGenericSend+0xbe>
	__asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	61fb      	str	r3, [r7, #28]
}
 800225a:	bf00      	nop
 800225c:	e7fe      	b.n	800225c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800225e:	f001 fead 	bl	8003fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <xQueueGenericSend+0xd4>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d129      	bne.n	80022c8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800227a:	f000 fa07 	bl	800268c <prvCopyDataToQueue>
 800227e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	3324      	adds	r3, #36	; 0x24
 800228c:	4618      	mov	r0, r3
 800228e:	f000 ffe9 	bl	8003264 <xTaskRemoveFromEventList>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002298:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <xQueueGenericSend+0x1f8>)
 800229a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	e00a      	b.n	80022c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80022b0:	4b39      	ldr	r3, [pc, #228]	; (8002398 <xQueueGenericSend+0x1f8>)
 80022b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80022c0:	f001 feac 	bl	800401c <vPortExitCritical>
				return pdPASS;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e063      	b.n	8002390 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022ce:	f001 fea5 	bl	800401c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e05c      	b.n	8002390 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f823 	bl	800332c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022ea:	f001 fe97 	bl	800401c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022ee:	f000 fd8d 	bl	8002e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022f2:	f001 fe63 	bl	8003fbc <vPortEnterCritical>
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022fc:	b25b      	sxtb	r3, r3
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d103      	bne.n	800230c <xQueueGenericSend+0x16c>
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002312:	b25b      	sxtb	r3, r3
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d103      	bne.n	8002322 <xQueueGenericSend+0x182>
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002322:	f001 fe7b 	bl	800401c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002326:	1d3a      	adds	r2, r7, #4
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f001 f812 	bl	8003358 <xTaskCheckForTimeOut>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d124      	bne.n	8002384 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800233a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800233c:	f000 fa9e 	bl	800287c <prvIsQueueFull>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d018      	beq.n	8002378 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	3310      	adds	r3, #16
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f000 ff38 	bl	80031c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002356:	f000 fa29 	bl	80027ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800235a:	f000 fd65 	bl	8002e28 <xTaskResumeAll>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	f47f af7c 	bne.w	800225e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <xQueueGenericSend+0x1f8>)
 8002368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	e772      	b.n	800225e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800237a:	f000 fa17 	bl	80027ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800237e:	f000 fd53 	bl	8002e28 <xTaskResumeAll>
 8002382:	e76c      	b.n	800225e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002386:	f000 fa11 	bl	80027ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800238a:	f000 fd4d 	bl	8002e28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800238e:	2300      	movs	r3, #0
		}
	}
}
 8002390:	4618      	mov	r0, r3
 8002392:	3738      	adds	r7, #56	; 0x38
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	e000ed04 	.word	0xe000ed04

0800239c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08e      	sub	sp, #56	; 0x38
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023c6:	bf00      	nop
 80023c8:	e7fe      	b.n	80023c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <xQueueGenericSendFromISR+0x3c>
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <xQueueGenericSendFromISR+0x40>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <xQueueGenericSendFromISR+0x42>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80023e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	623b      	str	r3, [r7, #32]
}
 80023f4:	bf00      	nop
 80023f6:	e7fe      	b.n	80023f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d103      	bne.n	8002406 <xQueueGenericSendFromISR+0x6a>
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <xQueueGenericSendFromISR+0x6e>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <xQueueGenericSendFromISR+0x70>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	61fb      	str	r3, [r7, #28]
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002426:	f001 fe8b 	bl	8004140 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800242a:	f3ef 8211 	mrs	r2, BASEPRI
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	61ba      	str	r2, [r7, #24]
 8002440:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002442:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <xQueueGenericSendFromISR+0xbc>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d12c      	bne.n	80024b2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800245e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002468:	f000 f910 	bl	800268c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800246c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d112      	bne.n	800249c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	3324      	adds	r3, #36	; 0x24
 8002482:	4618      	mov	r0, r3
 8002484:	f000 feee 	bl	8003264 <xTaskRemoveFromEventList>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800249c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	b25a      	sxtb	r2, r3
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80024ac:	2301      	movs	r3, #1
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80024b0:	e001      	b.n	80024b6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	; 0x34
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80024c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3738      	adds	r7, #56	; 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	; 0x30
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <xQueueReceive+0x30>
	__asm volatile
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	623b      	str	r3, [r7, #32]
}
 80024f8:	bf00      	nop
 80024fa:	e7fe      	b.n	80024fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <xQueueReceive+0x3e>
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <xQueueReceive+0x42>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <xQueueReceive+0x44>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueReceive+0x5e>
	__asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	61fb      	str	r3, [r7, #28]
}
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800252a:	f001 f861 	bl	80035f0 <xTaskGetSchedulerState>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <xQueueReceive+0x6e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <xQueueReceive+0x72>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <xQueueReceive+0x74>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <xQueueReceive+0x8e>
	__asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	61bb      	str	r3, [r7, #24]
}
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800255a:	f001 fd2f 	bl	8003fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01f      	beq.n	80025aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800256e:	f000 f8f7 	bl	8002760 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00f      	beq.n	80025a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	3310      	adds	r3, #16
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fe6c 	bl	8003264 <xTaskRemoveFromEventList>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <xQueueReceive+0x1bc>)
 8002594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80025a2:	f001 fd3b 	bl	800401c <vPortExitCritical>
				return pdPASS;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e069      	b.n	800267e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025b0:	f001 fd34 	bl	800401c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e062      	b.n	800267e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 feb2 	bl	800332c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025cc:	f001 fd26 	bl	800401c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025d0:	f000 fc1c 	bl	8002e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025d4:	f001 fcf2 	bl	8003fbc <vPortEnterCritical>
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d103      	bne.n	80025ee <xQueueReceive+0x122>
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d103      	bne.n	8002604 <xQueueReceive+0x138>
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002604:	f001 fd0a 	bl	800401c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002608:	1d3a      	adds	r2, r7, #4
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fea1 	bl	8003358 <xTaskCheckForTimeOut>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d123      	bne.n	8002664 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800261c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800261e:	f000 f917 	bl	8002850 <prvIsQueueEmpty>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d017      	beq.n	8002658 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	3324      	adds	r3, #36	; 0x24
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fdc7 	bl	80031c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002638:	f000 f8b8 	bl	80027ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800263c:	f000 fbf4 	bl	8002e28 <xTaskResumeAll>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d189      	bne.n	800255a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <xQueueReceive+0x1bc>)
 8002648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	e780      	b.n	800255a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800265a:	f000 f8a7 	bl	80027ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800265e:	f000 fbe3 	bl	8002e28 <xTaskResumeAll>
 8002662:	e77a      	b.n	800255a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002666:	f000 f8a1 	bl	80027ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800266a:	f000 fbdd 	bl	8002e28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800266e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002670:	f000 f8ee 	bl	8002850 <prvIsQueueEmpty>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	f43f af6f 	beq.w	800255a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800267c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800267e:	4618      	mov	r0, r3
 8002680:	3730      	adds	r7, #48	; 0x30
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d14d      	bne.n	800274e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 ffb8 	bl	800362c <xTaskPriorityDisinherit>
 80026bc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	e043      	b.n	800274e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d119      	bne.n	8002700 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	461a      	mov	r2, r3
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	f001 ff6e 	bl	80045b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	441a      	add	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d32b      	bcc.n	800274e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	e026      	b.n	800274e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68d8      	ldr	r0, [r3, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	461a      	mov	r2, r3
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	f001 ff54 	bl	80045b8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	425b      	negs	r3, r3
 800271a:	441a      	add	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	425b      	negs	r3, r3
 8002736:	441a      	add	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d105      	bne.n	800274e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3b01      	subs	r3, #1
 800274c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002756:	697b      	ldr	r3, [r7, #20]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d018      	beq.n	80027a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	441a      	add	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d303      	bcc.n	8002794 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68d9      	ldr	r1, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	461a      	mov	r2, r3
 800279e:	6838      	ldr	r0, [r7, #0]
 80027a0:	f001 ff0a 	bl	80045b8 <memcpy>
	}
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80027b4:	f001 fc02 	bl	8003fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027c0:	e011      	b.n	80027e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3324      	adds	r3, #36	; 0x24
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fd48 	bl	8003264 <xTaskRemoveFromEventList>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027da:	f000 fe1f 	bl	800341c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	dce9      	bgt.n	80027c2 <prvUnlockQueue+0x16>
 80027ee:	e000      	b.n	80027f2 <prvUnlockQueue+0x46>
					break;
 80027f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	22ff      	movs	r2, #255	; 0xff
 80027f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027fa:	f001 fc0f 	bl	800401c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027fe:	f001 fbdd 	bl	8003fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002808:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800280a:	e011      	b.n	8002830 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d012      	beq.n	800283a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3310      	adds	r3, #16
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fd23 	bl	8003264 <xTaskRemoveFromEventList>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002824:	f000 fdfa 	bl	800341c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002828:	7bbb      	ldrb	r3, [r7, #14]
 800282a:	3b01      	subs	r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002834:	2b00      	cmp	r3, #0
 8002836:	dce9      	bgt.n	800280c <prvUnlockQueue+0x60>
 8002838:	e000      	b.n	800283c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800283a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	22ff      	movs	r2, #255	; 0xff
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002844:	f001 fbea 	bl	800401c <vPortExitCritical>
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002858:	f001 fbb0 	bl	8003fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002864:	2301      	movs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e001      	b.n	800286e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800286e:	f001 fbd5 	bl	800401c <vPortExitCritical>

	return xReturn;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002884:	f001 fb9a 	bl	8003fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	429a      	cmp	r2, r3
 8002892:	d102      	bne.n	800289a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002894:	2301      	movs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e001      	b.n	800289e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800289e:	f001 fbbd 	bl	800401c <vPortExitCritical>

	return xReturn;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e014      	b.n	80028e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028bc:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <vQueueAddToRegistry+0x4c>)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028c8:	490b      	ldr	r1, [pc, #44]	; (80028f8 <vQueueAddToRegistry+0x4c>)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <vQueueAddToRegistry+0x4c>)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028de:	e006      	b.n	80028ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b07      	cmp	r3, #7
 80028ea:	d9e7      	bls.n	80028bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	200008a8 	.word	0x200008a8

080028fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800290c:	f001 fb56 	bl	8003fbc <vPortEnterCritical>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002916:	b25b      	sxtb	r3, r3
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d103      	bne.n	8002926 <vQueueWaitForMessageRestricted+0x2a>
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800292c:	b25b      	sxtb	r3, r3
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d103      	bne.n	800293c <vQueueWaitForMessageRestricted+0x40>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800293c:	f001 fb6e 	bl	800401c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3324      	adds	r3, #36	; 0x24
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fc5b 	bl	800320c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff28 	bl	80027ac <prvUnlockQueue>
	}
 800295c:	bf00      	nop
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08e      	sub	sp, #56	; 0x38
 8002968:	af04      	add	r7, sp, #16
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	623b      	str	r3, [r7, #32]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <xTaskCreateStatic+0x46>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	61fb      	str	r3, [r7, #28]
}
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029aa:	23bc      	movs	r3, #188	; 0xbc
 80029ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2bbc      	cmp	r3, #188	; 0xbc
 80029b2:	d00a      	beq.n	80029ca <xTaskCreateStatic+0x66>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	61bb      	str	r3, [r7, #24]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01e      	beq.n	8002a0e <xTaskCreateStatic+0xaa>
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01b      	beq.n	8002a0e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029e8:	2300      	movs	r3, #0
 80029ea:	9303      	str	r3, [sp, #12]
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f851 	bl	8002aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a08:	f000 f8ec 	bl	8002be4 <prvAddNewTaskToReadyList>
 8002a0c:	e001      	b.n	8002a12 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a12:	697b      	ldr	r3, [r7, #20]
	}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3728      	adds	r7, #40	; 0x28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af04      	add	r7, sp, #16
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 fbc3 	bl	80041bc <pvPortMalloc>
 8002a36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00e      	beq.n	8002a5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a3e:	20bc      	movs	r0, #188	; 0xbc
 8002a40:	f001 fbbc 	bl	80041bc <pvPortMalloc>
 8002a44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
 8002a52:	e005      	b.n	8002a60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a54:	6978      	ldr	r0, [r7, #20]
 8002a56:	f001 fc75 	bl	8004344 <vPortFree>
 8002a5a:	e001      	b.n	8002a60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d017      	beq.n	8002a96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	2300      	movs	r3, #0
 8002a72:	9303      	str	r3, [sp, #12]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	9302      	str	r3, [sp, #8]
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f80f 	bl	8002aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a8a:	69f8      	ldr	r0, [r7, #28]
 8002a8c:	f000 f8aa 	bl	8002be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61bb      	str	r3, [r7, #24]
 8002a94:	e002      	b.n	8002a9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
	}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	21a5      	movs	r1, #165	; 0xa5
 8002ac2:	f001 fd87 	bl	80045d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f023 0307 	bic.w	r3, r3, #7
 8002ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	617b      	str	r3, [r7, #20]
}
 8002afc:	bf00      	nop
 8002afe:	e7fe      	b.n	8002afe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	e012      	b.n	8002b2c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	7819      	ldrb	r1, [r3, #0]
 8002b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	3334      	adds	r3, #52	; 0x34
 8002b16:	460a      	mov	r2, r1
 8002b18:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	d9e9      	bls.n	8002b06 <prvInitialiseNewTask+0x5e>
 8002b32:	e000      	b.n	8002b36 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002b34:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	2b37      	cmp	r3, #55	; 0x37
 8002b42:	d901      	bls.n	8002b48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b44:	2337      	movs	r3, #55	; 0x37
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	2200      	movs	r2, #0
 8002b58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f98b 	bl	8001e7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	3318      	adds	r3, #24
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f986 	bl	8001e7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	3354      	adds	r3, #84	; 0x54
 8002b98:	2260      	movs	r2, #96	; 0x60
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 fd19 	bl	80045d4 <memset>
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <prvInitialiseNewTask+0x130>)
 8002ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <prvInitialiseNewTask+0x134>)
 8002bac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <prvInitialiseNewTask+0x138>)
 8002bb2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	68f9      	ldr	r1, [r7, #12]
 8002bb8:	69b8      	ldr	r0, [r7, #24]
 8002bba:	f001 f90b 	bl	8003dd4 <pxPortInitialiseStack>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bd0:	bf00      	nop
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	08004870 	.word	0x08004870
 8002bdc:	08004890 	.word	0x08004890
 8002be0:	08004850 	.word	0x08004850

08002be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bec:	f001 f9e6 	bl	8003fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <prvAddNewTaskToReadyList+0xc4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <prvAddNewTaskToReadyList+0xc4>)
 8002bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <prvAddNewTaskToReadyList+0xc8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c02:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <prvAddNewTaskToReadyList+0xc8>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <prvAddNewTaskToReadyList+0xc4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d110      	bne.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c10:	f000 fc28 	bl	8003464 <prvInitialiseTaskLists>
 8002c14:	e00d      	b.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <prvAddNewTaskToReadyList+0xcc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c1e:	4b23      	ldr	r3, [pc, #140]	; (8002cac <prvAddNewTaskToReadyList+0xc8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d802      	bhi.n	8002c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <prvAddNewTaskToReadyList+0xc8>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <prvAddNewTaskToReadyList+0xd0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	4a1e      	ldr	r2, [pc, #120]	; (8002cb4 <prvAddNewTaskToReadyList+0xd0>)
 8002c3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <prvAddNewTaskToReadyList+0xd0>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <prvAddNewTaskToReadyList+0xd4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d903      	bls.n	8002c58 <prvAddNewTaskToReadyList+0x74>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <prvAddNewTaskToReadyList+0xd4>)
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <prvAddNewTaskToReadyList+0xd8>)
 8002c66:	441a      	add	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f7ff f90f 	bl	8001e92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c74:	f001 f9d2 	bl	800401c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <prvAddNewTaskToReadyList+0xcc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <prvAddNewTaskToReadyList+0xc8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d207      	bcs.n	8002c9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <prvAddNewTaskToReadyList+0xdc>)
 8002c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000dbc 	.word	0x20000dbc
 8002cac:	200008e8 	.word	0x200008e8
 8002cb0:	20000dc8 	.word	0x20000dc8
 8002cb4:	20000dd8 	.word	0x20000dd8
 8002cb8:	20000dc4 	.word	0x20000dc4
 8002cbc:	200008ec 	.word	0x200008ec
 8002cc0:	e000ed04 	.word	0xe000ed04

08002cc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d017      	beq.n	8002d06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <vTaskDelay+0x60>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <vTaskDelay+0x30>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	60bb      	str	r3, [r7, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cf4:	f000 f88a 	bl	8002e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fd04 	bl	8003708 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d00:	f000 f892 	bl	8002e28 <xTaskResumeAll>
 8002d04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <vTaskDelay+0x64>)
 8002d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000de4 	.word	0x20000de4
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d3a:	463a      	mov	r2, r7
 8002d3c:	1d39      	adds	r1, r7, #4
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff f848 	bl	8001dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	9202      	str	r2, [sp, #8]
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	460a      	mov	r2, r1
 8002d5a:	4924      	ldr	r1, [pc, #144]	; (8002dec <vTaskStartScheduler+0xc0>)
 8002d5c:	4824      	ldr	r0, [pc, #144]	; (8002df0 <vTaskStartScheduler+0xc4>)
 8002d5e:	f7ff fe01 	bl	8002964 <xTaskCreateStatic>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <vTaskStartScheduler+0xc8>)
 8002d66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <vTaskStartScheduler+0xc8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d70:	2301      	movs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e001      	b.n	8002d7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d80:	f000 fd16 	bl	80037b0 <xTimerCreateTimerTask>
 8002d84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d11b      	bne.n	8002dc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	613b      	str	r3, [r7, #16]
}
 8002d9e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002da0:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <vTaskStartScheduler+0xcc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3354      	adds	r3, #84	; 0x54
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <vTaskStartScheduler+0xd0>)
 8002da8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <vTaskStartScheduler+0xd4>)
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <vTaskStartScheduler+0xd8>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <vTaskStartScheduler+0xdc>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dbe:	f001 f88b 	bl	8003ed8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dc2:	e00e      	b.n	8002de2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d10a      	bne.n	8002de2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	60fb      	str	r3, [r7, #12]
}
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <vTaskStartScheduler+0xb4>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	080047b4 	.word	0x080047b4
 8002df0:	08003435 	.word	0x08003435
 8002df4:	20000de0 	.word	0x20000de0
 8002df8:	200008e8 	.word	0x200008e8
 8002dfc:	20000010 	.word	0x20000010
 8002e00:	20000ddc 	.word	0x20000ddc
 8002e04:	20000dc8 	.word	0x20000dc8
 8002e08:	20000dc0 	.word	0x20000dc0

08002e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <vTaskSuspendAll+0x18>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	4a03      	ldr	r2, [pc, #12]	; (8002e24 <vTaskSuspendAll+0x18>)
 8002e18:	6013      	str	r3, [r2, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000de4 	.word	0x20000de4

08002e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e36:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <xTaskResumeAll+0x118>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	603b      	str	r3, [r7, #0]
}
 8002e50:	bf00      	nop
 8002e52:	e7fe      	b.n	8002e52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e54:	f001 f8b2 	bl	8003fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <xTaskResumeAll+0x118>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <xTaskResumeAll+0x118>)
 8002e60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <xTaskResumeAll+0x118>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d162      	bne.n	8002f30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <xTaskResumeAll+0x11c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d05e      	beq.n	8002f30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e72:	e02f      	b.n	8002ed4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <xTaskResumeAll+0x120>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3318      	adds	r3, #24
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff f861 	bl	8001f48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f85c 	bl	8001f48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <xTaskResumeAll+0x124>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d903      	bls.n	8002ea4 <xTaskResumeAll+0x7c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <xTaskResumeAll+0x124>)
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <xTaskResumeAll+0x128>)
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f7fe ffe9 	bl	8001e92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <xTaskResumeAll+0x12c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <xTaskResumeAll+0x130>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <xTaskResumeAll+0x120>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1cb      	bne.n	8002e74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ee2:	f000 fb61 	bl	80035a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <xTaskResumeAll+0x134>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ef2:	f000 f845 	bl	8002f80 <xTaskIncrementTick>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <xTaskResumeAll+0x130>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f1      	bne.n	8002ef2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <xTaskResumeAll+0x134>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <xTaskResumeAll+0x130>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <xTaskResumeAll+0x138>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f30:	f001 f874 	bl	800401c <vPortExitCritical>

	return xAlreadyYielded;
 8002f34:	68bb      	ldr	r3, [r7, #8]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000de4 	.word	0x20000de4
 8002f44:	20000dbc 	.word	0x20000dbc
 8002f48:	20000d7c 	.word	0x20000d7c
 8002f4c:	20000dc4 	.word	0x20000dc4
 8002f50:	200008ec 	.word	0x200008ec
 8002f54:	200008e8 	.word	0x200008e8
 8002f58:	20000dd0 	.word	0x20000dd0
 8002f5c:	20000dcc 	.word	0x20000dcc
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <xTaskGetTickCount+0x18>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000dc0 	.word	0x20000dc0

08002f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8a:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <xTaskIncrementTick+0x150>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 808e 	bne.w	80030b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f94:	4b4f      	ldr	r3, [pc, #316]	; (80030d4 <xTaskIncrementTick+0x154>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f9c:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <xTaskIncrementTick+0x154>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d120      	bne.n	8002fea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fa8:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <xTaskIncrementTick+0x158>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	603b      	str	r3, [r7, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <xTaskIncrementTick+0x46>
 8002fc8:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <xTaskIncrementTick+0x158>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <xTaskIncrementTick+0x15c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a41      	ldr	r2, [pc, #260]	; (80030d8 <xTaskIncrementTick+0x158>)
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4a41      	ldr	r2, [pc, #260]	; (80030dc <xTaskIncrementTick+0x15c>)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <xTaskIncrementTick+0x160>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	4a3f      	ldr	r2, [pc, #252]	; (80030e0 <xTaskIncrementTick+0x160>)
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	f000 fadf 	bl	80035a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fea:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <xTaskIncrementTick+0x164>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d34e      	bcc.n	8003092 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff4:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <xTaskIncrementTick+0x158>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <xTaskIncrementTick+0x82>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <xTaskIncrementTick+0x84>
 8003002:	2300      	movs	r3, #0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <xTaskIncrementTick+0x164>)
 800300a:	f04f 32ff 	mov.w	r2, #4294967295
 800300e:	601a      	str	r2, [r3, #0]
					break;
 8003010:	e03f      	b.n	8003092 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <xTaskIncrementTick+0x158>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d203      	bcs.n	8003032 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800302a:	4a2e      	ldr	r2, [pc, #184]	; (80030e4 <xTaskIncrementTick+0x164>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6013      	str	r3, [r2, #0]
						break;
 8003030:	e02f      	b.n	8003092 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3304      	adds	r3, #4
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe ff86 	bl	8001f48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3318      	adds	r3, #24
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe ff7d 	bl	8001f48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003052:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <xTaskIncrementTick+0x168>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d903      	bls.n	8003062 <xTaskIncrementTick+0xe2>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <xTaskIncrementTick+0x168>)
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <xTaskIncrementTick+0x16c>)
 8003070:	441a      	add	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3304      	adds	r3, #4
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7fe ff0a 	bl	8001e92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <xTaskIncrementTick+0x170>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	429a      	cmp	r2, r3
 800308a:	d3b3      	bcc.n	8002ff4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800308c:	2301      	movs	r3, #1
 800308e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003090:	e7b0      	b.n	8002ff4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003092:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <xTaskIncrementTick+0x170>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	4914      	ldr	r1, [pc, #80]	; (80030ec <xTaskIncrementTick+0x16c>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d907      	bls.n	80030ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e004      	b.n	80030ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <xTaskIncrementTick+0x174>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a0f      	ldr	r2, [pc, #60]	; (80030f4 <xTaskIncrementTick+0x174>)
 80030b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <xTaskIncrementTick+0x178>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030c6:	697b      	ldr	r3, [r7, #20]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000de4 	.word	0x20000de4
 80030d4:	20000dc0 	.word	0x20000dc0
 80030d8:	20000d74 	.word	0x20000d74
 80030dc:	20000d78 	.word	0x20000d78
 80030e0:	20000dd4 	.word	0x20000dd4
 80030e4:	20000ddc 	.word	0x20000ddc
 80030e8:	20000dc4 	.word	0x20000dc4
 80030ec:	200008ec 	.word	0x200008ec
 80030f0:	200008e8 	.word	0x200008e8
 80030f4:	20000dcc 	.word	0x20000dcc
 80030f8:	20000dd0 	.word	0x20000dd0

080030fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <vTaskSwitchContext+0xb0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <vTaskSwitchContext+0xb4>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003110:	e046      	b.n	80031a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <vTaskSwitchContext+0xb4>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003118:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <vTaskSwitchContext+0xb8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e010      	b.n	8003142 <vTaskSwitchContext+0x46>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <vTaskSwitchContext+0x40>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	607b      	str	r3, [r7, #4]
}
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <vTaskSwitchContext+0x3e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3b01      	subs	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	491d      	ldr	r1, [pc, #116]	; (80031b8 <vTaskSwitchContext+0xbc>)
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0e4      	beq.n	8003120 <vTaskSwitchContext+0x24>
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <vTaskSwitchContext+0xbc>)
 8003162:	4413      	add	r3, r2
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	3308      	adds	r3, #8
 8003178:	429a      	cmp	r2, r3
 800317a:	d104      	bne.n	8003186 <vTaskSwitchContext+0x8a>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <vTaskSwitchContext+0xc0>)
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <vTaskSwitchContext+0xb8>)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <vTaskSwitchContext+0xc0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3354      	adds	r3, #84	; 0x54
 800319c:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <vTaskSwitchContext+0xc4>)
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000de4 	.word	0x20000de4
 80031b0:	20000dd0 	.word	0x20000dd0
 80031b4:	20000dc4 	.word	0x20000dc4
 80031b8:	200008ec 	.word	0x200008ec
 80031bc:	200008e8 	.word	0x200008e8
 80031c0:	20000010 	.word	0x20000010

080031c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60fb      	str	r3, [r7, #12]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <vTaskPlaceOnEventList+0x44>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3318      	adds	r3, #24
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fe fe70 	bl	8001ed8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031f8:	2101      	movs	r1, #1
 80031fa:	6838      	ldr	r0, [r7, #0]
 80031fc:	f000 fa84 	bl	8003708 <prvAddCurrentTaskToDelayedList>
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200008e8 	.word	0x200008e8

0800320c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	617b      	str	r3, [r7, #20]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <vTaskPlaceOnEventListRestricted+0x54>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3318      	adds	r3, #24
 800323a:	4619      	mov	r1, r3
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7fe fe28 	bl	8001e92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
 800324c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f000 fa59 	bl	8003708 <prvAddCurrentTaskToDelayedList>
	}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200008e8 	.word	0x200008e8

08003264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	60fb      	str	r3, [r7, #12]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	3318      	adds	r3, #24
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fe57 	bl	8001f48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <xTaskRemoveFromEventList+0xb0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11d      	bne.n	80032de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fe4e 	bl	8001f48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <xTaskRemoveFromEventList+0xb4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d903      	bls.n	80032c0 <xTaskRemoveFromEventList+0x5c>
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <xTaskRemoveFromEventList+0xb4>)
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <xTaskRemoveFromEventList+0xb8>)
 80032ce:	441a      	add	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7fe fddb 	bl	8001e92 <vListInsertEnd>
 80032dc:	e005      	b.n	80032ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	3318      	adds	r3, #24
 80032e2:	4619      	mov	r1, r3
 80032e4:	480e      	ldr	r0, [pc, #56]	; (8003320 <xTaskRemoveFromEventList+0xbc>)
 80032e6:	f7fe fdd4 	bl	8001e92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <xTaskRemoveFromEventList+0xc0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d905      	bls.n	8003304 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <xTaskRemoveFromEventList+0xc4>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e001      	b.n	8003308 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003308:	697b      	ldr	r3, [r7, #20]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000de4 	.word	0x20000de4
 8003318:	20000dc4 	.word	0x20000dc4
 800331c:	200008ec 	.word	0x200008ec
 8003320:	20000d7c 	.word	0x20000d7c
 8003324:	200008e8 	.word	0x200008e8
 8003328:	20000dd0 	.word	0x20000dd0

0800332c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <vTaskInternalSetTimeOutState+0x24>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <vTaskInternalSetTimeOutState+0x28>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	605a      	str	r2, [r3, #4]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000dd4 	.word	0x20000dd4
 8003354:	20000dc0 	.word	0x20000dc0

08003358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	613b      	str	r3, [r7, #16]
}
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800339a:	f000 fe0f 	bl	8003fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <xTaskCheckForTimeOut+0xbc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d102      	bne.n	80033be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	e023      	b.n	8003406 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <xTaskCheckForTimeOut+0xc0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d007      	beq.n	80033da <xTaskCheckForTimeOut+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e015      	b.n	8003406 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d20b      	bcs.n	80033fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1ad2      	subs	r2, r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff9b 	bl	800332c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e004      	b.n	8003406 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003402:	2301      	movs	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003406:	f000 fe09 	bl	800401c <vPortExitCritical>

	return xReturn;
 800340a:	69fb      	ldr	r3, [r7, #28]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000dc0 	.word	0x20000dc0
 8003418:	20000dd4 	.word	0x20000dd4

0800341c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <vTaskMissedYield+0x14>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000dd0 	.word	0x20000dd0

08003434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800343c:	f000 f852 	bl	80034e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <prvIdleTask+0x28>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d9f9      	bls.n	800343c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <prvIdleTask+0x2c>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003458:	e7f0      	b.n	800343c <prvIdleTask+0x8>
 800345a:	bf00      	nop
 800345c:	200008ec 	.word	0x200008ec
 8003460:	e000ed04 	.word	0xe000ed04

08003464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	e00c      	b.n	800348a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <prvInitialiseTaskLists+0x60>)
 800347c:	4413      	add	r3, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fcdc 	bl	8001e3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3301      	adds	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b37      	cmp	r3, #55	; 0x37
 800348e:	d9ef      	bls.n	8003470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003490:	480d      	ldr	r0, [pc, #52]	; (80034c8 <prvInitialiseTaskLists+0x64>)
 8003492:	f7fe fcd3 	bl	8001e3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003496:	480d      	ldr	r0, [pc, #52]	; (80034cc <prvInitialiseTaskLists+0x68>)
 8003498:	f7fe fcd0 	bl	8001e3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800349c:	480c      	ldr	r0, [pc, #48]	; (80034d0 <prvInitialiseTaskLists+0x6c>)
 800349e:	f7fe fccd 	bl	8001e3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034a2:	480c      	ldr	r0, [pc, #48]	; (80034d4 <prvInitialiseTaskLists+0x70>)
 80034a4:	f7fe fcca 	bl	8001e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034a8:	480b      	ldr	r0, [pc, #44]	; (80034d8 <prvInitialiseTaskLists+0x74>)
 80034aa:	f7fe fcc7 	bl	8001e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <prvInitialiseTaskLists+0x78>)
 80034b0:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <prvInitialiseTaskLists+0x64>)
 80034b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <prvInitialiseTaskLists+0x7c>)
 80034b6:	4a05      	ldr	r2, [pc, #20]	; (80034cc <prvInitialiseTaskLists+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	200008ec 	.word	0x200008ec
 80034c8:	20000d4c 	.word	0x20000d4c
 80034cc:	20000d60 	.word	0x20000d60
 80034d0:	20000d7c 	.word	0x20000d7c
 80034d4:	20000d90 	.word	0x20000d90
 80034d8:	20000da8 	.word	0x20000da8
 80034dc:	20000d74 	.word	0x20000d74
 80034e0:	20000d78 	.word	0x20000d78

080034e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ea:	e019      	b.n	8003520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034ec:	f000 fd66 	bl	8003fbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034f0:	4b10      	ldr	r3, [pc, #64]	; (8003534 <prvCheckTasksWaitingTermination+0x50>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fd23 	bl	8001f48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <prvCheckTasksWaitingTermination+0x54>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <prvCheckTasksWaitingTermination+0x54>)
 800350a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <prvCheckTasksWaitingTermination+0x58>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3b01      	subs	r3, #1
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <prvCheckTasksWaitingTermination+0x58>)
 8003514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003516:	f000 fd81 	bl	800401c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f810 	bl	8003540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <prvCheckTasksWaitingTermination+0x58>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e1      	bne.n	80034ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000d90 	.word	0x20000d90
 8003538:	20000dbc 	.word	0x20000dbc
 800353c:	20000da4 	.word	0x20000da4

08003540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3354      	adds	r3, #84	; 0x54
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f857 	bl	8004600 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	4618      	mov	r0, r3
 8003562:	f000 feef 	bl	8004344 <vPortFree>
				vPortFree( pxTCB );
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 feec 	bl	8004344 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800356c:	e018      	b.n	80035a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003574:	2b01      	cmp	r3, #1
 8003576:	d103      	bne.n	8003580 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fee3 	bl	8004344 <vPortFree>
	}
 800357e:	e00f      	b.n	80035a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003586:	2b02      	cmp	r3, #2
 8003588:	d00a      	beq.n	80035a0 <prvDeleteTCB+0x60>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60fb      	str	r3, [r7, #12]
}
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <prvDeleteTCB+0x5e>
	}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <prvResetNextTaskUnblockTime+0x40>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <prvResetNextTaskUnblockTime+0x14>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <prvResetNextTaskUnblockTime+0x16>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <prvResetNextTaskUnblockTime+0x44>)
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035ca:	e008      	b.n	80035de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <prvResetNextTaskUnblockTime+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <prvResetNextTaskUnblockTime+0x44>)
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000d74 	.word	0x20000d74
 80035ec:	20000ddc 	.word	0x20000ddc

080035f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <xTaskGetSchedulerState+0x34>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035fe:	2301      	movs	r3, #1
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	e008      	b.n	8003616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <xTaskGetSchedulerState+0x38>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800360c:	2302      	movs	r3, #2
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	e001      	b.n	8003616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003616:	687b      	ldr	r3, [r7, #4]
	}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000dc8 	.word	0x20000dc8
 8003628:	20000de4 	.word	0x20000de4

0800362c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d056      	beq.n	80036f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <xTaskPriorityDisinherit+0xd0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d00a      	beq.n	8003662 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	60fb      	str	r3, [r7, #12]
}
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60bb      	str	r3, [r7, #8]
}
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	1e5a      	subs	r2, r3, #1
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	429a      	cmp	r2, r3
 8003694:	d02c      	beq.n	80036f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369a:	2b00      	cmp	r3, #0
 800369c:	d128      	bne.n	80036f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	3304      	adds	r3, #4
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fc50 	bl	8001f48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <xTaskPriorityDisinherit+0xd4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d903      	bls.n	80036d0 <xTaskPriorityDisinherit+0xa4>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <xTaskPriorityDisinherit+0xd4>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4a09      	ldr	r2, [pc, #36]	; (8003704 <xTaskPriorityDisinherit+0xd8>)
 80036de:	441a      	add	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7fe fbd3 	bl	8001e92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036f0:	697b      	ldr	r3, [r7, #20]
	}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200008e8 	.word	0x200008e8
 8003700:	20000dc4 	.word	0x20000dc4
 8003704:	200008ec 	.word	0x200008ec

08003708 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003712:	4b21      	ldr	r3, [pc, #132]	; (8003798 <prvAddCurrentTaskToDelayedList+0x90>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003718:	4b20      	ldr	r3, [pc, #128]	; (800379c <prvAddCurrentTaskToDelayedList+0x94>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3304      	adds	r3, #4
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fc12 	bl	8001f48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d10a      	bne.n	8003742 <prvAddCurrentTaskToDelayedList+0x3a>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <prvAddCurrentTaskToDelayedList+0x94>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4819      	ldr	r0, [pc, #100]	; (80037a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800373c:	f7fe fba9 	bl	8001e92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003740:	e026      	b.n	8003790 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <prvAddCurrentTaskToDelayedList+0x94>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	429a      	cmp	r2, r3
 8003758:	d209      	bcs.n	800376e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <prvAddCurrentTaskToDelayedList+0x94>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7fe fbb6 	bl	8001ed8 <vListInsert>
}
 800376c:	e010      	b.n	8003790 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <prvAddCurrentTaskToDelayedList+0x94>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f7fe fbac 	bl	8001ed8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d202      	bcs.n	8003790 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800378a:	4a08      	ldr	r2, [pc, #32]	; (80037ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6013      	str	r3, [r2, #0]
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000dc0 	.word	0x20000dc0
 800379c:	200008e8 	.word	0x200008e8
 80037a0:	20000da8 	.word	0x20000da8
 80037a4:	20000d78 	.word	0x20000d78
 80037a8:	20000d74 	.word	0x20000d74
 80037ac:	20000ddc 	.word	0x20000ddc

080037b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80037ba:	f000 facb 	bl	8003d54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <xTimerCreateTimerTask+0x80>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d021      	beq.n	800380a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	f107 0108 	add.w	r1, r7, #8
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe fb15 	bl	8001e08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	9202      	str	r2, [sp, #8]
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	2302      	movs	r3, #2
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2300      	movs	r3, #0
 80037ee:	460a      	mov	r2, r1
 80037f0:	4910      	ldr	r1, [pc, #64]	; (8003834 <xTimerCreateTimerTask+0x84>)
 80037f2:	4811      	ldr	r0, [pc, #68]	; (8003838 <xTimerCreateTimerTask+0x88>)
 80037f4:	f7ff f8b6 	bl	8002964 <xTaskCreateStatic>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <xTimerCreateTimerTask+0x8c>)
 80037fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <xTimerCreateTimerTask+0x8c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	613b      	str	r3, [r7, #16]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003826:	697b      	ldr	r3, [r7, #20]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000e18 	.word	0x20000e18
 8003834:	080047bc 	.word	0x080047bc
 8003838:	0800395d 	.word	0x0800395d
 800383c:	20000e1c 	.word	0x20000e1c

08003840 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	623b      	str	r3, [r7, #32]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800386e:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <xTimerGenericCommand+0x98>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02a      	beq.n	80038cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b05      	cmp	r3, #5
 8003886:	dc18      	bgt.n	80038ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003888:	f7ff feb2 	bl	80035f0 <xTaskGetSchedulerState>
 800388c:	4603      	mov	r3, r0
 800388e:	2b02      	cmp	r3, #2
 8003890:	d109      	bne.n	80038a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <xTimerGenericCommand+0x98>)
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	f107 0110 	add.w	r1, r7, #16
 800389a:	2300      	movs	r3, #0
 800389c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389e:	f7fe fc7f 	bl	80021a0 <xQueueGenericSend>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24
 80038a4:	e012      	b.n	80038cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <xTimerGenericCommand+0x98>)
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	f107 0110 	add.w	r1, r7, #16
 80038ae:	2300      	movs	r3, #0
 80038b0:	2200      	movs	r2, #0
 80038b2:	f7fe fc75 	bl	80021a0 <xQueueGenericSend>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24
 80038b8:	e008      	b.n	80038cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <xTimerGenericCommand+0x98>)
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	f107 0110 	add.w	r1, r7, #16
 80038c2:	2300      	movs	r3, #0
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	f7fe fd69 	bl	800239c <xQueueGenericSendFromISR>
 80038ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3728      	adds	r7, #40	; 0x28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000e18 	.word	0x20000e18

080038dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <prvProcessExpiredTimer+0x7c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe fb27 	bl	8001f48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d122      	bne.n	8003948 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	18d1      	adds	r1, r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f000 f8c8 	bl	8003aa4 <prvInsertTimerInActiveList>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800391a:	2300      	movs	r3, #0
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	2100      	movs	r1, #0
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f7ff ff8b 	bl	8003840 <xTimerGenericCommand>
 800392a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	60fb      	str	r3, [r7, #12]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	4798      	blx	r3
}
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000e10 	.word	0x20000e10

0800395c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003964:	f107 0308 	add.w	r3, r7, #8
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f857 	bl	8003a1c <prvGetNextExpireTime>
 800396e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4619      	mov	r1, r3
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f803 	bl	8003980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800397a:	f000 f8d5 	bl	8003b28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800397e:	e7f1      	b.n	8003964 <prvTimerTask+0x8>

08003980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800398a:	f7ff fa3f 	bl	8002e0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f866 	bl	8003a64 <prvSampleTimeNow>
 8003998:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d130      	bne.n	8003a02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <prvProcessTimerOrBlockTask+0x3c>
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d806      	bhi.n	80039bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80039ae:	f7ff fa3b 	bl	8002e28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff91 	bl	80038dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80039ba:	e024      	b.n	8003a06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <prvProcessTimerOrBlockTask+0x90>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <prvProcessTimerOrBlockTask+0x94>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	f7fe ff8b 	bl	80028fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80039e6:	f7ff fa1f 	bl	8002e28 <xTaskResumeAll>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <prvProcessTimerOrBlockTask+0x98>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
}
 8003a00:	e001      	b.n	8003a06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003a02:	f7ff fa11 	bl	8002e28 <xTaskResumeAll>
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000e14 	.word	0x20000e14
 8003a14:	20000e18 	.word	0x20000e18
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <prvGetNextExpireTime+0x44>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <prvGetNextExpireTime+0x44>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e001      	b.n	8003a52 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000e10 	.word	0x20000e10

08003a64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003a6c:	f7ff fa7a 	bl	8002f64 <xTaskGetTickCount>
 8003a70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <prvSampleTimeNow+0x3c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d205      	bcs.n	8003a88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a7c:	f000 f908 	bl	8003c90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e002      	b.n	8003a8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a8e:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <prvSampleTimeNow+0x3c>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003a94:	68fb      	ldr	r3, [r7, #12]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000e20 	.word	0x20000e20

08003aa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d812      	bhi.n	8003af0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	1ad2      	subs	r2, r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d302      	bcc.n	8003ade <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	e01b      	b.n	8003b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <prvInsertTimerInActiveList+0x7c>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fe f9f5 	bl	8001ed8 <vListInsert>
 8003aee:	e012      	b.n	8003b16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d206      	bcs.n	8003b06 <prvInsertTimerInActiveList+0x62>
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d302      	bcc.n	8003b06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003b00:	2301      	movs	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e007      	b.n	8003b16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <prvInsertTimerInActiveList+0x80>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4610      	mov	r0, r2
 8003b12:	f7fe f9e1 	bl	8001ed8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003b16:	697b      	ldr	r3, [r7, #20]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000e14 	.word	0x20000e14
 8003b24:	20000e10 	.word	0x20000e10

08003b28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08e      	sub	sp, #56	; 0x38
 8003b2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b2e:	e09d      	b.n	8003c6c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	da18      	bge.n	8003b68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	3304      	adds	r3, #4
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10a      	bne.n	8003b58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	61fb      	str	r3, [r7, #28]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5e:	6850      	ldr	r0, [r2, #4]
 8003b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b62:	6892      	ldr	r2, [r2, #8]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db7d      	blt.n	8003c6a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe f9e2 	bl	8001f48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b84:	463b      	mov	r3, r7
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff ff6c 	bl	8003a64 <prvSampleTimeNow>
 8003b8c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b09      	cmp	r3, #9
 8003b92:	d86b      	bhi.n	8003c6c <prvProcessReceivedCommands+0x144>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <prvProcessReceivedCommands+0x74>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bc5 	.word	0x08003bc5
 8003ba0:	08003bc5 	.word	0x08003bc5
 8003ba4:	08003bc5 	.word	0x08003bc5
 8003ba8:	08003c6d 	.word	0x08003c6d
 8003bac:	08003c21 	.word	0x08003c21
 8003bb0:	08003c59 	.word	0x08003c59
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bc5 	.word	0x08003bc5
 8003bbc:	08003c6d 	.word	0x08003c6d
 8003bc0:	08003c21 	.word	0x08003c21
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	18d1      	adds	r1, r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd2:	f7ff ff67 	bl	8003aa4 <prvInsertTimerInActiveList>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d047      	beq.n	8003c6c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003be2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d13f      	bne.n	8003c6c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	441a      	add	r2, r3
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bfe:	f7ff fe1f 	bl	8003840 <xTimerGenericCommand>
 8003c02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d130      	bne.n	8003c6c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61bb      	str	r3, [r7, #24]
}
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	617b      	str	r3, [r7, #20]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	18d1      	adds	r1, r2, r3
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c52:	f7ff ff27 	bl	8003aa4 <prvInsertTimerInActiveList>
					break;
 8003c56:	e009      	b.n	8003c6c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c64:	f000 fb6e 	bl	8004344 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c68:	e000      	b.n	8003c6c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003c6a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <prvProcessReceivedCommands+0x164>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1d39      	adds	r1, r7, #4
 8003c72:	2200      	movs	r2, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fc29 	bl	80024cc <xQueueReceive>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f af57 	bne.w	8003b30 <prvProcessReceivedCommands+0x8>
	}
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	3730      	adds	r7, #48	; 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000e18 	.word	0x20000e18

08003c90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c96:	e045      	b.n	8003d24 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <prvSwitchTimerLists+0xbc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <prvSwitchTimerLists+0xbc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe f949 	bl	8001f48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d12e      	bne.n	8003d24 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d90e      	bls.n	8003cf6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <prvSwitchTimerLists+0xbc>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe f8f2 	bl	8001ed8 <vListInsert>
 8003cf4:	e016      	b.n	8003d24 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff fd9d 	bl	8003840 <xTimerGenericCommand>
 8003d06:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	603b      	str	r3, [r7, #0]
}
 8003d20:	bf00      	nop
 8003d22:	e7fe      	b.n	8003d22 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <prvSwitchTimerLists+0xbc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1b4      	bne.n	8003c98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <prvSwitchTimerLists+0xbc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <prvSwitchTimerLists+0xc0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <prvSwitchTimerLists+0xbc>)
 8003d3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003d3c:	4a04      	ldr	r2, [pc, #16]	; (8003d50 <prvSwitchTimerLists+0xc0>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	6013      	str	r3, [r2, #0]
}
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000e10 	.word	0x20000e10
 8003d50:	20000e14 	.word	0x20000e14

08003d54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d5a:	f000 f92f 	bl	8003fbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <prvCheckForValidListAndQueue+0x60>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d120      	bne.n	8003da8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d66:	4814      	ldr	r0, [pc, #80]	; (8003db8 <prvCheckForValidListAndQueue+0x64>)
 8003d68:	f7fe f868 	bl	8001e3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d6c:	4813      	ldr	r0, [pc, #76]	; (8003dbc <prvCheckForValidListAndQueue+0x68>)
 8003d6e:	f7fe f865 	bl	8001e3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <prvCheckForValidListAndQueue+0x6c>)
 8003d74:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <prvCheckForValidListAndQueue+0x64>)
 8003d76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d78:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <prvCheckForValidListAndQueue+0x70>)
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <prvCheckForValidListAndQueue+0x68>)
 8003d7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <prvCheckForValidListAndQueue+0x74>)
 8003d84:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <prvCheckForValidListAndQueue+0x78>)
 8003d86:	2110      	movs	r1, #16
 8003d88:	200a      	movs	r0, #10
 8003d8a:	f7fe f96f 	bl	800206c <xQueueGenericCreateStatic>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <prvCheckForValidListAndQueue+0x60>)
 8003d92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <prvCheckForValidListAndQueue+0x60>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <prvCheckForValidListAndQueue+0x60>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	490b      	ldr	r1, [pc, #44]	; (8003dd0 <prvCheckForValidListAndQueue+0x7c>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fd82 	bl	80028ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003da8:	f000 f938 	bl	800401c <vPortExitCritical>
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000e18 	.word	0x20000e18
 8003db8:	20000de8 	.word	0x20000de8
 8003dbc:	20000dfc 	.word	0x20000dfc
 8003dc0:	20000e10 	.word	0x20000e10
 8003dc4:	20000e14 	.word	0x20000e14
 8003dc8:	20000ec4 	.word	0x20000ec4
 8003dcc:	20000e24 	.word	0x20000e24
 8003dd0:	080047c4 	.word	0x080047c4

08003dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b04      	subs	r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3b04      	subs	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3b04      	subs	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e04:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <pxPortInitialiseStack+0x54>)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3b14      	subs	r3, #20
 8003e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b20      	subs	r3, #32
 8003e1a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	08003e2d 	.word	0x08003e2d

08003e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <prvTaskExitError+0x54>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d00a      	beq.n	8003e56 <prvTaskExitError+0x2a>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	60fb      	str	r3, [r7, #12]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <prvTaskExitError+0x28>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60bb      	str	r3, [r7, #8]
}
 8003e68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e6a:	bf00      	nop
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0fc      	beq.n	8003e6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	2000000c 	.word	0x2000000c
	...

08003e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <pxCurrentTCBConst2>)
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	6808      	ldr	r0, [r1, #0]
 8003e96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e9a:	f380 8809 	msr	PSP, r0
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f380 8811 	msr	BASEPRI, r0
 8003eaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003eae:	4770      	bx	lr

08003eb0 <pxCurrentTCBConst2>:
 8003eb0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop

08003eb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003eb8:	4806      	ldr	r0, [pc, #24]	; (8003ed4 <prvPortStartFirstTask+0x1c>)
 8003eba:	6800      	ldr	r0, [r0, #0]
 8003ebc:	6800      	ldr	r0, [r0, #0]
 8003ebe:	f380 8808 	msr	MSP, r0
 8003ec2:	b662      	cpsie	i
 8003ec4:	b661      	cpsie	f
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	df00      	svc	0
 8003ed0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ed2:	bf00      	nop
 8003ed4:	e000ed08 	.word	0xe000ed08

08003ed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ede:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <xPortStartScheduler+0xd0>)
 8003ee0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <xPortStartScheduler+0xd4>)
 8003f04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f0c:	e009      	b.n	8003f22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f0e:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	2b80      	cmp	r3, #128	; 0x80
 8003f2c:	d0ef      	beq.n	8003f0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1c3 0307 	rsb	r3, r3, #7
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d00a      	beq.n	8003f50 <xPortStartScheduler+0x78>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60bb      	str	r3, [r7, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f62:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <xPortStartScheduler+0xd8>)
 8003f64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <xPortStartScheduler+0xdc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <xPortStartScheduler+0xdc>)
 8003f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <xPortStartScheduler+0xdc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <xPortStartScheduler+0xdc>)
 8003f80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f86:	f000 f8b9 	bl	80040fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <xPortStartScheduler+0xe0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f90:	f7ff ff92 	bl	8003eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f94:	f7ff f8b2 	bl	80030fc <vTaskSwitchContext>
	prvTaskExitError();
 8003f98:	f7ff ff48 	bl	8003e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	e000e400 	.word	0xe000e400
 8003fac:	20000f14 	.word	0x20000f14
 8003fb0:	20000f18 	.word	0x20000f18
 8003fb4:	e000ed20 	.word	0xe000ed20
 8003fb8:	2000000c 	.word	0x2000000c

08003fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	607b      	str	r3, [r7, #4]
}
 8003fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <vPortEnterCritical+0x58>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <vPortEnterCritical+0x58>)
 8003fde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <vPortEnterCritical+0x58>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10f      	bne.n	8004008 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <vPortEnterCritical+0x5c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <vPortEnterCritical+0x4c>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	603b      	str	r3, [r7, #0]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <vPortEnterCritical+0x4a>
	}
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	2000000c 	.word	0x2000000c
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <vPortExitCritical+0x4c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <vPortExitCritical+0x24>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	607b      	str	r3, [r7, #4]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <vPortExitCritical+0x4c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3b01      	subs	r3, #1
 8004046:	4a08      	ldr	r2, [pc, #32]	; (8004068 <vPortExitCritical+0x4c>)
 8004048:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <vPortExitCritical+0x4c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <vPortExitCritical+0x42>
 8004052:	2300      	movs	r3, #0
 8004054:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f383 8811 	msr	BASEPRI, r3
}
 800405c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	2000000c 	.word	0x2000000c
 800406c:	00000000 	.word	0x00000000

08004070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004070:	f3ef 8009 	mrs	r0, PSP
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <pxCurrentTCBConst>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004080:	6010      	str	r0, [r2, #0]
 8004082:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004086:	f04f 0050 	mov.w	r0, #80	; 0x50
 800408a:	f380 8811 	msr	BASEPRI, r0
 800408e:	f7ff f835 	bl	80030fc <vTaskSwitchContext>
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f380 8811 	msr	BASEPRI, r0
 800409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	6808      	ldr	r0, [r1, #0]
 80040a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040a6:	f380 8809 	msr	PSP, r0
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	4770      	bx	lr

080040b0 <pxCurrentTCBConst>:
 80040b0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	607b      	str	r3, [r7, #4]
}
 80040d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040d2:	f7fe ff55 	bl	8002f80 <xTaskIncrementTick>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <SysTick_Handler+0x40>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	2300      	movs	r3, #0
 80040e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f383 8811 	msr	BASEPRI, r3
}
 80040ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <vPortSetupTimerInterrupt+0x30>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <vPortSetupTimerInterrupt+0x34>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <vPortSetupTimerInterrupt+0x38>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a09      	ldr	r2, [pc, #36]	; (8004138 <vPortSetupTimerInterrupt+0x3c>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	4a08      	ldr	r2, [pc, #32]	; (800413c <vPortSetupTimerInterrupt+0x40>)
 800411a:	3b01      	subs	r3, #1
 800411c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800411e:	4b03      	ldr	r3, [pc, #12]	; (800412c <vPortSetupTimerInterrupt+0x30>)
 8004120:	2207      	movs	r2, #7
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	e000e010 	.word	0xe000e010
 8004130:	e000e018 	.word	0xe000e018
 8004134:	20000000 	.word	0x20000000
 8004138:	10624dd3 	.word	0x10624dd3
 800413c:	e000e014 	.word	0xe000e014

08004140 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004146:	f3ef 8305 	mrs	r3, IPSR
 800414a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b0f      	cmp	r3, #15
 8004150:	d914      	bls.n	800417c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004152:	4a16      	ldr	r2, [pc, #88]	; (80041ac <vPortValidateInterruptPriority+0x6c>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <vPortValidateInterruptPriority+0x70>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	7afa      	ldrb	r2, [r7, #11]
 8004162:	429a      	cmp	r2, r3
 8004164:	d20a      	bcs.n	800417c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	607b      	str	r3, [r7, #4]
}
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <vPortValidateInterruptPriority+0x74>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <vPortValidateInterruptPriority+0x78>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d90a      	bls.n	80041a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	603b      	str	r3, [r7, #0]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <vPortValidateInterruptPriority+0x60>
	}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	e000e3f0 	.word	0xe000e3f0
 80041b0:	20000f14 	.word	0x20000f14
 80041b4:	e000ed0c 	.word	0xe000ed0c
 80041b8:	20000f18 	.word	0x20000f18

080041bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041c8:	f7fe fe20 	bl	8002e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041cc:	4b58      	ldr	r3, [pc, #352]	; (8004330 <pvPortMalloc+0x174>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041d4:	f000 f910 	bl	80043f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <pvPortMalloc+0x178>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 808e 	bne.w	8004302 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01d      	beq.n	8004228 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041ec:	2208      	movs	r2, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d014      	beq.n	8004228 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f023 0307 	bic.w	r3, r3, #7
 8004204:	3308      	adds	r3, #8
 8004206:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <pvPortMalloc+0x6c>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	617b      	str	r3, [r7, #20]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d069      	beq.n	8004302 <pvPortMalloc+0x146>
 800422e:	4b42      	ldr	r3, [pc, #264]	; (8004338 <pvPortMalloc+0x17c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d864      	bhi.n	8004302 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004238:	4b40      	ldr	r3, [pc, #256]	; (800433c <pvPortMalloc+0x180>)
 800423a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800423c:	4b3f      	ldr	r3, [pc, #252]	; (800433c <pvPortMalloc+0x180>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004242:	e004      	b.n	800424e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d903      	bls.n	8004260 <pvPortMalloc+0xa4>
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f1      	bne.n	8004244 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004260:	4b33      	ldr	r3, [pc, #204]	; (8004330 <pvPortMalloc+0x174>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004266:	429a      	cmp	r2, r3
 8004268:	d04b      	beq.n	8004302 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2208      	movs	r2, #8
 8004270:	4413      	add	r3, r2
 8004272:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	1ad2      	subs	r2, r2, r3
 8004284:	2308      	movs	r3, #8
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	429a      	cmp	r2, r3
 800428a:	d91f      	bls.n	80042cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <pvPortMalloc+0xf8>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	613b      	str	r3, [r7, #16]
}
 80042b0:	bf00      	nop
 80042b2:	e7fe      	b.n	80042b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042c6:	69b8      	ldr	r0, [r7, #24]
 80042c8:	f000 f8f8 	bl	80044bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <pvPortMalloc+0x17c>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	4a18      	ldr	r2, [pc, #96]	; (8004338 <pvPortMalloc+0x17c>)
 80042d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <pvPortMalloc+0x17c>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <pvPortMalloc+0x184>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d203      	bcs.n	80042ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <pvPortMalloc+0x17c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a15      	ldr	r2, [pc, #84]	; (8004340 <pvPortMalloc+0x184>)
 80042ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <pvPortMalloc+0x178>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004302:	f7fe fd91 	bl	8002e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <pvPortMalloc+0x16a>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <pvPortMalloc+0x168>
	return pvReturn;
 8004326:	69fb      	ldr	r3, [r7, #28]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3728      	adds	r7, #40	; 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20001b24 	.word	0x20001b24
 8004334:	20001b30 	.word	0x20001b30
 8004338:	20001b28 	.word	0x20001b28
 800433c:	20001b1c 	.word	0x20001b1c
 8004340:	20001b2c 	.word	0x20001b2c

08004344 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d048      	beq.n	80043e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004356:	2308      	movs	r3, #8
 8004358:	425b      	negs	r3, r3
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4413      	add	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <vPortFree+0xac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vPortFree+0x44>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60fb      	str	r3, [r7, #12]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <vPortFree+0x62>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60bb      	str	r3, [r7, #8]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <vPortFree+0xac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d019      	beq.n	80043e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d115      	bne.n	80043e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <vPortFree+0xac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043cc:	f7fe fd1e 	bl	8002e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <vPortFree+0xb0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	4a06      	ldr	r2, [pc, #24]	; (80043f4 <vPortFree+0xb0>)
 80043dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043de:	6938      	ldr	r0, [r7, #16]
 80043e0:	f000 f86c 	bl	80044bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043e4:	f7fe fd20 	bl	8002e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043e8:	bf00      	nop
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20001b30 	.word	0x20001b30
 80043f4:	20001b28 	.word	0x20001b28

080043f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004402:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004404:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <prvHeapInit+0xac>)
 8004406:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3307      	adds	r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0307 	bic.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <prvHeapInit+0xac>)
 8004428:	4413      	add	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <prvHeapInit+0xb0>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <prvHeapInit+0xb0>)
 8004438:	2200      	movs	r2, #0
 800443a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004444:	2208      	movs	r2, #8
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0307 	bic.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <prvHeapInit+0xb4>)
 8004458:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <prvHeapInit+0xb4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <prvHeapInit+0xb4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	1ad2      	subs	r2, r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <prvHeapInit+0xb4>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a0a      	ldr	r2, [pc, #40]	; (80044b0 <prvHeapInit+0xb8>)
 8004486:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <prvHeapInit+0xbc>)
 800448e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <prvHeapInit+0xc0>)
 8004492:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004496:	601a      	str	r2, [r3, #0]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000f1c 	.word	0x20000f1c
 80044a8:	20001b1c 	.word	0x20001b1c
 80044ac:	20001b24 	.word	0x20001b24
 80044b0:	20001b2c 	.word	0x20001b2c
 80044b4:	20001b28 	.word	0x20001b28
 80044b8:	20001b30 	.word	0x20001b30

080044bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <prvInsertBlockIntoFreeList+0xa8>)
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e002      	b.n	80044d0 <prvInsertBlockIntoFreeList+0x14>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d8f7      	bhi.n	80044ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	4413      	add	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d108      	bne.n	80044fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	441a      	add	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	441a      	add	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d118      	bne.n	8004544 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <prvInsertBlockIntoFreeList+0xac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d00d      	beq.n	800453a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	441a      	add	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e008      	b.n	800454c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <prvInsertBlockIntoFreeList+0xac>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e003      	b.n	800454c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d002      	beq.n	800455a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	20001b1c 	.word	0x20001b1c
 8004568:	20001b24 	.word	0x20001b24

0800456c <__libc_init_array>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	2600      	movs	r6, #0
 8004570:	4d0c      	ldr	r5, [pc, #48]	; (80045a4 <__libc_init_array+0x38>)
 8004572:	4c0d      	ldr	r4, [pc, #52]	; (80045a8 <__libc_init_array+0x3c>)
 8004574:	1b64      	subs	r4, r4, r5
 8004576:	10a4      	asrs	r4, r4, #2
 8004578:	42a6      	cmp	r6, r4
 800457a:	d109      	bne.n	8004590 <__libc_init_array+0x24>
 800457c:	f000 f8f0 	bl	8004760 <_init>
 8004580:	2600      	movs	r6, #0
 8004582:	4d0a      	ldr	r5, [pc, #40]	; (80045ac <__libc_init_array+0x40>)
 8004584:	4c0a      	ldr	r4, [pc, #40]	; (80045b0 <__libc_init_array+0x44>)
 8004586:	1b64      	subs	r4, r4, r5
 8004588:	10a4      	asrs	r4, r4, #2
 800458a:	42a6      	cmp	r6, r4
 800458c:	d105      	bne.n	800459a <__libc_init_array+0x2e>
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	f855 3b04 	ldr.w	r3, [r5], #4
 8004594:	4798      	blx	r3
 8004596:	3601      	adds	r6, #1
 8004598:	e7ee      	b.n	8004578 <__libc_init_array+0xc>
 800459a:	f855 3b04 	ldr.w	r3, [r5], #4
 800459e:	4798      	blx	r3
 80045a0:	3601      	adds	r6, #1
 80045a2:	e7f2      	b.n	800458a <__libc_init_array+0x1e>
 80045a4:	080048b0 	.word	0x080048b0
 80045a8:	080048b0 	.word	0x080048b0
 80045ac:	080048b0 	.word	0x080048b0
 80045b0:	080048b4 	.word	0x080048b4

080045b4 <__retarget_lock_acquire_recursive>:
 80045b4:	4770      	bx	lr

080045b6 <__retarget_lock_release_recursive>:
 80045b6:	4770      	bx	lr

080045b8 <memcpy>:
 80045b8:	440a      	add	r2, r1
 80045ba:	4291      	cmp	r1, r2
 80045bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c0:	d100      	bne.n	80045c4 <memcpy+0xc>
 80045c2:	4770      	bx	lr
 80045c4:	b510      	push	{r4, lr}
 80045c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ca:	4291      	cmp	r1, r2
 80045cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045d0:	d1f9      	bne.n	80045c6 <memcpy+0xe>
 80045d2:	bd10      	pop	{r4, pc}

080045d4 <memset>:
 80045d4:	4603      	mov	r3, r0
 80045d6:	4402      	add	r2, r0
 80045d8:	4293      	cmp	r3, r2
 80045da:	d100      	bne.n	80045de <memset+0xa>
 80045dc:	4770      	bx	lr
 80045de:	f803 1b01 	strb.w	r1, [r3], #1
 80045e2:	e7f9      	b.n	80045d8 <memset+0x4>

080045e4 <cleanup_glue>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	460c      	mov	r4, r1
 80045e8:	6809      	ldr	r1, [r1, #0]
 80045ea:	4605      	mov	r5, r0
 80045ec:	b109      	cbz	r1, 80045f2 <cleanup_glue+0xe>
 80045ee:	f7ff fff9 	bl	80045e4 <cleanup_glue>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045fa:	f000 b869 	b.w	80046d0 <_free_r>
	...

08004600 <_reclaim_reent>:
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <_reclaim_reent+0xb4>)
 8004602:	b570      	push	{r4, r5, r6, lr}
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4604      	mov	r4, r0
 8004608:	4283      	cmp	r3, r0
 800460a:	d051      	beq.n	80046b0 <_reclaim_reent+0xb0>
 800460c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800460e:	b143      	cbz	r3, 8004622 <_reclaim_reent+0x22>
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d14a      	bne.n	80046ac <_reclaim_reent+0xac>
 8004616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	b111      	cbz	r1, 8004622 <_reclaim_reent+0x22>
 800461c:	4620      	mov	r0, r4
 800461e:	f000 f857 	bl	80046d0 <_free_r>
 8004622:	6961      	ldr	r1, [r4, #20]
 8004624:	b111      	cbz	r1, 800462c <_reclaim_reent+0x2c>
 8004626:	4620      	mov	r0, r4
 8004628:	f000 f852 	bl	80046d0 <_free_r>
 800462c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800462e:	b111      	cbz	r1, 8004636 <_reclaim_reent+0x36>
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f84d 	bl	80046d0 <_free_r>
 8004636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004638:	b111      	cbz	r1, 8004640 <_reclaim_reent+0x40>
 800463a:	4620      	mov	r0, r4
 800463c:	f000 f848 	bl	80046d0 <_free_r>
 8004640:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004642:	b111      	cbz	r1, 800464a <_reclaim_reent+0x4a>
 8004644:	4620      	mov	r0, r4
 8004646:	f000 f843 	bl	80046d0 <_free_r>
 800464a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800464c:	b111      	cbz	r1, 8004654 <_reclaim_reent+0x54>
 800464e:	4620      	mov	r0, r4
 8004650:	f000 f83e 	bl	80046d0 <_free_r>
 8004654:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004656:	b111      	cbz	r1, 800465e <_reclaim_reent+0x5e>
 8004658:	4620      	mov	r0, r4
 800465a:	f000 f839 	bl	80046d0 <_free_r>
 800465e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004660:	b111      	cbz	r1, 8004668 <_reclaim_reent+0x68>
 8004662:	4620      	mov	r0, r4
 8004664:	f000 f834 	bl	80046d0 <_free_r>
 8004668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800466a:	b111      	cbz	r1, 8004672 <_reclaim_reent+0x72>
 800466c:	4620      	mov	r0, r4
 800466e:	f000 f82f 	bl	80046d0 <_free_r>
 8004672:	69a3      	ldr	r3, [r4, #24]
 8004674:	b1e3      	cbz	r3, 80046b0 <_reclaim_reent+0xb0>
 8004676:	4620      	mov	r0, r4
 8004678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800467a:	4798      	blx	r3
 800467c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800467e:	b1b9      	cbz	r1, 80046b0 <_reclaim_reent+0xb0>
 8004680:	4620      	mov	r0, r4
 8004682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004686:	f7ff bfad 	b.w	80045e4 <cleanup_glue>
 800468a:	5949      	ldr	r1, [r1, r5]
 800468c:	b941      	cbnz	r1, 80046a0 <_reclaim_reent+0xa0>
 800468e:	3504      	adds	r5, #4
 8004690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004692:	2d80      	cmp	r5, #128	; 0x80
 8004694:	68d9      	ldr	r1, [r3, #12]
 8004696:	d1f8      	bne.n	800468a <_reclaim_reent+0x8a>
 8004698:	4620      	mov	r0, r4
 800469a:	f000 f819 	bl	80046d0 <_free_r>
 800469e:	e7ba      	b.n	8004616 <_reclaim_reent+0x16>
 80046a0:	680e      	ldr	r6, [r1, #0]
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 f814 	bl	80046d0 <_free_r>
 80046a8:	4631      	mov	r1, r6
 80046aa:	e7ef      	b.n	800468c <_reclaim_reent+0x8c>
 80046ac:	2500      	movs	r5, #0
 80046ae:	e7ef      	b.n	8004690 <_reclaim_reent+0x90>
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	bf00      	nop
 80046b4:	20000010 	.word	0x20000010

080046b8 <__malloc_lock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <__malloc_lock+0x8>)
 80046ba:	f7ff bf7b 	b.w	80045b4 <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	20001b34 	.word	0x20001b34

080046c4 <__malloc_unlock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__malloc_unlock+0x8>)
 80046c6:	f7ff bf76 	b.w	80045b6 <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	20001b34 	.word	0x20001b34

080046d0 <_free_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4605      	mov	r5, r0
 80046d4:	2900      	cmp	r1, #0
 80046d6:	d040      	beq.n	800475a <_free_r+0x8a>
 80046d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046dc:	1f0c      	subs	r4, r1, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfb8      	it	lt
 80046e2:	18e4      	addlt	r4, r4, r3
 80046e4:	f7ff ffe8 	bl	80046b8 <__malloc_lock>
 80046e8:	4a1c      	ldr	r2, [pc, #112]	; (800475c <_free_r+0x8c>)
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	b933      	cbnz	r3, 80046fc <_free_r+0x2c>
 80046ee:	6063      	str	r3, [r4, #4]
 80046f0:	6014      	str	r4, [r2, #0]
 80046f2:	4628      	mov	r0, r5
 80046f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046f8:	f7ff bfe4 	b.w	80046c4 <__malloc_unlock>
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	d908      	bls.n	8004712 <_free_r+0x42>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	1821      	adds	r1, r4, r0
 8004704:	428b      	cmp	r3, r1
 8004706:	bf01      	itttt	eq
 8004708:	6819      	ldreq	r1, [r3, #0]
 800470a:	685b      	ldreq	r3, [r3, #4]
 800470c:	1809      	addeq	r1, r1, r0
 800470e:	6021      	streq	r1, [r4, #0]
 8004710:	e7ed      	b.n	80046ee <_free_r+0x1e>
 8004712:	461a      	mov	r2, r3
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	b10b      	cbz	r3, 800471c <_free_r+0x4c>
 8004718:	42a3      	cmp	r3, r4
 800471a:	d9fa      	bls.n	8004712 <_free_r+0x42>
 800471c:	6811      	ldr	r1, [r2, #0]
 800471e:	1850      	adds	r0, r2, r1
 8004720:	42a0      	cmp	r0, r4
 8004722:	d10b      	bne.n	800473c <_free_r+0x6c>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	4401      	add	r1, r0
 8004728:	1850      	adds	r0, r2, r1
 800472a:	4283      	cmp	r3, r0
 800472c:	6011      	str	r1, [r2, #0]
 800472e:	d1e0      	bne.n	80046f2 <_free_r+0x22>
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4401      	add	r1, r0
 8004736:	6011      	str	r1, [r2, #0]
 8004738:	6053      	str	r3, [r2, #4]
 800473a:	e7da      	b.n	80046f2 <_free_r+0x22>
 800473c:	d902      	bls.n	8004744 <_free_r+0x74>
 800473e:	230c      	movs	r3, #12
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	e7d6      	b.n	80046f2 <_free_r+0x22>
 8004744:	6820      	ldr	r0, [r4, #0]
 8004746:	1821      	adds	r1, r4, r0
 8004748:	428b      	cmp	r3, r1
 800474a:	bf01      	itttt	eq
 800474c:	6819      	ldreq	r1, [r3, #0]
 800474e:	685b      	ldreq	r3, [r3, #4]
 8004750:	1809      	addeq	r1, r1, r0
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	6054      	str	r4, [r2, #4]
 8004758:	e7cb      	b.n	80046f2 <_free_r+0x22>
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	20001b38 	.word	0x20001b38

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr
