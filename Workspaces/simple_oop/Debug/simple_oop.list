
simple_oop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f20  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08007030  08007030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000007c  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000128  08007384  08007384  00017384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074ac  080074ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080074bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  2000007c  08007538  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  08007538  00021b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022064  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041bd  00000000  00000000  00042109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  000462c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  00047750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012d99  00000000  00000000  00048a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000c3b0  00000000  00000000  0005b829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00067bd9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000069f8  00000000  00000000  00067c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007018 	.word	0x08007018

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08007018 	.word	0x08007018

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <selfrel_offset31>:
 8000174:	6803      	ldr	r3, [r0, #0]
 8000176:	005a      	lsls	r2, r3, #1
 8000178:	bf4c      	ite	mi
 800017a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800017e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000182:	4418      	add	r0, r3
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop

08000188 <search_EIT_table>:
 8000188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800018c:	b339      	cbz	r1, 80001de <search_EIT_table+0x56>
 800018e:	1e4f      	subs	r7, r1, #1
 8000190:	4604      	mov	r4, r0
 8000192:	4615      	mov	r5, r2
 8000194:	463e      	mov	r6, r7
 8000196:	f04f 0800 	mov.w	r8, #0
 800019a:	eb08 0106 	add.w	r1, r8, r6
 800019e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001a2:	1049      	asrs	r1, r1, #1
 80001a4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80001a8:	4648      	mov	r0, r9
 80001aa:	f7ff ffe3 	bl	8000174 <selfrel_offset31>
 80001ae:	4603      	mov	r3, r0
 80001b0:	00c8      	lsls	r0, r1, #3
 80001b2:	3008      	adds	r0, #8
 80001b4:	428f      	cmp	r7, r1
 80001b6:	4420      	add	r0, r4
 80001b8:	d00b      	beq.n	80001d2 <search_EIT_table+0x4a>
 80001ba:	42ab      	cmp	r3, r5
 80001bc:	d80b      	bhi.n	80001d6 <search_EIT_table+0x4e>
 80001be:	f7ff ffd9 	bl	8000174 <selfrel_offset31>
 80001c2:	3801      	subs	r0, #1
 80001c4:	42a8      	cmp	r0, r5
 80001c6:	f101 0801 	add.w	r8, r1, #1
 80001ca:	d3e6      	bcc.n	800019a <search_EIT_table+0x12>
 80001cc:	4648      	mov	r0, r9
 80001ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80001d2:	42ab      	cmp	r3, r5
 80001d4:	d9fa      	bls.n	80001cc <search_EIT_table+0x44>
 80001d6:	4588      	cmp	r8, r1
 80001d8:	d001      	beq.n	80001de <search_EIT_table+0x56>
 80001da:	1e4e      	subs	r6, r1, #1
 80001dc:	e7dd      	b.n	800019a <search_EIT_table+0x12>
 80001de:	f04f 0900 	mov.w	r9, #0
 80001e2:	4648      	mov	r0, r9
 80001e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080001e8 <__gnu_unwind_get_pr_addr>:
 80001e8:	2801      	cmp	r0, #1
 80001ea:	d007      	beq.n	80001fc <__gnu_unwind_get_pr_addr+0x14>
 80001ec:	2802      	cmp	r0, #2
 80001ee:	d007      	beq.n	8000200 <__gnu_unwind_get_pr_addr+0x18>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__gnu_unwind_get_pr_addr+0x1c>)
 80001f2:	2800      	cmp	r0, #0
 80001f4:	bf0c      	ite	eq
 80001f6:	4618      	moveq	r0, r3
 80001f8:	2000      	movne	r0, #0
 80001fa:	4770      	bx	lr
 80001fc:	4802      	ldr	r0, [pc, #8]	; (8000208 <__gnu_unwind_get_pr_addr+0x20>)
 80001fe:	4770      	bx	lr
 8000200:	4802      	ldr	r0, [pc, #8]	; (800020c <__gnu_unwind_get_pr_addr+0x24>)
 8000202:	4770      	bx	lr
 8000204:	080008d9 	.word	0x080008d9
 8000208:	080008dd 	.word	0x080008dd
 800020c:	080008e1 	.word	0x080008e1

08000210 <get_eit_entry>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <get_eit_entry+0x94>)
 8000214:	4604      	mov	r4, r0
 8000216:	b083      	sub	sp, #12
 8000218:	1e8d      	subs	r5, r1, #2
 800021a:	b33b      	cbz	r3, 800026c <get_eit_entry+0x5c>
 800021c:	4628      	mov	r0, r5
 800021e:	a901      	add	r1, sp, #4
 8000220:	f3af 8000 	nop.w
 8000224:	b1e8      	cbz	r0, 8000262 <get_eit_entry+0x52>
 8000226:	9901      	ldr	r1, [sp, #4]
 8000228:	462a      	mov	r2, r5
 800022a:	f7ff ffad 	bl	8000188 <search_EIT_table>
 800022e:	4601      	mov	r1, r0
 8000230:	b1b8      	cbz	r0, 8000262 <get_eit_entry+0x52>
 8000232:	f7ff ff9f 	bl	8000174 <selfrel_offset31>
 8000236:	684b      	ldr	r3, [r1, #4]
 8000238:	64a0      	str	r0, [r4, #72]	; 0x48
 800023a:	2b01      	cmp	r3, #1
 800023c:	d02e      	beq.n	800029c <get_eit_entry+0x8c>
 800023e:	2b00      	cmp	r3, #0
 8000240:	db27      	blt.n	8000292 <get_eit_entry+0x82>
 8000242:	1d08      	adds	r0, r1, #4
 8000244:	f7ff ff96 	bl	8000174 <selfrel_offset31>
 8000248:	2300      	movs	r3, #0
 800024a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800024e:	6803      	ldr	r3, [r0, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	db12      	blt.n	800027a <get_eit_entry+0x6a>
 8000254:	f7ff ff8e 	bl	8000174 <selfrel_offset31>
 8000258:	4603      	mov	r3, r0
 800025a:	2000      	movs	r0, #0
 800025c:	6123      	str	r3, [r4, #16]
 800025e:	b003      	add	sp, #12
 8000260:	bd30      	pop	{r4, r5, pc}
 8000262:	2300      	movs	r3, #0
 8000264:	2009      	movs	r0, #9
 8000266:	6123      	str	r3, [r4, #16]
 8000268:	b003      	add	sp, #12
 800026a:	bd30      	pop	{r4, r5, pc}
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <get_eit_entry+0x98>)
 800026e:	490f      	ldr	r1, [pc, #60]	; (80002ac <get_eit_entry+0x9c>)
 8000270:	4618      	mov	r0, r3
 8000272:	1ac9      	subs	r1, r1, r3
 8000274:	10c9      	asrs	r1, r1, #3
 8000276:	9101      	str	r1, [sp, #4]
 8000278:	e7d6      	b.n	8000228 <get_eit_entry+0x18>
 800027a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800027e:	f7ff ffb3 	bl	80001e8 <__gnu_unwind_get_pr_addr>
 8000282:	2800      	cmp	r0, #0
 8000284:	4603      	mov	r3, r0
 8000286:	bf14      	ite	ne
 8000288:	2000      	movne	r0, #0
 800028a:	2009      	moveq	r0, #9
 800028c:	6123      	str	r3, [r4, #16]
 800028e:	b003      	add	sp, #12
 8000290:	bd30      	pop	{r4, r5, pc}
 8000292:	2301      	movs	r3, #1
 8000294:	1d08      	adds	r0, r1, #4
 8000296:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800029a:	e7d8      	b.n	800024e <get_eit_entry+0x3e>
 800029c:	2300      	movs	r3, #0
 800029e:	2005      	movs	r0, #5
 80002a0:	6123      	str	r3, [r4, #16]
 80002a2:	e7dc      	b.n	800025e <get_eit_entry+0x4e>
 80002a4:	00000000 	.word	0x00000000
 80002a8:	08007384 	.word	0x08007384
 80002ac:	080074ac 	.word	0x080074ac

080002b0 <restore_non_core_regs>:
 80002b0:	6803      	ldr	r3, [r0, #0]
 80002b2:	b510      	push	{r4, lr}
 80002b4:	07da      	lsls	r2, r3, #31
 80002b6:	4604      	mov	r4, r0
 80002b8:	d406      	bmi.n	80002c8 <restore_non_core_regs+0x18>
 80002ba:	079b      	lsls	r3, r3, #30
 80002bc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002c0:	d509      	bpl.n	80002d6 <restore_non_core_regs+0x26>
 80002c2:	f000 fc5d 	bl	8000b80 <__gnu_Unwind_Restore_VFP_D>
 80002c6:	6823      	ldr	r3, [r4, #0]
 80002c8:	0759      	lsls	r1, r3, #29
 80002ca:	d509      	bpl.n	80002e0 <restore_non_core_regs+0x30>
 80002cc:	071a      	lsls	r2, r3, #28
 80002ce:	d50e      	bpl.n	80002ee <restore_non_core_regs+0x3e>
 80002d0:	06db      	lsls	r3, r3, #27
 80002d2:	d513      	bpl.n	80002fc <restore_non_core_regs+0x4c>
 80002d4:	bd10      	pop	{r4, pc}
 80002d6:	f000 fc4b 	bl	8000b70 <__gnu_Unwind_Restore_VFP>
 80002da:	6823      	ldr	r3, [r4, #0]
 80002dc:	0759      	lsls	r1, r3, #29
 80002de:	d4f5      	bmi.n	80002cc <restore_non_core_regs+0x1c>
 80002e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002e4:	f000 fc54 	bl	8000b90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002e8:	6823      	ldr	r3, [r4, #0]
 80002ea:	071a      	lsls	r2, r3, #28
 80002ec:	d4f0      	bmi.n	80002d0 <restore_non_core_regs+0x20>
 80002ee:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002f2:	f000 fc55 	bl	8000ba0 <__gnu_Unwind_Restore_WMMXD>
 80002f6:	6823      	ldr	r3, [r4, #0]
 80002f8:	06db      	lsls	r3, r3, #27
 80002fa:	d4eb      	bmi.n	80002d4 <restore_non_core_regs+0x24>
 80002fc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000304:	f000 bc90 	b.w	8000c28 <__gnu_Unwind_Restore_WMMXC>

08000308 <__gnu_unwind_24bit.constprop.0>:
 8000308:	2009      	movs	r0, #9
 800030a:	4770      	bx	lr

0800030c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800030c:	4603      	mov	r3, r0
 800030e:	6800      	ldr	r0, [r0, #0]
 8000310:	b100      	cbz	r0, 8000314 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000312:	4418      	add	r0, r3
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop

08000318 <_Unwind_DebugHook>:
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop

0800031c <unwind_phase2>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4604      	mov	r4, r0
 8000320:	460e      	mov	r6, r1
 8000322:	4620      	mov	r0, r4
 8000324:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000326:	f7ff ff73 	bl	8000210 <get_eit_entry>
 800032a:	4605      	mov	r5, r0
 800032c:	b998      	cbnz	r0, 8000356 <unwind_phase2+0x3a>
 800032e:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000332:	4632      	mov	r2, r6
 8000334:	4621      	mov	r1, r4
 8000336:	2001      	movs	r0, #1
 8000338:	6923      	ldr	r3, [r4, #16]
 800033a:	f8c4 c014 	str.w	ip, [r4, #20]
 800033e:	4798      	blx	r3
 8000340:	2808      	cmp	r0, #8
 8000342:	d0ee      	beq.n	8000322 <unwind_phase2+0x6>
 8000344:	2807      	cmp	r0, #7
 8000346:	d106      	bne.n	8000356 <unwind_phase2+0x3a>
 8000348:	4628      	mov	r0, r5
 800034a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800034c:	f7ff ffe4 	bl	8000318 <_Unwind_DebugHook>
 8000350:	1d30      	adds	r0, r6, #4
 8000352:	f000 fc01 	bl	8000b58 <__restore_core_regs>
 8000356:	f005 ffff 	bl	8006358 <abort>
 800035a:	bf00      	nop

0800035c <unwind_phase2_forced>:
 800035c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000360:	f04f 0a00 	mov.w	sl, #0
 8000364:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000368:	f10d 0e0c 	add.w	lr, sp, #12
 800036c:	f101 0c04 	add.w	ip, r1, #4
 8000370:	68c7      	ldr	r7, [r0, #12]
 8000372:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000376:	4606      	mov	r6, r0
 8000378:	4614      	mov	r4, r2
 800037a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800037e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000382:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000386:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800038a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800038e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000392:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000396:	ad02      	add	r5, sp, #8
 8000398:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800039c:	f8c5 a000 	str.w	sl, [r5]
 80003a0:	e021      	b.n	80003e6 <unwind_phase2_forced+0x8a>
 80003a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80003a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003a8:	4629      	mov	r1, r5
 80003aa:	6173      	str	r3, [r6, #20]
 80003ac:	a87a      	add	r0, sp, #488	; 0x1e8
 80003ae:	f006 f929 	bl	8006604 <memcpy>
 80003b2:	4631      	mov	r1, r6
 80003b4:	4650      	mov	r0, sl
 80003b6:	6933      	ldr	r3, [r6, #16]
 80003b8:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003ba:	4798      	blx	r3
 80003bc:	9c88      	ldr	r4, [sp, #544]	; 0x220
 80003be:	4682      	mov	sl, r0
 80003c0:	646c      	str	r4, [r5, #68]	; 0x44
 80003c2:	4633      	mov	r3, r6
 80003c4:	4632      	mov	r2, r6
 80003c6:	4649      	mov	r1, r9
 80003c8:	2001      	movs	r0, #1
 80003ca:	e9cd 5800 	strd	r5, r8, [sp]
 80003ce:	47b8      	blx	r7
 80003d0:	4604      	mov	r4, r0
 80003d2:	b9f0      	cbnz	r0, 8000412 <unwind_phase2_forced+0xb6>
 80003d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003d8:	4628      	mov	r0, r5
 80003da:	a97a      	add	r1, sp, #488	; 0x1e8
 80003dc:	f006 f912 	bl	8006604 <memcpy>
 80003e0:	f1ba 0f08 	cmp.w	sl, #8
 80003e4:	d11b      	bne.n	800041e <unwind_phase2_forced+0xc2>
 80003e6:	4630      	mov	r0, r6
 80003e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003ea:	f7ff ff11 	bl	8000210 <get_eit_entry>
 80003ee:	f104 0909 	add.w	r9, r4, #9
 80003f2:	fa5f fa89 	uxtb.w	sl, r9
 80003f6:	4604      	mov	r4, r0
 80003f8:	2800      	cmp	r0, #0
 80003fa:	d0d2      	beq.n	80003a2 <unwind_phase2_forced+0x46>
 80003fc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80003fe:	4633      	mov	r3, r6
 8000400:	6469      	str	r1, [r5, #68]	; 0x44
 8000402:	4632      	mov	r2, r6
 8000404:	2001      	movs	r0, #1
 8000406:	e9cd 5800 	strd	r5, r8, [sp]
 800040a:	f04a 0110 	orr.w	r1, sl, #16
 800040e:	47b8      	blx	r7
 8000410:	b100      	cbz	r0, 8000414 <unwind_phase2_forced+0xb8>
 8000412:	2409      	movs	r4, #9
 8000414:	4620      	mov	r0, r4
 8000416:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ba 0f07 	cmp.w	sl, #7
 8000422:	d1f6      	bne.n	8000412 <unwind_phase2_forced+0xb6>
 8000424:	4620      	mov	r0, r4
 8000426:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000428:	f7ff ff76 	bl	8000318 <_Unwind_DebugHook>
 800042c:	a803      	add	r0, sp, #12
 800042e:	f000 fb93 	bl	8000b58 <__restore_core_regs>
 8000432:	bf00      	nop

08000434 <_Unwind_GetCFA>:
 8000434:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000436:	4770      	bx	lr

08000438 <__gnu_Unwind_RaiseException>:
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	f04f 37ff 	mov.w	r7, #4294967295
 800043e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000440:	b0f9      	sub	sp, #484	; 0x1e4
 8000442:	640b      	str	r3, [r1, #64]	; 0x40
 8000444:	ac01      	add	r4, sp, #4
 8000446:	f101 0c04 	add.w	ip, r1, #4
 800044a:	460e      	mov	r6, r1
 800044c:	4605      	mov	r5, r0
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000454:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800045a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000460:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000468:	9700      	str	r7, [sp, #0]
 800046a:	e006      	b.n	800047a <__gnu_Unwind_RaiseException+0x42>
 800046c:	466a      	mov	r2, sp
 800046e:	4629      	mov	r1, r5
 8000470:	692b      	ldr	r3, [r5, #16]
 8000472:	4798      	blx	r3
 8000474:	2808      	cmp	r0, #8
 8000476:	4604      	mov	r4, r0
 8000478:	d108      	bne.n	800048c <__gnu_Unwind_RaiseException+0x54>
 800047a:	4628      	mov	r0, r5
 800047c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800047e:	f7ff fec7 	bl	8000210 <get_eit_entry>
 8000482:	2800      	cmp	r0, #0
 8000484:	d0f2      	beq.n	800046c <__gnu_Unwind_RaiseException+0x34>
 8000486:	2009      	movs	r0, #9
 8000488:	b079      	add	sp, #484	; 0x1e4
 800048a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048c:	4668      	mov	r0, sp
 800048e:	f7ff ff0f 	bl	80002b0 <restore_non_core_regs>
 8000492:	2c06      	cmp	r4, #6
 8000494:	d1f7      	bne.n	8000486 <__gnu_Unwind_RaiseException+0x4e>
 8000496:	4631      	mov	r1, r6
 8000498:	4628      	mov	r0, r5
 800049a:	f7ff ff3f 	bl	800031c <unwind_phase2>
 800049e:	bf00      	nop

080004a0 <__gnu_Unwind_ForcedUnwind>:
 80004a0:	b410      	push	{r4}
 80004a2:	4614      	mov	r4, r2
 80004a4:	6184      	str	r4, [r0, #24]
 80004a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80004a8:	60c1      	str	r1, [r0, #12]
 80004aa:	2200      	movs	r2, #0
 80004ac:	641c      	str	r4, [r3, #64]	; 0x40
 80004ae:	4619      	mov	r1, r3
 80004b0:	bc10      	pop	{r4}
 80004b2:	e753      	b.n	800035c <unwind_phase2_forced>

080004b4 <__gnu_Unwind_Resume>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	6943      	ldr	r3, [r0, #20]
 80004b8:	68c6      	ldr	r6, [r0, #12]
 80004ba:	640b      	str	r3, [r1, #64]	; 0x40
 80004bc:	b9ae      	cbnz	r6, 80004ea <__gnu_Unwind_Resume+0x36>
 80004be:	460a      	mov	r2, r1
 80004c0:	6903      	ldr	r3, [r0, #16]
 80004c2:	4604      	mov	r4, r0
 80004c4:	460d      	mov	r5, r1
 80004c6:	4601      	mov	r1, r0
 80004c8:	2002      	movs	r0, #2
 80004ca:	4798      	blx	r3
 80004cc:	2807      	cmp	r0, #7
 80004ce:	d005      	beq.n	80004dc <__gnu_Unwind_Resume+0x28>
 80004d0:	2808      	cmp	r0, #8
 80004d2:	d10f      	bne.n	80004f4 <__gnu_Unwind_Resume+0x40>
 80004d4:	4629      	mov	r1, r5
 80004d6:	4620      	mov	r0, r4
 80004d8:	f7ff ff20 	bl	800031c <unwind_phase2>
 80004dc:	4630      	mov	r0, r6
 80004de:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004e0:	f7ff ff1a 	bl	8000318 <_Unwind_DebugHook>
 80004e4:	1d28      	adds	r0, r5, #4
 80004e6:	f000 fb37 	bl	8000b58 <__restore_core_regs>
 80004ea:	2201      	movs	r2, #1
 80004ec:	f7ff ff36 	bl	800035c <unwind_phase2_forced>
 80004f0:	f005 ff32 	bl	8006358 <abort>
 80004f4:	f005 ff30 	bl	8006358 <abort>

080004f8 <__gnu_Unwind_Resume_or_Rethrow>:
 80004f8:	68c2      	ldr	r2, [r0, #12]
 80004fa:	b12a      	cbz	r2, 8000508 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004fc:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8000500:	2200      	movs	r2, #0
 8000502:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8000506:	e729      	b.n	800035c <unwind_phase2_forced>
 8000508:	e796      	b.n	8000438 <__gnu_Unwind_RaiseException>
 800050a:	bf00      	nop

0800050c <_Unwind_Complete>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_Unwind_DeleteException>:
 8000510:	6883      	ldr	r3, [r0, #8]
 8000512:	4601      	mov	r1, r0
 8000514:	b10b      	cbz	r3, 800051a <_Unwind_DeleteException+0xa>
 8000516:	2001      	movs	r0, #1
 8000518:	4718      	bx	r3
 800051a:	4770      	bx	lr

0800051c <_Unwind_VRS_Get>:
 800051c:	2901      	cmp	r1, #1
 800051e:	d012      	beq.n	8000546 <_Unwind_VRS_Get+0x2a>
 8000520:	d809      	bhi.n	8000536 <_Unwind_VRS_Get+0x1a>
 8000522:	b973      	cbnz	r3, 8000542 <_Unwind_VRS_Get+0x26>
 8000524:	2a0f      	cmp	r2, #15
 8000526:	d80c      	bhi.n	8000542 <_Unwind_VRS_Get+0x26>
 8000528:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800052c:	6842      	ldr	r2, [r0, #4]
 800052e:	4618      	mov	r0, r3
 8000530:	9b00      	ldr	r3, [sp, #0]
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	3903      	subs	r1, #3
 8000538:	2901      	cmp	r1, #1
 800053a:	bf94      	ite	ls
 800053c:	2001      	movls	r0, #1
 800053e:	2002      	movhi	r0, #2
 8000540:	4770      	bx	lr
 8000542:	2002      	movs	r0, #2
 8000544:	4770      	bx	lr
 8000546:	4608      	mov	r0, r1
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <_Unwind_GetGR>:
 800054c:	2300      	movs	r3, #0
 800054e:	b500      	push	{lr}
 8000550:	b085      	sub	sp, #20
 8000552:	460a      	mov	r2, r1
 8000554:	a903      	add	r1, sp, #12
 8000556:	9100      	str	r1, [sp, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f7ff ffdf 	bl	800051c <_Unwind_VRS_Get>
 800055e:	9803      	ldr	r0, [sp, #12]
 8000560:	b005      	add	sp, #20
 8000562:	f85d fb04 	ldr.w	pc, [sp], #4
 8000566:	bf00      	nop

08000568 <_Unwind_VRS_Set>:
 8000568:	2901      	cmp	r1, #1
 800056a:	d012      	beq.n	8000592 <_Unwind_VRS_Set+0x2a>
 800056c:	d809      	bhi.n	8000582 <_Unwind_VRS_Set+0x1a>
 800056e:	b973      	cbnz	r3, 800058e <_Unwind_VRS_Set+0x26>
 8000570:	2a0f      	cmp	r2, #15
 8000572:	d80c      	bhi.n	800058e <_Unwind_VRS_Set+0x26>
 8000574:	9900      	ldr	r1, [sp, #0]
 8000576:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800057a:	6809      	ldr	r1, [r1, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	6051      	str	r1, [r2, #4]
 8000580:	4770      	bx	lr
 8000582:	3903      	subs	r1, #3
 8000584:	2901      	cmp	r1, #1
 8000586:	bf94      	ite	ls
 8000588:	2001      	movls	r0, #1
 800058a:	2002      	movhi	r0, #2
 800058c:	4770      	bx	lr
 800058e:	2002      	movs	r0, #2
 8000590:	4770      	bx	lr
 8000592:	4608      	mov	r0, r1
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <_Unwind_SetGR>:
 8000598:	2300      	movs	r3, #0
 800059a:	b510      	push	{r4, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	ac03      	add	r4, sp, #12
 80005a0:	9203      	str	r2, [sp, #12]
 80005a2:	9400      	str	r4, [sp, #0]
 80005a4:	460a      	mov	r2, r1
 80005a6:	4619      	mov	r1, r3
 80005a8:	f7ff ffde 	bl	8000568 <_Unwind_VRS_Set>
 80005ac:	b004      	add	sp, #16
 80005ae:	bd10      	pop	{r4, pc}

080005b0 <__gnu_Unwind_Backtrace>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 36ff 	mov.w	r6, #4294967295
 80005b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005b8:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80005bc:	6413      	str	r3, [r2, #64]	; 0x40
 80005be:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80005c2:	f102 0c04 	add.w	ip, r2, #4
 80005c6:	4605      	mov	r5, r0
 80005c8:	460c      	mov	r4, r1
 80005ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005e2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80005e6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80005ea:	9616      	str	r6, [sp, #88]	; 0x58
 80005ec:	e012      	b.n	8000614 <__gnu_Unwind_Backtrace+0x64>
 80005ee:	210c      	movs	r1, #12
 80005f0:	a816      	add	r0, sp, #88	; 0x58
 80005f2:	466a      	mov	r2, sp
 80005f4:	f7ff ffd0 	bl	8000598 <_Unwind_SetGR>
 80005f8:	4621      	mov	r1, r4
 80005fa:	a816      	add	r0, sp, #88	; 0x58
 80005fc:	47a8      	blx	r5
 80005fe:	b978      	cbnz	r0, 8000620 <__gnu_Unwind_Backtrace+0x70>
 8000600:	4669      	mov	r1, sp
 8000602:	2008      	movs	r0, #8
 8000604:	9b04      	ldr	r3, [sp, #16]
 8000606:	aa16      	add	r2, sp, #88	; 0x58
 8000608:	4798      	blx	r3
 800060a:	2805      	cmp	r0, #5
 800060c:	4606      	mov	r6, r0
 800060e:	d008      	beq.n	8000622 <__gnu_Unwind_Backtrace+0x72>
 8000610:	2809      	cmp	r0, #9
 8000612:	d005      	beq.n	8000620 <__gnu_Unwind_Backtrace+0x70>
 8000614:	4668      	mov	r0, sp
 8000616:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000618:	f7ff fdfa 	bl	8000210 <get_eit_entry>
 800061c:	2800      	cmp	r0, #0
 800061e:	d0e6      	beq.n	80005ee <__gnu_Unwind_Backtrace+0x3e>
 8000620:	2609      	movs	r6, #9
 8000622:	a816      	add	r0, sp, #88	; 0x58
 8000624:	f7ff fe44 	bl	80002b0 <restore_non_core_regs>
 8000628:	4630      	mov	r0, r6
 800062a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800062e:	bd70      	pop	{r4, r5, r6, pc}

08000630 <__gnu_unwind_pr_common>:
 8000630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000634:	461e      	mov	r6, r3
 8000636:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000638:	b089      	sub	sp, #36	; 0x24
 800063a:	f854 3b04 	ldr.w	r3, [r4], #4
 800063e:	460d      	mov	r5, r1
 8000640:	4617      	mov	r7, r2
 8000642:	f000 0803 	and.w	r8, r0, #3
 8000646:	9406      	str	r4, [sp, #24]
 8000648:	2e00      	cmp	r6, #0
 800064a:	d079      	beq.n	8000740 <__gnu_unwind_pr_common+0x110>
 800064c:	2202      	movs	r2, #2
 800064e:	f88d 201c 	strb.w	r2, [sp, #28]
 8000652:	0c1a      	lsrs	r2, r3, #16
 8000654:	f88d 201d 	strb.w	r2, [sp, #29]
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	9305      	str	r3, [sp, #20]
 800065e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000662:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000664:	f1b8 0f02 	cmp.w	r8, #2
 8000668:	bf08      	it	eq
 800066a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800066c:	f013 0301 	ands.w	r3, r3, #1
 8000670:	d00c      	beq.n	800068c <__gnu_unwind_pr_common+0x5c>
 8000672:	4638      	mov	r0, r7
 8000674:	a905      	add	r1, sp, #20
 8000676:	f000 fb71 	bl	8000d5c <__gnu_unwind_execute>
 800067a:	b918      	cbnz	r0, 8000684 <__gnu_unwind_pr_common+0x54>
 800067c:	2008      	movs	r0, #8
 800067e:	b009      	add	sp, #36	; 0x24
 8000680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000684:	2009      	movs	r0, #9
 8000686:	b009      	add	sp, #36	; 0x24
 8000688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800068c:	f8d4 a000 	ldr.w	sl, [r4]
 8000690:	f1ba 0f00 	cmp.w	sl, #0
 8000694:	d0ed      	beq.n	8000672 <__gnu_unwind_pr_common+0x42>
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	f000 0308 	and.w	r3, r0, #8
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2e02      	cmp	r6, #2
 80006a0:	d04a      	beq.n	8000738 <__gnu_unwind_pr_common+0x108>
 80006a2:	f8b4 a000 	ldrh.w	sl, [r4]
 80006a6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006aa:	3404      	adds	r4, #4
 80006ac:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80006ae:	210f      	movs	r1, #15
 80006b0:	4638      	mov	r0, r7
 80006b2:	f029 0b01 	bic.w	fp, r9, #1
 80006b6:	4493      	add	fp, r2
 80006b8:	f7ff ff48 	bl	800054c <_Unwind_GetGR>
 80006bc:	4583      	cmp	fp, r0
 80006be:	d839      	bhi.n	8000734 <__gnu_unwind_pr_common+0x104>
 80006c0:	f02a 0201 	bic.w	r2, sl, #1
 80006c4:	445a      	add	r2, fp
 80006c6:	4282      	cmp	r2, r0
 80006c8:	bf94      	ite	ls
 80006ca:	2000      	movls	r0, #0
 80006cc:	2001      	movhi	r0, #1
 80006ce:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	f00a 0a01 	and.w	sl, sl, #1
 80006da:	ea43 030a 	orr.w	r3, r3, sl
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d049      	beq.n	8000776 <__gnu_unwind_pr_common+0x146>
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d032      	beq.n	800074c <__gnu_unwind_pr_common+0x11c>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1cc      	bne.n	8000684 <__gnu_unwind_pr_common+0x54>
 80006ea:	f1b8 0f00 	cmp.w	r8, #0
 80006ee:	d002      	beq.n	80006f6 <__gnu_unwind_pr_common+0xc6>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	f040 80ce 	bne.w	8000892 <__gnu_unwind_pr_common+0x262>
 80006f6:	3404      	adds	r4, #4
 80006f8:	f8d4 a000 	ldr.w	sl, [r4]
 80006fc:	f1ba 0f00 	cmp.w	sl, #0
 8000700:	d1cd      	bne.n	800069e <__gnu_unwind_pr_common+0x6e>
 8000702:	4638      	mov	r0, r7
 8000704:	a905      	add	r1, sp, #20
 8000706:	f000 fb29 	bl	8000d5c <__gnu_unwind_execute>
 800070a:	2800      	cmp	r0, #0
 800070c:	d1ba      	bne.n	8000684 <__gnu_unwind_pr_common+0x54>
 800070e:	9b01      	ldr	r3, [sp, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0b3      	beq.n	800067c <__gnu_unwind_pr_common+0x4c>
 8000714:	210f      	movs	r1, #15
 8000716:	4638      	mov	r0, r7
 8000718:	f7ff ff18 	bl	800054c <_Unwind_GetGR>
 800071c:	210e      	movs	r1, #14
 800071e:	4602      	mov	r2, r0
 8000720:	4638      	mov	r0, r7
 8000722:	f7ff ff39 	bl	8000598 <_Unwind_SetGR>
 8000726:	4638      	mov	r0, r7
 8000728:	210f      	movs	r1, #15
 800072a:	4a6a      	ldr	r2, [pc, #424]	; (80008d4 <__gnu_unwind_pr_common+0x2a4>)
 800072c:	f7ff ff34 	bl	8000598 <_Unwind_SetGR>
 8000730:	2007      	movs	r0, #7
 8000732:	e7a8      	b.n	8000686 <__gnu_unwind_pr_common+0x56>
 8000734:	2000      	movs	r0, #0
 8000736:	e7ca      	b.n	80006ce <__gnu_unwind_pr_common+0x9e>
 8000738:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800073c:	3408      	adds	r4, #8
 800073e:	e7b5      	b.n	80006ac <__gnu_unwind_pr_common+0x7c>
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	9305      	str	r3, [sp, #20]
 8000744:	2303      	movs	r3, #3
 8000746:	f8ad 301c 	strh.w	r3, [sp, #28]
 800074a:	e78a      	b.n	8000662 <__gnu_unwind_pr_common+0x32>
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000752:	f1b8 0f00 	cmp.w	r8, #0
 8000756:	d145      	bne.n	80007e4 <__gnu_unwind_pr_common+0x1b4>
 8000758:	b128      	cbz	r0, 8000766 <__gnu_unwind_pr_common+0x136>
 800075a:	9a02      	ldr	r2, [sp, #8]
 800075c:	2a00      	cmp	r2, #0
 800075e:	d05c      	beq.n	800081a <__gnu_unwind_pr_common+0x1ea>
 8000760:	f1bb 0f00 	cmp.w	fp, #0
 8000764:	d074      	beq.n	8000850 <__gnu_unwind_pr_common+0x220>
 8000766:	2b00      	cmp	r3, #0
 8000768:	da00      	bge.n	800076c <__gnu_unwind_pr_common+0x13c>
 800076a:	3404      	adds	r4, #4
 800076c:	f10b 0b01 	add.w	fp, fp, #1
 8000770:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000774:	e7c0      	b.n	80006f8 <__gnu_unwind_pr_common+0xc8>
 8000776:	f1b8 0f00 	cmp.w	r8, #0
 800077a:	d119      	bne.n	80007b0 <__gnu_unwind_pr_common+0x180>
 800077c:	b1b0      	cbz	r0, 80007ac <__gnu_unwind_pr_common+0x17c>
 800077e:	6863      	ldr	r3, [r4, #4]
 8000780:	6822      	ldr	r2, [r4, #0]
 8000782:	1c99      	adds	r1, r3, #2
 8000784:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000788:	f43f af7c 	beq.w	8000684 <__gnu_unwind_pr_common+0x54>
 800078c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000790:	3301      	adds	r3, #1
 8000792:	9104      	str	r1, [sp, #16]
 8000794:	f000 8091 	beq.w	80008ba <__gnu_unwind_pr_common+0x28a>
 8000798:	1d20      	adds	r0, r4, #4
 800079a:	f7ff fdb7 	bl	800030c <_Unwind_decode_typeinfo_ptr.constprop.0>
 800079e:	ab04      	add	r3, sp, #16
 80007a0:	4601      	mov	r1, r0
 80007a2:	4628      	mov	r0, r5
 80007a4:	f005 f968 	bl	8005a78 <__cxa_type_match>
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d15c      	bne.n	8000866 <__gnu_unwind_pr_common+0x236>
 80007ac:	3408      	adds	r4, #8
 80007ae:	e7a3      	b.n	80006f8 <__gnu_unwind_pr_common+0xc8>
 80007b0:	210d      	movs	r1, #13
 80007b2:	4638      	mov	r0, r7
 80007b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007b8:	f7ff fec8 	bl	800054c <_Unwind_GetGR>
 80007bc:	4581      	cmp	r9, r0
 80007be:	d1f5      	bne.n	80007ac <__gnu_unwind_pr_common+0x17c>
 80007c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007c2:	429c      	cmp	r4, r3
 80007c4:	d1f2      	bne.n	80007ac <__gnu_unwind_pr_common+0x17c>
 80007c6:	4620      	mov	r0, r4
 80007c8:	f7ff fcd4 	bl	8000174 <selfrel_offset31>
 80007cc:	210f      	movs	r1, #15
 80007ce:	4602      	mov	r2, r0
 80007d0:	4638      	mov	r0, r7
 80007d2:	f7ff fee1 	bl	8000598 <_Unwind_SetGR>
 80007d6:	4638      	mov	r0, r7
 80007d8:	462a      	mov	r2, r5
 80007da:	2100      	movs	r1, #0
 80007dc:	f7ff fedc 	bl	8000598 <_Unwind_SetGR>
 80007e0:	2007      	movs	r0, #7
 80007e2:	e750      	b.n	8000686 <__gnu_unwind_pr_common+0x56>
 80007e4:	210d      	movs	r1, #13
 80007e6:	4638      	mov	r0, r7
 80007e8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007ec:	f7ff feae 	bl	800054c <_Unwind_GetGR>
 80007f0:	4581      	cmp	r9, r0
 80007f2:	d001      	beq.n	80007f8 <__gnu_unwind_pr_common+0x1c8>
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	e7b6      	b.n	8000766 <__gnu_unwind_pr_common+0x136>
 80007f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007fa:	429c      	cmp	r4, r3
 80007fc:	d1fa      	bne.n	80007f4 <__gnu_unwind_pr_common+0x1c4>
 80007fe:	2304      	movs	r3, #4
 8000800:	2200      	movs	r2, #0
 8000802:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000806:	18e3      	adds	r3, r4, r3
 8000808:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 800080c:	636b      	str	r3, [r5, #52]	; 0x34
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db5a      	blt.n	80008ca <__gnu_unwind_pr_common+0x29a>
 8000814:	2301      	movs	r3, #1
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	e7a8      	b.n	800076c <__gnu_unwind_pr_common+0x13c>
 800081a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800081e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000822:	4691      	mov	r9, r2
 8000824:	46b0      	mov	r8, r6
 8000826:	f104 0a04 	add.w	sl, r4, #4
 800082a:	461e      	mov	r6, r3
 800082c:	e00e      	b.n	800084c <__gnu_unwind_pr_common+0x21c>
 800082e:	4650      	mov	r0, sl
 8000830:	9604      	str	r6, [sp, #16]
 8000832:	f7ff fd6b 	bl	800030c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000836:	2200      	movs	r2, #0
 8000838:	4601      	mov	r1, r0
 800083a:	ab04      	add	r3, sp, #16
 800083c:	4628      	mov	r0, r5
 800083e:	f109 0901 	add.w	r9, r9, #1
 8000842:	f10a 0a04 	add.w	sl, sl, #4
 8000846:	f005 f917 	bl	8005a78 <__cxa_type_match>
 800084a:	b9e8      	cbnz	r0, 8000888 <__gnu_unwind_pr_common+0x258>
 800084c:	45d9      	cmp	r9, fp
 800084e:	d1ee      	bne.n	800082e <__gnu_unwind_pr_common+0x1fe>
 8000850:	210d      	movs	r1, #13
 8000852:	4638      	mov	r0, r7
 8000854:	f7ff fe7a 	bl	800054c <_Unwind_GetGR>
 8000858:	4603      	mov	r3, r0
 800085a:	9a04      	ldr	r2, [sp, #16]
 800085c:	2006      	movs	r0, #6
 800085e:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 8000862:	622b      	str	r3, [r5, #32]
 8000864:	e70f      	b.n	8000686 <__gnu_unwind_pr_common+0x56>
 8000866:	4681      	mov	r9, r0
 8000868:	210d      	movs	r1, #13
 800086a:	4638      	mov	r0, r7
 800086c:	f7ff fe6e 	bl	800054c <_Unwind_GetGR>
 8000870:	f1b9 0f02 	cmp.w	r9, #2
 8000874:	6228      	str	r0, [r5, #32]
 8000876:	d125      	bne.n	80008c4 <__gnu_unwind_pr_common+0x294>
 8000878:	462b      	mov	r3, r5
 800087a:	9a04      	ldr	r2, [sp, #16]
 800087c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000880:	626b      	str	r3, [r5, #36]	; 0x24
 8000882:	2006      	movs	r0, #6
 8000884:	62ac      	str	r4, [r5, #40]	; 0x28
 8000886:	e6fe      	b.n	8000686 <__gnu_unwind_pr_common+0x56>
 8000888:	4646      	mov	r6, r8
 800088a:	6823      	ldr	r3, [r4, #0]
 800088c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000890:	e769      	b.n	8000766 <__gnu_unwind_pr_common+0x136>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fc6e 	bl	8000174 <selfrel_offset31>
 8000898:	4602      	mov	r2, r0
 800089a:	3404      	adds	r4, #4
 800089c:	63ac      	str	r4, [r5, #56]	; 0x38
 800089e:	4628      	mov	r0, r5
 80008a0:	4614      	mov	r4, r2
 80008a2:	f005 f947 	bl	8005b34 <__cxa_begin_cleanup>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	f43f aeec 	beq.w	8000684 <__gnu_unwind_pr_common+0x54>
 80008ac:	4638      	mov	r0, r7
 80008ae:	4622      	mov	r2, r4
 80008b0:	210f      	movs	r1, #15
 80008b2:	f7ff fe71 	bl	8000598 <_Unwind_SetGR>
 80008b6:	2007      	movs	r0, #7
 80008b8:	e6e5      	b.n	8000686 <__gnu_unwind_pr_common+0x56>
 80008ba:	210d      	movs	r1, #13
 80008bc:	4638      	mov	r0, r7
 80008be:	f7ff fe45 	bl	800054c <_Unwind_GetGR>
 80008c2:	6228      	str	r0, [r5, #32]
 80008c4:	9b04      	ldr	r3, [sp, #16]
 80008c6:	626b      	str	r3, [r5, #36]	; 0x24
 80008c8:	e7db      	b.n	8000882 <__gnu_unwind_pr_common+0x252>
 80008ca:	f10b 0001 	add.w	r0, fp, #1
 80008ce:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008d2:	e779      	b.n	80007c8 <__gnu_unwind_pr_common+0x198>
 80008d4:	08006295 	.word	0x08006295

080008d8 <__aeabi_unwind_cpp_pr0>:
 80008d8:	2300      	movs	r3, #0
 80008da:	e6a9      	b.n	8000630 <__gnu_unwind_pr_common>

080008dc <__aeabi_unwind_cpp_pr1>:
 80008dc:	2301      	movs	r3, #1
 80008de:	e6a7      	b.n	8000630 <__gnu_unwind_pr_common>

080008e0 <__aeabi_unwind_cpp_pr2>:
 80008e0:	2302      	movs	r3, #2
 80008e2:	e6a5      	b.n	8000630 <__gnu_unwind_pr_common>

080008e4 <_Unwind_VRS_Pop>:
 80008e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008e8:	4606      	mov	r6, r0
 80008ea:	4615      	mov	r5, r2
 80008ec:	461c      	mov	r4, r3
 80008ee:	b0c3      	sub	sp, #268	; 0x10c
 80008f0:	2904      	cmp	r1, #4
 80008f2:	f200 80b8 	bhi.w	8000a66 <_Unwind_VRS_Pop+0x182>
 80008f6:	e8df f001 	tbb	[pc, r1]
 80008fa:	569c      	.short	0x569c
 80008fc:	2db6      	.short	0x2db6
 80008fe:	03          	.byte	0x03
 80008ff:	00          	.byte	0x00
 8000900:	2c00      	cmp	r4, #0
 8000902:	f040 80b0 	bne.w	8000a66 <_Unwind_VRS_Pop+0x182>
 8000906:	2a10      	cmp	r2, #16
 8000908:	f200 80ad 	bhi.w	8000a66 <_Unwind_VRS_Pop+0x182>
 800090c:	6803      	ldr	r3, [r0, #0]
 800090e:	06d8      	lsls	r0, r3, #27
 8000910:	f100 80f1 	bmi.w	8000af6 <_Unwind_VRS_Pop+0x212>
 8000914:	af20      	add	r7, sp, #128	; 0x80
 8000916:	4638      	mov	r0, r7
 8000918:	f000 f990 	bl	8000c3c <__gnu_Unwind_Save_WMMXC>
 800091c:	2401      	movs	r4, #1
 800091e:	4638      	mov	r0, r7
 8000920:	2300      	movs	r3, #0
 8000922:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000924:	fa04 f203 	lsl.w	r2, r4, r3
 8000928:	422a      	tst	r2, r5
 800092a:	f103 0301 	add.w	r3, r3, #1
 800092e:	d005      	beq.n	800093c <_Unwind_VRS_Pop+0x58>
 8000930:	460a      	mov	r2, r1
 8000932:	f852 cb04 	ldr.w	ip, [r2], #4
 8000936:	4611      	mov	r1, r2
 8000938:	f8c0 c000 	str.w	ip, [r0]
 800093c:	2b04      	cmp	r3, #4
 800093e:	f100 0004 	add.w	r0, r0, #4
 8000942:	d1ef      	bne.n	8000924 <_Unwind_VRS_Pop+0x40>
 8000944:	4638      	mov	r0, r7
 8000946:	63b1      	str	r1, [r6, #56]	; 0x38
 8000948:	f000 f96e 	bl	8000c28 <__gnu_Unwind_Restore_WMMXC>
 800094c:	2000      	movs	r0, #0
 800094e:	b043      	add	sp, #268	; 0x10c
 8000950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000954:	2c03      	cmp	r4, #3
 8000956:	f040 8086 	bne.w	8000a66 <_Unwind_VRS_Pop+0x182>
 800095a:	b294      	uxth	r4, r2
 800095c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000960:	2b10      	cmp	r3, #16
 8000962:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000966:	d87e      	bhi.n	8000a66 <_Unwind_VRS_Pop+0x182>
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	071f      	lsls	r7, r3, #28
 800096c:	f100 80cb 	bmi.w	8000b06 <_Unwind_VRS_Pop+0x222>
 8000970:	af20      	add	r7, sp, #128	; 0x80
 8000972:	4638      	mov	r0, r7
 8000974:	f000 f936 	bl	8000be4 <__gnu_Unwind_Save_WMMXD>
 8000978:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800097a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 800097e:	b154      	cbz	r4, 8000996 <_Unwind_VRS_Pop+0xb2>
 8000980:	460b      	mov	r3, r1
 8000982:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000986:	1ad0      	subs	r0, r2, r3
 8000988:	00e4      	lsls	r4, r4, #3
 800098a:	581d      	ldr	r5, [r3, r0]
 800098c:	f843 5b04 	str.w	r5, [r3], #4
 8000990:	428b      	cmp	r3, r1
 8000992:	d1fa      	bne.n	800098a <_Unwind_VRS_Pop+0xa6>
 8000994:	4422      	add	r2, r4
 8000996:	4638      	mov	r0, r7
 8000998:	63b2      	str	r2, [r6, #56]	; 0x38
 800099a:	f000 f901 	bl	8000ba0 <__gnu_Unwind_Restore_WMMXD>
 800099e:	2000      	movs	r0, #0
 80009a0:	b043      	add	sp, #268	; 0x10c
 80009a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009a6:	2c01      	cmp	r4, #1
 80009a8:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009ac:	b295      	uxth	r5, r2
 80009ae:	d056      	beq.n	8000a5e <_Unwind_VRS_Pop+0x17a>
 80009b0:	2c05      	cmp	r4, #5
 80009b2:	d158      	bne.n	8000a66 <_Unwind_VRS_Pop+0x182>
 80009b4:	eb08 0905 	add.w	r9, r8, r5
 80009b8:	f1b9 0f20 	cmp.w	r9, #32
 80009bc:	d853      	bhi.n	8000a66 <_Unwind_VRS_Pop+0x182>
 80009be:	f1b8 0f0f 	cmp.w	r8, #15
 80009c2:	d973      	bls.n	8000aac <_Unwind_VRS_Pop+0x1c8>
 80009c4:	46a9      	mov	r9, r5
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f040 8084 	bne.w	8000ad4 <_Unwind_VRS_Pop+0x1f0>
 80009cc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80009ce:	b365      	cbz	r5, 8000a2a <_Unwind_VRS_Pop+0x146>
 80009d0:	af20      	add	r7, sp, #128	; 0x80
 80009d2:	f04f 0900 	mov.w	r9, #0
 80009d6:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80009da:	3f04      	subs	r7, #4
 80009dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80009e0:	f853 1b04 	ldr.w	r1, [r3], #4
 80009e4:	42ab      	cmp	r3, r5
 80009e6:	f847 1f04 	str.w	r1, [r7, #4]!
 80009ea:	d1f9      	bne.n	80009e0 <_Unwind_VRS_Pop+0xfc>
 80009ec:	f1b9 0f00 	cmp.w	r9, #0
 80009f0:	d00f      	beq.n	8000a12 <_Unwind_VRS_Pop+0x12e>
 80009f2:	466f      	mov	r7, sp
 80009f4:	4641      	mov	r1, r8
 80009f6:	2910      	cmp	r1, #16
 80009f8:	bf38      	it	cc
 80009fa:	2110      	movcc	r1, #16
 80009fc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a00:	3984      	subs	r1, #132	; 0x84
 8000a02:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a06:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a0a:	42ab      	cmp	r3, r5
 8000a0c:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a10:	d1f9      	bne.n	8000a06 <_Unwind_VRS_Pop+0x122>
 8000a12:	2c01      	cmp	r4, #1
 8000a14:	d07f      	beq.n	8000b16 <_Unwind_VRS_Pop+0x232>
 8000a16:	f1b8 0f0f 	cmp.w	r8, #15
 8000a1a:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a1c:	d942      	bls.n	8000aa4 <_Unwind_VRS_Pop+0x1c0>
 8000a1e:	f1b9 0f00 	cmp.w	r9, #0
 8000a22:	d002      	beq.n	8000a2a <_Unwind_VRS_Pop+0x146>
 8000a24:	4668      	mov	r0, sp
 8000a26:	f000 f8b3 	bl	8000b90 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	b043      	add	sp, #268	; 0x10c
 8000a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a32:	b9c4      	cbnz	r4, 8000a66 <_Unwind_VRS_Pop+0x182>
 8000a34:	4623      	mov	r3, r4
 8000a36:	2401      	movs	r4, #1
 8000a38:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a3a:	1d37      	adds	r7, r6, #4
 8000a3c:	b2a8      	uxth	r0, r5
 8000a3e:	fa04 f103 	lsl.w	r1, r4, r3
 8000a42:	4201      	tst	r1, r0
 8000a44:	bf1c      	itt	ne
 8000a46:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000a4a:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	2b10      	cmp	r3, #16
 8000a52:	d1f4      	bne.n	8000a3e <_Unwind_VRS_Pop+0x15a>
 8000a54:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000a58:	d1e7      	bne.n	8000a2a <_Unwind_VRS_Pop+0x146>
 8000a5a:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a5c:	e004      	b.n	8000a68 <_Unwind_VRS_Pop+0x184>
 8000a5e:	eb08 0305 	add.w	r3, r8, r5
 8000a62:	2b10      	cmp	r3, #16
 8000a64:	d903      	bls.n	8000a6e <_Unwind_VRS_Pop+0x18a>
 8000a66:	2002      	movs	r0, #2
 8000a68:	b043      	add	sp, #268	; 0x10c
 8000a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a6e:	f1b8 0f0f 	cmp.w	r8, #15
 8000a72:	d8f8      	bhi.n	8000a66 <_Unwind_VRS_Pop+0x182>
 8000a74:	6833      	ldr	r3, [r6, #0]
 8000a76:	07da      	lsls	r2, r3, #31
 8000a78:	d506      	bpl.n	8000a88 <_Unwind_VRS_Pop+0x1a4>
 8000a7a:	4630      	mov	r0, r6
 8000a7c:	f023 0303 	bic.w	r3, r3, #3
 8000a80:	f840 3b48 	str.w	r3, [r0], #72
 8000a84:	f000 f878 	bl	8000b78 <__gnu_Unwind_Save_VFP>
 8000a88:	af20      	add	r7, sp, #128	; 0x80
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	f000 f874 	bl	8000b78 <__gnu_Unwind_Save_VFP>
 8000a90:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	d19d      	bne.n	80009d2 <_Unwind_VRS_Pop+0xee>
 8000a96:	461d      	mov	r5, r3
 8000a98:	3504      	adds	r5, #4
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a9e:	f000 f867 	bl	8000b70 <__gnu_Unwind_Restore_VFP>
 8000aa2:	e7c2      	b.n	8000a2a <_Unwind_VRS_Pop+0x146>
 8000aa4:	a820      	add	r0, sp, #128	; 0x80
 8000aa6:	f000 f86b 	bl	8000b80 <__gnu_Unwind_Restore_VFP_D>
 8000aaa:	e7b8      	b.n	8000a1e <_Unwind_VRS_Pop+0x13a>
 8000aac:	f1b9 0f10 	cmp.w	r9, #16
 8000ab0:	d93f      	bls.n	8000b32 <_Unwind_VRS_Pop+0x24e>
 8000ab2:	f1a9 0910 	sub.w	r9, r9, #16
 8000ab6:	6833      	ldr	r3, [r6, #0]
 8000ab8:	07d9      	lsls	r1, r3, #31
 8000aba:	d508      	bpl.n	8000ace <_Unwind_VRS_Pop+0x1ea>
 8000abc:	4630      	mov	r0, r6
 8000abe:	f023 0301 	bic.w	r3, r3, #1
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	f840 3b48 	str.w	r3, [r0], #72
 8000aca:	f000 f85d 	bl	8000b88 <__gnu_Unwind_Save_VFP_D>
 8000ace:	f1b9 0f00 	cmp.w	r9, #0
 8000ad2:	d031      	beq.n	8000b38 <_Unwind_VRS_Pop+0x254>
 8000ad4:	6833      	ldr	r3, [r6, #0]
 8000ad6:	075a      	lsls	r2, r3, #29
 8000ad8:	d41f      	bmi.n	8000b1a <_Unwind_VRS_Pop+0x236>
 8000ada:	f1b8 0f0f 	cmp.w	r8, #15
 8000ade:	d924      	bls.n	8000b2a <_Unwind_VRS_Pop+0x246>
 8000ae0:	466f      	mov	r7, sp
 8000ae2:	f1c8 0510 	rsb	r5, r8, #16
 8000ae6:	4638      	mov	r0, r7
 8000ae8:	f000 f856 	bl	8000b98 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000af0:	dd80      	ble.n	80009f4 <_Unwind_VRS_Pop+0x110>
 8000af2:	af20      	add	r7, sp, #128	; 0x80
 8000af4:	e76f      	b.n	80009d6 <_Unwind_VRS_Pop+0xf2>
 8000af6:	f023 0310 	bic.w	r3, r3, #16
 8000afa:	6033      	str	r3, [r6, #0]
 8000afc:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b00:	f000 f89c 	bl	8000c3c <__gnu_Unwind_Save_WMMXC>
 8000b04:	e706      	b.n	8000914 <_Unwind_VRS_Pop+0x30>
 8000b06:	f023 0308 	bic.w	r3, r3, #8
 8000b0a:	6003      	str	r3, [r0, #0]
 8000b0c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b10:	f000 f868 	bl	8000be4 <__gnu_Unwind_Save_WMMXD>
 8000b14:	e72c      	b.n	8000970 <_Unwind_VRS_Pop+0x8c>
 8000b16:	af20      	add	r7, sp, #128	; 0x80
 8000b18:	e7be      	b.n	8000a98 <_Unwind_VRS_Pop+0x1b4>
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f023 0304 	bic.w	r3, r3, #4
 8000b20:	f840 3bd0 	str.w	r3, [r0], #208
 8000b24:	f000 f838 	bl	8000b98 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b28:	e7d7      	b.n	8000ada <_Unwind_VRS_Pop+0x1f6>
 8000b2a:	a820      	add	r0, sp, #128	; 0x80
 8000b2c:	f000 f82c 	bl	8000b88 <__gnu_Unwind_Save_VFP_D>
 8000b30:	e7d6      	b.n	8000ae0 <_Unwind_VRS_Pop+0x1fc>
 8000b32:	f04f 0900 	mov.w	r9, #0
 8000b36:	e7be      	b.n	8000ab6 <_Unwind_VRS_Pop+0x1d2>
 8000b38:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3c:	f63f af46 	bhi.w	80009cc <_Unwind_VRS_Pop+0xe8>
 8000b40:	af20      	add	r7, sp, #128	; 0x80
 8000b42:	4638      	mov	r0, r7
 8000b44:	f000 f820 	bl	8000b88 <__gnu_Unwind_Save_VFP_D>
 8000b48:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f47f af41 	bne.w	80009d2 <_Unwind_VRS_Pop+0xee>
 8000b50:	4638      	mov	r0, r7
 8000b52:	f000 f815 	bl	8000b80 <__gnu_Unwind_Restore_VFP_D>
 8000b56:	e768      	b.n	8000a2a <_Unwind_VRS_Pop+0x146>

08000b58 <__restore_core_regs>:
 8000b58:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b5c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b60:	469c      	mov	ip, r3
 8000b62:	46a6      	mov	lr, r4
 8000b64:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b68:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b6c:	46e5      	mov	sp, ip
 8000b6e:	bd00      	pop	{pc}

08000b70 <__gnu_Unwind_Restore_VFP>:
 8000b70:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__gnu_Unwind_Save_VFP>:
 8000b78:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__gnu_Unwind_Restore_VFP_D>:
 8000b80:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__gnu_Unwind_Save_VFP_D>:
 8000b88:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b90:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b98:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__gnu_Unwind_Restore_WMMXD>:
 8000ba0:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ba4:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ba8:	ecf0 2102 	ldfe	f2, [r0], #8
 8000bac:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bb0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000bb4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000bb8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000bbc:	ecf0 7102 	ldfe	f7, [r0], #8
 8000bc0:	ecf0 8102 	ldfp	f0, [r0], #8
 8000bc4:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bc8:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bcc:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bd0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bd4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bd8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bdc:	ecf0 f102 	ldfp	f7, [r0], #8
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__gnu_Unwind_Save_WMMXD>:
 8000be4:	ece0 0102 	stfe	f0, [r0], #8
 8000be8:	ece0 1102 	stfe	f1, [r0], #8
 8000bec:	ece0 2102 	stfe	f2, [r0], #8
 8000bf0:	ece0 3102 	stfe	f3, [r0], #8
 8000bf4:	ece0 4102 	stfe	f4, [r0], #8
 8000bf8:	ece0 5102 	stfe	f5, [r0], #8
 8000bfc:	ece0 6102 	stfe	f6, [r0], #8
 8000c00:	ece0 7102 	stfe	f7, [r0], #8
 8000c04:	ece0 8102 	stfp	f0, [r0], #8
 8000c08:	ece0 9102 	stfp	f1, [r0], #8
 8000c0c:	ece0 a102 	stfp	f2, [r0], #8
 8000c10:	ece0 b102 	stfp	f3, [r0], #8
 8000c14:	ece0 c102 	stfp	f4, [r0], #8
 8000c18:	ece0 d102 	stfp	f5, [r0], #8
 8000c1c:	ece0 e102 	stfp	f6, [r0], #8
 8000c20:	ece0 f102 	stfp	f7, [r0], #8
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__gnu_Unwind_Restore_WMMXC>:
 8000c28:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c2c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c30:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c34:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__gnu_Unwind_Save_WMMXC>:
 8000c3c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c40:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c44:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c48:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <_Unwind_RaiseException>:
 8000c50:	46ec      	mov	ip, sp
 8000c52:	b500      	push	{lr}
 8000c54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c64:	a901      	add	r1, sp, #4
 8000c66:	f7ff fbe7 	bl	8000438 <__gnu_Unwind_RaiseException>
 8000c6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c6e:	b012      	add	sp, #72	; 0x48
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <_Unwind_Resume>:
 8000c74:	46ec      	mov	ip, sp
 8000c76:	b500      	push	{lr}
 8000c78:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c88:	a901      	add	r1, sp, #4
 8000c8a:	f7ff fc13 	bl	80004b4 <__gnu_Unwind_Resume>
 8000c8e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c92:	b012      	add	sp, #72	; 0x48
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_Unwind_Resume_or_Rethrow>:
 8000c98:	46ec      	mov	ip, sp
 8000c9a:	b500      	push	{lr}
 8000c9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ca0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cac:	a901      	add	r1, sp, #4
 8000cae:	f7ff fc23 	bl	80004f8 <__gnu_Unwind_Resume_or_Rethrow>
 8000cb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cb6:	b012      	add	sp, #72	; 0x48
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <_Unwind_ForcedUnwind>:
 8000cbc:	46ec      	mov	ip, sp
 8000cbe:	b500      	push	{lr}
 8000cc0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd0:	ab01      	add	r3, sp, #4
 8000cd2:	f7ff fbe5 	bl	80004a0 <__gnu_Unwind_ForcedUnwind>
 8000cd6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cda:	b012      	add	sp, #72	; 0x48
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <_Unwind_Backtrace>:
 8000ce0:	46ec      	mov	ip, sp
 8000ce2:	b500      	push	{lr}
 8000ce4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ce8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cf4:	aa01      	add	r2, sp, #4
 8000cf6:	f7ff fc5b 	bl	80005b0 <__gnu_Unwind_Backtrace>
 8000cfa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cfe:	b012      	add	sp, #72	; 0x48
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <next_unwind_byte>:
 8000d04:	7a02      	ldrb	r2, [r0, #8]
 8000d06:	4603      	mov	r3, r0
 8000d08:	b97a      	cbnz	r2, 8000d2a <next_unwind_byte+0x26>
 8000d0a:	7a42      	ldrb	r2, [r0, #9]
 8000d0c:	b1a2      	cbz	r2, 8000d38 <next_unwind_byte+0x34>
 8000d0e:	f04f 0c03 	mov.w	ip, #3
 8000d12:	6841      	ldr	r1, [r0, #4]
 8000d14:	3a01      	subs	r2, #1
 8000d16:	7242      	strb	r2, [r0, #9]
 8000d18:	6808      	ldr	r0, [r1, #0]
 8000d1a:	1d0a      	adds	r2, r1, #4
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	0202      	lsls	r2, r0, #8
 8000d20:	f883 c008 	strb.w	ip, [r3, #8]
 8000d24:	0e00      	lsrs	r0, r0, #24
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	4770      	bx	lr
 8000d2a:	6800      	ldr	r0, [r0, #0]
 8000d2c:	3a01      	subs	r2, #1
 8000d2e:	721a      	strb	r2, [r3, #8]
 8000d30:	0202      	lsls	r2, r0, #8
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	0e00      	lsrs	r0, r0, #24
 8000d36:	4770      	bx	lr
 8000d38:	20b0      	movs	r0, #176	; 0xb0
 8000d3a:	4770      	bx	lr

08000d3c <_Unwind_GetGR.constprop.0>:
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	b500      	push	{lr}
 8000d40:	b085      	sub	sp, #20
 8000d42:	a903      	add	r1, sp, #12
 8000d44:	9100      	str	r1, [sp, #0]
 8000d46:	220c      	movs	r2, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f7ff fbe7 	bl	800051c <_Unwind_VRS_Get>
 8000d4e:	9803      	ldr	r0, [sp, #12]
 8000d50:	b005      	add	sp, #20
 8000d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d56:	bf00      	nop

08000d58 <unwind_UCB_from_context>:
 8000d58:	e7f0      	b.n	8000d3c <_Unwind_GetGR.constprop.0>
 8000d5a:	bf00      	nop

08000d5c <__gnu_unwind_execute>:
 8000d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d60:	f04f 0800 	mov.w	r8, #0
 8000d64:	4605      	mov	r5, r0
 8000d66:	460e      	mov	r6, r1
 8000d68:	b085      	sub	sp, #20
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f7ff ffca 	bl	8000d04 <next_unwind_byte>
 8000d70:	28b0      	cmp	r0, #176	; 0xb0
 8000d72:	4604      	mov	r4, r0
 8000d74:	f000 80ba 	beq.w	8000eec <__gnu_unwind_execute+0x190>
 8000d78:	0607      	lsls	r7, r0, #24
 8000d7a:	d520      	bpl.n	8000dbe <__gnu_unwind_execute+0x62>
 8000d7c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000d80:	2b80      	cmp	r3, #128	; 0x80
 8000d82:	d04d      	beq.n	8000e20 <__gnu_unwind_execute+0xc4>
 8000d84:	2b90      	cmp	r3, #144	; 0x90
 8000d86:	d036      	beq.n	8000df6 <__gnu_unwind_execute+0x9a>
 8000d88:	2ba0      	cmp	r3, #160	; 0xa0
 8000d8a:	d060      	beq.n	8000e4e <__gnu_unwind_execute+0xf2>
 8000d8c:	2bb0      	cmp	r3, #176	; 0xb0
 8000d8e:	d073      	beq.n	8000e78 <__gnu_unwind_execute+0x11c>
 8000d90:	2bc0      	cmp	r3, #192	; 0xc0
 8000d92:	f000 808a 	beq.w	8000eaa <__gnu_unwind_execute+0x14e>
 8000d96:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000d9a:	2bd0      	cmp	r3, #208	; 0xd0
 8000d9c:	d10b      	bne.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000d9e:	f000 0207 	and.w	r2, r0, #7
 8000da2:	3201      	adds	r2, #1
 8000da4:	2305      	movs	r3, #5
 8000da6:	2101      	movs	r1, #1
 8000da8:	4628      	mov	r0, r5
 8000daa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dae:	f7ff fd99 	bl	80008e4 <_Unwind_VRS_Pop>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d0d9      	beq.n	8000d6a <__gnu_unwind_execute+0xe>
 8000db6:	2009      	movs	r0, #9
 8000db8:	b005      	add	sp, #20
 8000dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dbe:	0083      	lsls	r3, r0, #2
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	1d1f      	adds	r7, r3, #4
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f10d 090c 	add.w	r9, sp, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	220d      	movs	r2, #13
 8000dce:	4628      	mov	r0, r5
 8000dd0:	f8cd 9000 	str.w	r9, [sp]
 8000dd4:	f7ff fba2 	bl	800051c <_Unwind_VRS_Get>
 8000dd8:	9b03      	ldr	r3, [sp, #12]
 8000dda:	0660      	lsls	r0, r4, #25
 8000ddc:	bf4c      	ite	mi
 8000dde:	1bdf      	submi	r7, r3, r7
 8000de0:	18ff      	addpl	r7, r7, r3
 8000de2:	2300      	movs	r3, #0
 8000de4:	220d      	movs	r2, #13
 8000de6:	4628      	mov	r0, r5
 8000de8:	4619      	mov	r1, r3
 8000dea:	f8cd 9000 	str.w	r9, [sp]
 8000dee:	9703      	str	r7, [sp, #12]
 8000df0:	f7ff fbba 	bl	8000568 <_Unwind_VRS_Set>
 8000df4:	e7b9      	b.n	8000d6a <__gnu_unwind_execute+0xe>
 8000df6:	f000 030d 	and.w	r3, r0, #13
 8000dfa:	2b0d      	cmp	r3, #13
 8000dfc:	d0db      	beq.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	af03      	add	r7, sp, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	f000 020f 	and.w	r2, r0, #15
 8000e08:	9700      	str	r7, [sp, #0]
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	f7ff fb86 	bl	800051c <_Unwind_VRS_Get>
 8000e10:	2300      	movs	r3, #0
 8000e12:	220d      	movs	r2, #13
 8000e14:	4628      	mov	r0, r5
 8000e16:	4619      	mov	r1, r3
 8000e18:	9700      	str	r7, [sp, #0]
 8000e1a:	f7ff fba5 	bl	8000568 <_Unwind_VRS_Set>
 8000e1e:	e7a4      	b.n	8000d6a <__gnu_unwind_execute+0xe>
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff ff6f 	bl	8000d04 <next_unwind_byte>
 8000e26:	0224      	lsls	r4, r4, #8
 8000e28:	4320      	orrs	r0, r4
 8000e2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e2e:	d0c2      	beq.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000e30:	2300      	movs	r3, #0
 8000e32:	0104      	lsls	r4, r0, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4628      	mov	r0, r5
 8000e38:	b2a2      	uxth	r2, r4
 8000e3a:	f7ff fd53 	bl	80008e4 <_Unwind_VRS_Pop>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d1b9      	bne.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000e42:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e46:	bf18      	it	ne
 8000e48:	f04f 0801 	movne.w	r8, #1
 8000e4c:	e78d      	b.n	8000d6a <__gnu_unwind_execute+0xe>
 8000e4e:	43c3      	mvns	r3, r0
 8000e50:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	411a      	asrs	r2, r3
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	0701      	lsls	r1, r0, #28
 8000e5e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e62:	bf48      	it	mi
 8000e64:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e68:	4628      	mov	r0, r5
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fd3a 	bl	80008e4 <_Unwind_VRS_Pop>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	f43f af7a 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000e76:	e79e      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000e78:	28b1      	cmp	r0, #177	; 0xb1
 8000e7a:	d03c      	beq.n	8000ef6 <__gnu_unwind_execute+0x19a>
 8000e7c:	28b2      	cmp	r0, #178	; 0xb2
 8000e7e:	f000 80b0 	beq.w	8000fe2 <__gnu_unwind_execute+0x286>
 8000e82:	28b3      	cmp	r0, #179	; 0xb3
 8000e84:	d04a      	beq.n	8000f1c <__gnu_unwind_execute+0x1c0>
 8000e86:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e8a:	2bb4      	cmp	r3, #180	; 0xb4
 8000e8c:	d093      	beq.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f000 0207 	and.w	r2, r0, #7
 8000e94:	441a      	add	r2, r3
 8000e96:	4628      	mov	r0, r5
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e9e:	f7ff fd21 	bl	80008e4 <_Unwind_VRS_Pop>
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	f43f af61 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000ea8:	e785      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000eaa:	28c6      	cmp	r0, #198	; 0xc6
 8000eac:	d04f      	beq.n	8000f4e <__gnu_unwind_execute+0x1f2>
 8000eae:	28c7      	cmp	r0, #199	; 0xc7
 8000eb0:	d061      	beq.n	8000f76 <__gnu_unwind_execute+0x21a>
 8000eb2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8000eb8:	d070      	beq.n	8000f9c <__gnu_unwind_execute+0x240>
 8000eba:	28c8      	cmp	r0, #200	; 0xc8
 8000ebc:	d07c      	beq.n	8000fb8 <__gnu_unwind_execute+0x25c>
 8000ebe:	28c9      	cmp	r0, #201	; 0xc9
 8000ec0:	f47f af79 	bne.w	8000db6 <__gnu_unwind_execute+0x5a>
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	f7ff ff1d 	bl	8000d04 <next_unwind_byte>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	4602      	mov	r2, r0
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	0314      	lsls	r4, r2, #12
 8000ed4:	f002 020f 	and.w	r2, r2, #15
 8000ed8:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000edc:	440a      	add	r2, r1
 8000ede:	4322      	orrs	r2, r4
 8000ee0:	f7ff fd00 	bl	80008e4 <_Unwind_VRS_Pop>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	f43f af40 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000eea:	e764      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000eec:	f1b8 0f00 	cmp.w	r8, #0
 8000ef0:	d01c      	beq.n	8000f2c <__gnu_unwind_execute+0x1d0>
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	e760      	b.n	8000db8 <__gnu_unwind_execute+0x5c>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	f7ff ff04 	bl	8000d04 <next_unwind_byte>
 8000efc:	4602      	mov	r2, r0
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f43f af59 	beq.w	8000db6 <__gnu_unwind_execute+0x5a>
 8000f04:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f08:	f47f af55 	bne.w	8000db6 <__gnu_unwind_execute+0x5a>
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f7ff fce8 	bl	80008e4 <_Unwind_VRS_Pop>
 8000f14:	2800      	cmp	r0, #0
 8000f16:	f43f af28 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000f1a:	e74c      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f7ff fef1 	bl	8000d04 <next_unwind_byte>
 8000f22:	2301      	movs	r3, #1
 8000f24:	4602      	mov	r2, r0
 8000f26:	4619      	mov	r1, r3
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e7d2      	b.n	8000ed2 <__gnu_unwind_execute+0x176>
 8000f2c:	ac03      	add	r4, sp, #12
 8000f2e:	4643      	mov	r3, r8
 8000f30:	220e      	movs	r2, #14
 8000f32:	4641      	mov	r1, r8
 8000f34:	4628      	mov	r0, r5
 8000f36:	9400      	str	r4, [sp, #0]
 8000f38:	f7ff faf0 	bl	800051c <_Unwind_VRS_Get>
 8000f3c:	4643      	mov	r3, r8
 8000f3e:	220f      	movs	r2, #15
 8000f40:	4628      	mov	r0, r5
 8000f42:	4641      	mov	r1, r8
 8000f44:	9400      	str	r4, [sp, #0]
 8000f46:	f7ff fb0f 	bl	8000568 <_Unwind_VRS_Set>
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	e734      	b.n	8000db8 <__gnu_unwind_execute+0x5c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	f7ff fed8 	bl	8000d04 <next_unwind_byte>
 8000f54:	4602      	mov	r2, r0
 8000f56:	2303      	movs	r3, #3
 8000f58:	0314      	lsls	r4, r2, #12
 8000f5a:	f002 020f 	and.w	r2, r2, #15
 8000f5e:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000f62:	3201      	adds	r2, #1
 8000f64:	4628      	mov	r0, r5
 8000f66:	4619      	mov	r1, r3
 8000f68:	4322      	orrs	r2, r4
 8000f6a:	f7ff fcbb 	bl	80008e4 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f aefb 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000f74:	e71f      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000f76:	4630      	mov	r0, r6
 8000f78:	f7ff fec4 	bl	8000d04 <next_unwind_byte>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	f43f af19 	beq.w	8000db6 <__gnu_unwind_execute+0x5a>
 8000f84:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f88:	f47f af15 	bne.w	8000db6 <__gnu_unwind_execute+0x5a>
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f7ff fca8 	bl	80008e4 <_Unwind_VRS_Pop>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f43f aee8 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000f9a:	e70c      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f000 020f 	and.w	r2, r0, #15
 8000fa2:	3201      	adds	r2, #1
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fac:	f7ff fc9a 	bl	80008e4 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f aeda 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000fb6:	e6fe      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff fea3 	bl	8000d04 <next_unwind_byte>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8000fc6:	f002 020f 	and.w	r2, r2, #15
 8000fca:	3410      	adds	r4, #16
 8000fcc:	440a      	add	r2, r1
 8000fce:	2305      	movs	r3, #5
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8000fd6:	f7ff fc85 	bl	80008e4 <_Unwind_VRS_Pop>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	f43f aec5 	beq.w	8000d6a <__gnu_unwind_execute+0xe>
 8000fe0:	e6e9      	b.n	8000db6 <__gnu_unwind_execute+0x5a>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f10d 090c 	add.w	r9, sp, #12
 8000fe8:	220d      	movs	r2, #13
 8000fea:	4619      	mov	r1, r3
 8000fec:	4628      	mov	r0, r5
 8000fee:	f8cd 9000 	str.w	r9, [sp]
 8000ff2:	f7ff fa93 	bl	800051c <_Unwind_VRS_Get>
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	f7ff fe84 	bl	8000d04 <next_unwind_byte>
 8000ffc:	0602      	lsls	r2, r0, #24
 8000ffe:	f04f 0402 	mov.w	r4, #2
 8001002:	d50c      	bpl.n	800101e <__gnu_unwind_execute+0x2c2>
 8001004:	9b03      	ldr	r3, [sp, #12]
 8001006:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800100a:	40a0      	lsls	r0, r4
 800100c:	4418      	add	r0, r3
 800100e:	9003      	str	r0, [sp, #12]
 8001010:	4630      	mov	r0, r6
 8001012:	f7ff fe77 	bl	8000d04 <next_unwind_byte>
 8001016:	0603      	lsls	r3, r0, #24
 8001018:	f104 0407 	add.w	r4, r4, #7
 800101c:	d4f2      	bmi.n	8001004 <__gnu_unwind_execute+0x2a8>
 800101e:	9b03      	ldr	r3, [sp, #12]
 8001020:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001024:	40a2      	lsls	r2, r4
 8001026:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800102a:	441a      	add	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	9203      	str	r2, [sp, #12]
 8001030:	4628      	mov	r0, r5
 8001032:	220d      	movs	r2, #13
 8001034:	4619      	mov	r1, r3
 8001036:	f8cd 9000 	str.w	r9, [sp]
 800103a:	f7ff fa95 	bl	8000568 <_Unwind_VRS_Set>
 800103e:	e694      	b.n	8000d6a <__gnu_unwind_execute+0xe>

08001040 <__gnu_unwind_frame>:
 8001040:	460b      	mov	r3, r1
 8001042:	f04f 0c03 	mov.w	ip, #3
 8001046:	b500      	push	{lr}
 8001048:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800104a:	4618      	mov	r0, r3
 800104c:	6853      	ldr	r3, [r2, #4]
 800104e:	b085      	sub	sp, #20
 8001050:	3208      	adds	r2, #8
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	a901      	add	r1, sp, #4
 8001056:	0e1a      	lsrs	r2, r3, #24
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	f88d c00c 	strb.w	ip, [sp, #12]
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f88d 200d 	strb.w	r2, [sp, #13]
 8001064:	f7ff fe7a 	bl	8000d5c <__gnu_unwind_execute>
 8001068:	b005      	add	sp, #20
 800106a:	f85d fb04 	ldr.w	pc, [sp], #4
 800106e:	bf00      	nop

08001070 <_Unwind_GetRegionStart>:
 8001070:	b508      	push	{r3, lr}
 8001072:	f7ff fe71 	bl	8000d58 <unwind_UCB_from_context>
 8001076:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001078:	bd08      	pop	{r3, pc}
 800107a:	bf00      	nop

0800107c <_Unwind_GetLanguageSpecificData>:
 800107c:	b508      	push	{r3, lr}
 800107e:	f7ff fe6b 	bl	8000d58 <unwind_UCB_from_context>
 8001082:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001084:	79c3      	ldrb	r3, [r0, #7]
 8001086:	3302      	adds	r3, #2
 8001088:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop

08001090 <_ZN3CarC1EPKcS1_8fuelTypeiib>:
 *       Brief: OOP Example class
 */

#include "car.h"

Car::Car(const char * brand, const char * model, fuelType fuel_type, int price, int max_speed, bool status){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	70fb      	strb	r3, [r7, #3]
	this->brand = (uint8_t *)brand;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	601a      	str	r2, [r3, #0]
	this->model = (uint8_t *)model;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
	this->fuel_type_tag = this->toFuelTypeTag(fuel_type);
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	4619      	mov	r1, r3
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f828 	bl	8001104 <_ZN3Car13toFuelTypeTagE8fuelType>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	60da      	str	r2, [r3, #12]
	this->price = price;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	611a      	str	r2, [r3, #16]
	this->max_speed = max_speed;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	615a      	str	r2, [r3, #20]
	this->status = status;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010cc:	761a      	strb	r2, [r3, #24]
}
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <_ZN3Car8getBrandEv>:

void Car::setBrand(uint8_t * brand) {
	this->brand = brand;
}

uint8_t * Car::getBrand() {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

	return this->brand;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <_ZN3Car8getModelEv>:

void Car::setModel(uint8_t * model) {
	this->model = model;
}

uint8_t * Car::getModel() {
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	return this->model;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <_ZN3Car13toFuelTypeTagE8fuelType>:

uint8_t * Car::toFuelTypeTag(fuelType fuel_type) {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	switch(this->fuel_type) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7a1b      	ldrb	r3, [r3, #8]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d81b      	bhi.n	8001150 <_ZN3Car13toFuelTypeTagE8fuelType+0x4c>
 8001118:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <_ZN3Car13toFuelTypeTagE8fuelType+0x1c>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	08001131 	.word	0x08001131
 8001124:	08001139 	.word	0x08001139
 8001128:	08001141 	.word	0x08001141
 800112c:	08001149 	.word	0x08001149
	case GASOLINE:
		this->fuel_type_tag = (uint8_t *)"GASOLINE";
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <_ZN3Car13toFuelTypeTagE8fuelType+0x60>)
 8001134:	60da      	str	r2, [r3, #12]
		break;
 8001136:	e00e      	b.n	8001156 <_ZN3Car13toFuelTypeTagE8fuelType+0x52>
	case DIESEL:
		this->fuel_type_tag = (uint8_t *)"DIESEL";
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <_ZN3Car13toFuelTypeTagE8fuelType+0x64>)
 800113c:	60da      	str	r2, [r3, #12]
		break;
 800113e:	e00a      	b.n	8001156 <_ZN3Car13toFuelTypeTagE8fuelType+0x52>
	case ELECTRIC:
		this->fuel_type_tag = (uint8_t *)"ELECTRIC";
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <_ZN3Car13toFuelTypeTagE8fuelType+0x68>)
 8001144:	60da      	str	r2, [r3, #12]
		break;
 8001146:	e006      	b.n	8001156 <_ZN3Car13toFuelTypeTagE8fuelType+0x52>
	case HYBRID:
		this->fuel_type_tag = (uint8_t *)"HYBRID";
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <_ZN3Car13toFuelTypeTagE8fuelType+0x6c>)
 800114c:	60da      	str	r2, [r3, #12]
		break;
 800114e:	e002      	b.n	8001156 <_ZN3Car13toFuelTypeTagE8fuelType+0x52>
	default:
		this->fuel_type_tag = (uint8_t *)"GASOLINE";
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <_ZN3Car13toFuelTypeTagE8fuelType+0x60>)
 8001154:	60da      	str	r2, [r3, #12]
	}
	return this->fuel_type_tag;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	08007030 	.word	0x08007030
 8001168:	0800703c 	.word	0x0800703c
 800116c:	08007044 	.word	0x08007044
 8001170:	08007050 	.word	0x08007050

08001174 <_ZN3Car11getFuelTypeEv>:

void Car::setFuelType(fuelType fuel_type) {
	this->fuel_type_tag = this->toFuelTypeTag(fuel_type);
}

uint8_t * Car::getFuelType() {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	return this->fuel_type_tag;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <_ZN3Car8getPriceEv>:
	} else {
		this->price = price;
	}
}

int Car::getPrice() {
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	return this->price;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <_ZN3Car11getMaxSpeedEv>:
	} else {
		this->max_speed = max_speed;
	}
}

int Car::getMaxSpeed() {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	return this->max_speed;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <_ZN3Car9getStatusEv>:

void Car::setStatus(bool status) {
	this->status = status;
}

bool Car::getStatus() {
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return this->status;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7e1b      	ldrb	r3, [r3, #24]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011d0:	f000 fbd8 	bl	8001984 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011d4:	f000 f818 	bl	8001208 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011d8:	f000 f88a 	bl	80012f0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80011dc:	f000 f85a 	bl	8001294 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80011e0:	f001 fe9a 	bl	8002f18 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of mainTask */
	mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <main+0x30>)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <main+0x34>)
 80011ea:	f001 fefb 	bl	8002fe4 <osThreadNew>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <main+0x38>)
 80011f2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80011f4:	f001 fec2 	bl	8002f7c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80011f8:	e7fe      	b.n	80011f8 <main+0x2c>
 80011fa:	bf00      	nop
 80011fc:	08007118 	.word	0x08007118
 8001200:	0800131d 	.word	0x0800131d
 8001204:	200000dc 	.word	0x200000dc

08001208 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b090      	sub	sp, #64	; 0x40
 800120c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	2228      	movs	r2, #40	; 0x28
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f005 fa02 	bl	8006620 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122e:	2301      	movs	r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001232:	2310      	movs	r3, #16
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fe2e 	bl	8001ea0 <HAL_RCC_OscConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <_Z18SystemClock_Configv+0x50>
	{
		Error_Handler();
 8001254:	f000 f8d0 	bl	80013f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	230f      	movs	r3, #15
 800125a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f001 f897 	bl	80023a4 <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <_Z18SystemClock_Configv+0x82>
	{
		Error_Handler();
 8001286:	f000 f8b7 	bl	80013f8 <Error_Handler>
	}
}
 800128a:	bf00      	nop
 800128c:	3740      	adds	r7, #64	; 0x40
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <_ZL19MX_USART1_UART_Initv>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_ZL19MX_USART1_UART_Initv+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80012cc:	f001 fc6c 	bl	8002ba8 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <_ZL19MX_USART1_UART_Initv+0x50>
	{
		Error_Handler();
 80012e0:	f000 f88a 	bl	80013f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000098 	.word	0x20000098
 80012ec:	40013800 	.word	0x40013800

080012f0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <_ZL12MX_GPIO_Initv+0x28>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <_ZL12MX_GPIO_Initv+0x28>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6193      	str	r3, [r2, #24]
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <_ZL12MX_GPIO_Initv+0x28>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <_Z13StartMainTaskPv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		char buffer[15];

		uint8_t *brand = new_car->getBrand() ;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <_Z13StartMainTaskPv+0xb0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fed5 	bl	80010d8 <_ZN3Car8getBrandEv>
 800132e:	4603      	mov	r3, r0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t *model = new_car->getModel() ;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <_Z13StartMainTaskPv+0xb0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fed9 	bl	80010ee <_ZN3Car8getModelEv>
 800133c:	4603      	mov	r3, r0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
		uint8_t *fuel_type = new_car->getFuelType();
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <_Z13StartMainTaskPv+0xb0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff15 	bl	8001174 <_ZN3Car11getFuelTypeEv>
 800134a:	4603      	mov	r3, r0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24

		int price = new_car->getPrice() ;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <_Z13StartMainTaskPv+0xb0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff19 	bl	800118a <_ZN3Car8getPriceEv>
 8001358:	4603      	mov	r3, r0
 800135a:	623b      	str	r3, [r7, #32]
		itoa(price, buffer, 10);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	220a      	movs	r2, #10
 8001362:	4619      	mov	r1, r3
 8001364:	6a38      	ldr	r0, [r7, #32]
 8001366:	f005 f937 	bl	80065d8 <itoa>
		uint8_t * price_tag = (uint8_t *)buffer;
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	61fb      	str	r3, [r7, #28]
		price_tag = uint8Cat(price_tag, (uint8_t *)"$");
 8001370:	4917      	ldr	r1, [pc, #92]	; (80013d0 <_Z13StartMainTaskPv+0xb4>)
 8001372:	69f8      	ldr	r0, [r7, #28]
 8001374:	f000 fa4e 	bl	8001814 <_Z8uint8CatPhS_>
 8001378:	4603      	mov	r3, r0
 800137a:	61fb      	str	r3, [r7, #28]

		int max_speed = new_car->getMaxSpeed() ;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_Z13StartMainTaskPv+0xb0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff0d 	bl	80011a0 <_ZN3Car11getMaxSpeedEv>
 8001386:	4603      	mov	r3, r0
 8001388:	61bb      	str	r3, [r7, #24]
		bool car_status = new_car->getStatus();
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_Z13StartMainTaskPv+0xb0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff11 	bl	80011b6 <_ZN3Car9getStatusEv>
 8001394:	4603      	mov	r3, r0
 8001396:	75fb      	strb	r3, [r7, #23]

		convPrint(brand);
 8001398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800139a:	f000 fa75 	bl	8001888 <_Z9convPrintPh>
		convPrint(model);
 800139e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013a0:	f000 fa72 	bl	8001888 <_Z9convPrintPh>
		convPrint(fuel_type);
 80013a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a6:	f000 fa6f 	bl	8001888 <_Z9convPrintPh>
		convPrint(price_tag);
 80013aa:	69f8      	ldr	r0, [r7, #28]
 80013ac:	f000 fa6c 	bl	8001888 <_Z9convPrintPh>
		convPrint(max_speed);
 80013b0:	69b8      	ldr	r0, [r7, #24]
 80013b2:	f000 fa89 	bl	80018c8 <_Z9convPrinti>
		convPrint(car_status);
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fa85 	bl	80018c8 <_Z9convPrinti>
		newLine();
 80013be:	f000 faab 	bl	8001918 <_Z7newLinev>
		//		convPrint(100000);
		//		convPrint((uint8_t *)price);
		//		convPrint((uint8_t *)max_speed);
		osDelay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c6:	f001 feb7 	bl	8003138 <osDelay>
	}
 80013ca:	e7ab      	b.n	8001324 <_Z13StartMainTaskPv+0x8>
 80013cc:	200000e0 	.word	0x200000e0
 80013d0:	080070b0 	.word	0x080070b0

080013d4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80013e6:	f000 fae3 	bl	80019b0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40012c00 	.word	0x40012c00

080013f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b087      	sub	sp, #28
 8001408:	af04      	add	r7, sp, #16
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d11f      	bne.n	8001454 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141a:	4293      	cmp	r3, r2
 800141c:	d11a      	bne.n	8001454 <_Z41__static_initialization_and_destruction_0ii+0x50>
Car * new_car = new Car("Lamborghini", "Aventador SVJ", GASOLINE, 522948, 350, true);
 800141e:	201c      	movs	r0, #28
 8001420:	f004 fe5f 	bl	80060e2 <_Znwj>
 8001424:	4603      	mov	r3, r0
 8001426:	461c      	mov	r4, r3
 8001428:	2301      	movs	r3, #1
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2300      	movs	r3, #0
 8001438:	4a09      	ldr	r2, [pc, #36]	; (8001460 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800143a:	490a      	ldr	r1, [pc, #40]	; (8001464 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff fe27 	bl	8001090 <_ZN3CarC1EPKcS1_8fuelTypeiib>
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001444:	601c      	str	r4, [r3, #0]
}
 8001446:	e005      	b.n	8001454 <_Z41__static_initialization_and_destruction_0ii+0x50>
Car * new_car = new Car("Lamborghini", "Aventador SVJ", GASOLINE, 522948, 350, true);
 8001448:	211c      	movs	r1, #28
 800144a:	4620      	mov	r0, r4
 800144c:	f004 fada 	bl	8005a04 <_ZdlPvj>
 8001450:	f004 faee 	bl	8005a30 <__cxa_end_cleanup>
}
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	bf00      	nop
 800145c:	0007fac4 	.word	0x0007fac4
 8001460:	080070b4 	.word	0x080070b4
 8001464:	080070c4 	.word	0x080070c4
 8001468:	200000e0 	.word	0x200000e0

0800146c <_GLOBAL__sub_I_huart1>:
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
 8001470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff ffc5 	bl	8001404 <_Z41__static_initialization_and_destruction_0ii>
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_MspInit+0x4c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_MspInit+0x4c>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_MspInit+0x4c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_MspInit+0x4c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	210f      	movs	r1, #15
 80014b6:	f06f 0001 	mvn.w	r0, #1
 80014ba:	f000 fb4a 	bl	8001b52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_UART_MspInit+0x8c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d131      	bne.n	8001550 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_UART_MspInit+0x90>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <HAL_UART_MspInit+0x90>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_UART_MspInit+0x90>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_UART_MspInit+0x90>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_UART_MspInit+0x90>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_UART_MspInit+0x90>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800151c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <HAL_UART_MspInit+0x94>)
 8001532:	f000 fb39 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_UART_MspInit+0x94>)
 800154c:	f000 fb2c 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40013800 	.word	0x40013800
 800155c:	40021000 	.word	0x40021000
 8001560:	40010800 	.word	0x40010800

08001564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_InitTick+0xd0>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <HAL_InitTick+0xd0>)
 8001580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_InitTick+0xd0>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001592:	f107 020c 	add.w	r2, r7, #12
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f001 f87b 	bl	8002698 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015a2:	f001 f865 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 80015a6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	4a23      	ldr	r2, [pc, #140]	; (8001638 <HAL_InitTick+0xd4>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	0c9b      	lsrs	r3, r3, #18
 80015b2:	3b01      	subs	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_InitTick+0xd8>)
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <HAL_InitTick+0xdc>)
 80015ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <HAL_InitTick+0xd8>)
 80015be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_InitTick+0xd8>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_InitTick+0xd8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_InitTick+0xd8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_InitTick+0xd8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015dc:	4817      	ldr	r0, [pc, #92]	; (800163c <HAL_InitTick+0xd8>)
 80015de:	f001 f8a9 	bl	8002734 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80015e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11b      	bne.n	8001628 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <HAL_InitTick+0xd8>)
 80015f2:	f001 f8f7 	bl	80027e4 <HAL_TIM_Base_Start_IT>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80015fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001604:	2019      	movs	r0, #25
 8001606:	f000 fac0 	bl	8001b8a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d808      	bhi.n	8001622 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	2019      	movs	r0, #25
 8001616:	f000 fa9c 	bl	8001b52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_InitTick+0xe0>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e002      	b.n	8001628 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800162c:	4618      	mov	r0, r3
 800162e:	3730      	adds	r7, #48	; 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	431bde83 	.word	0x431bde83
 800163c:	200000e4 	.word	0x200000e4
 8001640:	40012c00 	.word	0x40012c00
 8001644:	20000004 	.word	0x20000004

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
	...

08001674 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM1_UP_IRQHandler+0x10>)
 800167a:	f001 f8ff 	bl	800287c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000e4 	.word	0x200000e4

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <_kill>:

int _kill(int pid, int sig)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a0:	f004 fe62 	bl	8006368 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2216      	movs	r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
  return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_exit>:

void _exit (int status)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016be:	f04f 31ff 	mov.w	r1, #4294967295
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffe7 	bl	8001696 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c8:	e7fe      	b.n	80016c8 <_exit+0x12>

080016ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e00a      	b.n	80016f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016dc:	f3af 8000 	nop.w
 80016e0:	4601      	mov	r1, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	b2ca      	uxtb	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbf0      	blt.n	80016dc <_read+0x12>
  }

  return len;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e009      	b.n	800172a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	60ba      	str	r2, [r7, #8]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	dbf1      	blt.n	8001716 <_write+0x12>
  }
  return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_close>:

int _close(int file)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <_isatty>:

int _isatty(int file)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f004 fdcc 	bl	8006368 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20002800 	.word	0x20002800
 80017fc:	00000400 	.word	0x00000400
 8001800:	2000012c 	.word	0x2000012c
 8001804:	20001b70 	.word	0x20001b70

08001808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <_Z8uint8CatPhS_>:
 *      Author: lyduc
 */

#include "utilities.h"

uint8_t * uint8Cat(uint8_t * string_1, uint8_t * string_2){
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	uint8_t *concatenated;
	size_t len1 = strlen((char *)string_1);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe fca0 	bl	8000164 <strlen>
 8001824:	6178      	str	r0, [r7, #20]
	size_t len2 = strlen((char *)string_2);
 8001826:	6838      	ldr	r0, [r7, #0]
 8001828:	f7fe fc9c 	bl	8000164 <strlen>
 800182c:	6138      	str	r0, [r7, #16]

	// Allocate memory for the concatenated string
	concatenated = (uint8_t *)malloc(len1 + len2 + 1);
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4413      	add	r3, r2
 8001834:	3301      	adds	r3, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fed4 	bl	80065e4 <malloc>
 800183c:	4603      	mov	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]
	if (concatenated == NULL) {
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d104      	bne.n	8001850 <_Z8uint8CatPhS_+0x3c>
		printf("Failed to allocate memory\n");
 8001846:	480f      	ldr	r0, [pc, #60]	; (8001884 <_Z8uint8CatPhS_+0x70>)
 8001848:	f005 f83c 	bl	80068c4 <puts>
		return NULL;
 800184c:	2300      	movs	r3, #0
 800184e:	e014      	b.n	800187a <_Z8uint8CatPhS_+0x66>
	}

	// Copy characters from string1 into concatenated
	memcpy(concatenated, string_1, len1);
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f004 fed5 	bl	8006604 <memcpy>

	// Copy characters from string2 into concatenated after string1
	memcpy(concatenated + len1, string_2, len2);
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4413      	add	r3, r2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f004 fecd 	bl	8006604 <memcpy>

	// Null-terminate the concatenated string
	concatenated[len1 + len2] = '\0';
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]

	return concatenated;
 8001878:	68fb      	ldr	r3, [r7, #12]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	080070d0 	.word	0x080070d0

08001888 <_Z9convPrintPh>:

void convPrint(uint8_t* value) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	uint8_t new_line[] = "\n";
 8001890:	230a      	movs	r3, #10
 8001892:	813b      	strh	r3, [r7, #8]
	uint8_t * output = uint8Cat(value, new_line);
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffba 	bl	8001814 <_Z8uint8CatPhS_>
 80018a0:	4603      	mov	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, output, strlen((const char *)output), 500);
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7fe fc5d 	bl	8000164 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <_Z9convPrintPh+0x3c>)
 80018b6:	f001 f9c4 	bl	8002c42 <HAL_UART_Transmit>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000098 	.word	0x20000098

080018c8 <_Z9convPrinti>:

void convPrint(int value) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	char buffer[15];
	itoa(value, buffer, 10);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	220a      	movs	r2, #10
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f004 fe7d 	bl	80065d8 <itoa>
	uint8_t new_line[] = "\n";
 80018de:	230a      	movs	r3, #10
 80018e0:	813b      	strh	r3, [r7, #8]
	uint8_t * output = uint8Cat((uint8_t *)buffer, new_line);
 80018e2:	f107 0208 	add.w	r2, r7, #8
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff91 	bl	8001814 <_Z8uint8CatPhS_>
 80018f2:	4603      	mov	r3, r0
 80018f4:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit(&huart1, output, strlen((const char *)output), 500);
 80018f6:	69f8      	ldr	r0, [r7, #28]
 80018f8:	f7fe fc34 	bl	8000164 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001904:	69f9      	ldr	r1, [r7, #28]
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <_Z9convPrinti+0x4c>)
 8001908:	f001 f99b 	bl	8002c42 <HAL_UART_Transmit>
}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000098 	.word	0x20000098

08001918 <_Z7newLinev>:
	uint8_t new_line[] = "\n";
	uint8_t * output = uint8Cat((uint8_t *)value, new_line);
	HAL_UART_Transmit(&huart1, output, strlen((const char *)output), 500);
}

void newLine() {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *)"\n", strlen((const char *)"\n"), 500);
 800191c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001920:	2201      	movs	r2, #1
 8001922:	4903      	ldr	r1, [pc, #12]	; (8001930 <_Z7newLinev+0x18>)
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <_Z7newLinev+0x1c>)
 8001926:	f001 f98c 	bl	8002c42 <HAL_UART_Transmit>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	080070ec 	.word	0x080070ec
 8001934:	20000098 	.word	0x20000098

08001938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195e:	f7ff ff53 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f004 fdfd 	bl	8006560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001966:	f7ff fc31 	bl	80011cc <main>
  bx lr
 800196a:	4770      	bx	lr
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001974:	080074bc 	.word	0x080074bc
  ldr r2, =_sbss
 8001978:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800197c:	20001b6c 	.word	0x20001b6c

08001980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_2_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x28>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x28>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f8d1 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	200f      	movs	r0, #15
 800199c:	f7ff fde2 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fd6c 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_IncTick+0x1c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_IncTick+0x20>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <HAL_IncTick+0x20>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000130 	.word	0x20000130

080019d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_GetTick+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	20000130 	.word	0x20000130

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4906      	ldr	r1, [pc, #24]	; (8001a80 <__NVIC_EnableIRQ+0x34>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff4f 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff64 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ffb2 	bl	8001ad8 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff81 	bl	8001a84 <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff57 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e161      	b.n	8001e80 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8150 	bne.w	8001e7a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a97      	ldr	r2, [pc, #604]	; (8001e3c <HAL_GPIO_Init+0x294>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d05e      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001be4:	4a95      	ldr	r2, [pc, #596]	; (8001e3c <HAL_GPIO_Init+0x294>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d875      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bea:	4a95      	ldr	r2, [pc, #596]	; (8001e40 <HAL_GPIO_Init+0x298>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d058      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a93      	ldr	r2, [pc, #588]	; (8001e40 <HAL_GPIO_Init+0x298>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d86f      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bf6:	4a93      	ldr	r2, [pc, #588]	; (8001e44 <HAL_GPIO_Init+0x29c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d052      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a91      	ldr	r2, [pc, #580]	; (8001e44 <HAL_GPIO_Init+0x29c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d869      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c02:	4a91      	ldr	r2, [pc, #580]	; (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d04c      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c08:	4a8f      	ldr	r2, [pc, #572]	; (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d863      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c0e:	4a8f      	ldr	r2, [pc, #572]	; (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d046      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c14:	4a8d      	ldr	r2, [pc, #564]	; (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d85d      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d82a      	bhi.n	8001c74 <HAL_GPIO_Init+0xcc>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d859      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <HAL_GPIO_Init+0x80>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001c8f 	.word	0x08001c8f
 8001c34:	08001cd1 	.word	0x08001cd1
 8001c38:	08001cd7 	.word	0x08001cd7
 8001c3c:	08001cd7 	.word	0x08001cd7
 8001c40:	08001cd7 	.word	0x08001cd7
 8001c44:	08001cd7 	.word	0x08001cd7
 8001c48:	08001cd7 	.word	0x08001cd7
 8001c4c:	08001cd7 	.word	0x08001cd7
 8001c50:	08001cd7 	.word	0x08001cd7
 8001c54:	08001cd7 	.word	0x08001cd7
 8001c58:	08001cd7 	.word	0x08001cd7
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cd7 	.word	0x08001cd7
 8001c64:	08001cd7 	.word	0x08001cd7
 8001c68:	08001cd7 	.word	0x08001cd7
 8001c6c:	08001c85 	.word	0x08001c85
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	4a76      	ldr	r2, [pc, #472]	; (8001e50 <HAL_GPIO_Init+0x2a8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7a:	e02c      	b.n	8001cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e029      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e024      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	3308      	adds	r3, #8
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e01f      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e01a      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001caa:	2304      	movs	r3, #4
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e013      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	611a      	str	r2, [r3, #16]
          break;
 8001cc2:	e009      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	615a      	str	r2, [r3, #20]
          break;
 8001cce:	e003      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          break;
 8001cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d801      	bhi.n	8001ce2 <HAL_GPIO_Init+0x13a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_Init+0x13e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d802      	bhi.n	8001cf4 <HAL_GPIO_Init+0x14c>
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x152>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3b08      	subs	r3, #8
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	210f      	movs	r1, #15
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80a9 	beq.w	8001e7a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d28:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d40:	4a45      	ldr	r2, [pc, #276]	; (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1e0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1dc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1d8>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e004      	b.n	8001d8a <HAL_GPIO_Init+0x1e2>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x1e2>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_GPIO_Init+0x1e2>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4093      	lsls	r3, r2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d9a:	492f      	ldr	r1, [pc, #188]	; (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001db4:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	492b      	ldr	r1, [pc, #172]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4927      	ldr	r1, [pc, #156]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4921      	ldr	r1, [pc, #132]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	491d      	ldr	r1, [pc, #116]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e04:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4917      	ldr	r1, [pc, #92]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4913      	ldr	r1, [pc, #76]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01f      	beq.n	8001e6c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	490d      	ldr	r1, [pc, #52]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e01f      	b.n	8001e7a <HAL_GPIO_Init+0x2d2>
 8001e3a:	bf00      	nop
 8001e3c:	10320000 	.word	0x10320000
 8001e40:	10310000 	.word	0x10310000
 8001e44:	10220000 	.word	0x10220000
 8001e48:	10210000 	.word	0x10210000
 8001e4c:	10120000 	.word	0x10120000
 8001e50:	10110000 	.word	0x10110000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40010800 	.word	0x40010800
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	40011000 	.word	0x40011000
 8001e68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_GPIO_Init+0x2f4>)
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	4909      	ldr	r1, [pc, #36]	; (8001e9c <HAL_GPIO_Init+0x2f4>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f47f ae96 	bne.w	8001bbc <HAL_GPIO_Init+0x14>
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	372c      	adds	r7, #44	; 0x2c
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40010400 	.word	0x40010400

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e272      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8087 	beq.w	8001fce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec0:	4b92      	ldr	r3, [pc, #584]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d00c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ecc:	4b8f      	ldr	r3, [pc, #572]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d112      	bne.n	8001efe <HAL_RCC_OscConfig+0x5e>
 8001ed8:	4b8c      	ldr	r3, [pc, #560]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d10b      	bne.n	8001efe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee6:	4b89      	ldr	r3, [pc, #548]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d06c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x12c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d168      	bne.n	8001fcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e24c      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x76>
 8001f08:	4b80      	ldr	r3, [pc, #512]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a7f      	ldr	r2, [pc, #508]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e02e      	b.n	8001f74 <HAL_RCC_OscConfig+0xd4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b7b      	ldr	r3, [pc, #492]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7a      	ldr	r2, [pc, #488]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b78      	ldr	r3, [pc, #480]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a77      	ldr	r2, [pc, #476]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01d      	b.n	8001f74 <HAL_RCC_OscConfig+0xd4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0xbc>
 8001f42:	4b72      	ldr	r3, [pc, #456]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a71      	ldr	r2, [pc, #452]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b6f      	ldr	r3, [pc, #444]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6e      	ldr	r2, [pc, #440]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xd4>
 8001f5c:	4b6b      	ldr	r3, [pc, #428]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fd2a 	bl	80019d4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fd26 	bl	80019d4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e200      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b5d      	ldr	r3, [pc, #372]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe4>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fd16 	bl	80019d4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff fd12 	bl	80019d4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1ec      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x10c>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d063      	beq.n	80020a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fda:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d11c      	bne.n	800202c <HAL_RCC_OscConfig+0x18c>
 8001ff2:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d116      	bne.n	800202c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x176>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e1c0      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4939      	ldr	r1, [pc, #228]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	e03a      	b.n	80020a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_RCC_OscConfig+0x270>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7ff fccb 	bl	80019d4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff fcc7 	bl	80019d4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1a1      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4927      	ldr	r1, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
 8002074:	e015      	b.n	80020a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_RCC_OscConfig+0x270>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fcaa 	bl	80019d4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7ff fca6 	bl	80019d4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e180      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d03a      	beq.n	8002124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d019      	beq.n	80020ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020bc:	f7ff fc8a 	bl	80019d4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff fc86 	bl	80019d4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e160      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f000 fb08 	bl	80026f8 <RCC_Delay>
 80020e8:	e01c      	b.n	8002124 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_RCC_OscConfig+0x274>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7ff fc70 	bl	80019d4 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f6:	e00f      	b.n	8002118 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f8:	f7ff fc6c 	bl	80019d4 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d908      	bls.n	8002118 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e146      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
 800210a:	bf00      	nop
 800210c:	40021000 	.word	0x40021000
 8002110:	42420000 	.word	0x42420000
 8002114:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002118:	4b92      	ldr	r3, [pc, #584]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e9      	bne.n	80020f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a6 	beq.w	800227e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002136:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10d      	bne.n	800215e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4a87      	ldr	r2, [pc, #540]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	61d3      	str	r3, [r2, #28]
 800214e:	4b85      	ldr	r3, [pc, #532]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d118      	bne.n	800219c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216a:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7e      	ldr	r2, [pc, #504]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002176:	f7ff fc2d 	bl	80019d4 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217e:	f7ff fc29 	bl	80019d4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	; 0x64
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e103      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	4b75      	ldr	r3, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4c8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x312>
 80021a4:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	e02d      	b.n	800220e <HAL_RCC_OscConfig+0x36e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x334>
 80021ba:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a69      	ldr	r2, [pc, #420]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	e01c      	b.n	800220e <HAL_RCC_OscConfig+0x36e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d10c      	bne.n	80021f6 <HAL_RCC_OscConfig+0x356>
 80021dc:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a60      	ldr	r2, [pc, #384]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	4b5e      	ldr	r3, [pc, #376]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4a5d      	ldr	r2, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6213      	str	r3, [r2, #32]
 80021f4:	e00b      	b.n	800220e <HAL_RCC_OscConfig+0x36e>
 80021f6:	4b5b      	ldr	r3, [pc, #364]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a5a      	ldr	r2, [pc, #360]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b58      	ldr	r3, [pc, #352]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a57      	ldr	r2, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d015      	beq.n	8002242 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fbdd 	bl	80019d4 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7ff fbd9 	bl	80019d4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e0b1      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0ee      	beq.n	800221e <HAL_RCC_OscConfig+0x37e>
 8002240:	e014      	b.n	800226c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff fbc7 	bl	80019d4 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7ff fbc3 	bl	80019d4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e09b      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	4b40      	ldr	r3, [pc, #256]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ee      	bne.n	800224a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002272:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8087 	beq.w	8002396 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b08      	cmp	r3, #8
 8002292:	d061      	beq.n	8002358 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d146      	bne.n	800232a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCC_OscConfig+0x4cc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7ff fb97 	bl	80019d4 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff fb93 	bl	80019d4 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e06d      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d108      	bne.n	80022e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4921      	ldr	r1, [pc, #132]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a19      	ldr	r1, [r3, #32]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	430b      	orrs	r3, r1
 80022f6:	491b      	ldr	r1, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x4cc>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7ff fb67 	bl	80019d4 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230a:	f7ff fb63 	bl	80019d4 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e03d      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x46a>
 8002328:	e035      	b.n	8002396 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_OscConfig+0x4cc>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fb50 	bl	80019d4 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7ff fb4c 	bl	80019d4 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e026      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x498>
 8002356:	e01e      	b.n	8002396 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e019      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
 800236c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_OscConfig+0x500>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	429a      	cmp	r2, r3
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d0      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d910      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
 80023ce:	4965      	ldr	r1, [pc, #404]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002422:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d040      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d115      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e073      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06b      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b39      	ldr	r3, [pc, #228]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4936      	ldr	r1, [pc, #216]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002494:	f7ff fa9e 	bl	80019d4 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7ff fa9a 	bl	80019d4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e053      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d210      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	4922      	ldr	r1, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f821 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1cc>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1d0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f806 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	0800713c 	.word	0x0800713c
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b490      	push	{r4, r7}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_GetSysClockFreq+0xac>)
 8002580:	1d3c      	adds	r4, r7, #4
 8002582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002588:	f240 2301 	movw	r3, #513	; 0x201
 800258c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x40>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x46>
 80025b6:	e02b      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ba:	623b      	str	r3, [r7, #32]
      break;
 80025bc:	e02b      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3328      	adds	r3, #40	; 0x28
 80025c8:	443b      	add	r3, r7
 80025ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d012      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0c5b      	lsrs	r3, r3, #17
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	3328      	adds	r3, #40	; 0x28
 80025e6:	443b      	add	r3, r7
 80025e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	e004      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	623b      	str	r3, [r7, #32]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002612:	623b      	str	r3, [r7, #32]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	6a3b      	ldr	r3, [r7, #32]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc90      	pop	{r4, r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	080070f0 	.word	0x080070f0
 8002628:	40021000 	.word	0x40021000
 800262c:	007a1200 	.word	0x007a1200
 8002630:	003d0900 	.word	0x003d0900

08002634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b02      	ldr	r3, [pc, #8]	; (8002644 <HAL_RCC_GetHCLKFreq+0x10>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264c:	f7ff fff2 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002650:	4602      	mov	r2, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	0800714c 	.word	0x0800714c

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002674:	f7ff ffde 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	0800714c 	.word	0x0800714c

08002698 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	220f      	movs	r2, #15
 80026a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_GetClockConfig+0x58>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0203 	and.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_RCC_GetClockConfig+0x58>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_GetClockConfig+0x58>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <HAL_RCC_GetClockConfig+0x58>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetClockConfig+0x5c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0207 	and.w	r2, r3, #7
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40022000 	.word	0x40022000

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000000 	.word	0x20000000
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e041      	b.n	80027ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f839 	bl	80027d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f000 f9ae 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d001      	beq.n	80027fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e035      	b.n	8002868 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <HAL_TIM_Base_Start_IT+0x90>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_TIM_Base_Start_IT+0x4e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d004      	beq.n	8002832 <HAL_TIM_Base_Start_IT+0x4e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_TIM_Base_Start_IT+0x94>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d111      	bne.n	8002856 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b06      	cmp	r3, #6
 8002842:	d010      	beq.n	8002866 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	e007      	b.n	8002866 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400

0800287c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b02      	cmp	r3, #2
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0202 	mvn.w	r2, #2
 80028a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f8ed 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8e0 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f8ef 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0204 	mvn.w	r2, #4
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8c3 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8b6 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f8c5 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b08      	cmp	r3, #8
 8002938:	d122      	bne.n	8002980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b08      	cmp	r3, #8
 8002946:	d11b      	bne.n	8002980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0208 	mvn.w	r2, #8
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2204      	movs	r2, #4
 8002956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f899 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f88c 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f89b 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	2b10      	cmp	r3, #16
 800298c:	d122      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b10      	cmp	r3, #16
 800299a:	d11b      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0210 	mvn.w	r2, #16
 80029a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2208      	movs	r2, #8
 80029aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f86f 	bl	8002a9e <HAL_TIM_IC_CaptureCallback>
 80029c0:	e005      	b.n	80029ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f862 	bl	8002a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f871 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d107      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0201 	mvn.w	r2, #1
 80029f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fcea 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b80      	cmp	r3, #128	; 0x80
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d107      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f8b5 	bl	8002b96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d107      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f835 	bl	8002ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0220 	mvn.w	r2, #32
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f880 	bl	8002b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <TIM_Base_SetConfig+0x28>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d003      	beq.n	8002afc <TIM_Base_SetConfig+0x28>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <TIM_Base_SetConfig+0xac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d108      	bne.n	8002b0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_Base_SetConfig+0x52>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d003      	beq.n	8002b26 <TIM_Base_SetConfig+0x52>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <TIM_Base_SetConfig+0xac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400

08002b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e03f      	b.n	8002c3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fc7c 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f905 	bl	8002dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b08a      	sub	sp, #40	; 0x28
 8002c46:	af02      	add	r7, sp, #8
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d17c      	bne.n	8002d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_UART_Transmit+0x2c>
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e075      	b.n	8002d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_UART_Transmit+0x3e>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e06e      	b.n	8002d5e <HAL_UART_Transmit+0x11c>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2221      	movs	r2, #33	; 0x21
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c96:	f7fe fe9d 	bl	80019d4 <HAL_GetTick>
 8002c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d108      	bne.n	8002cc4 <HAL_UART_Transmit+0x82>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	e003      	b.n	8002ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cd4:	e02a      	b.n	8002d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f840 	bl	8002d66 <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e036      	b.n	8002d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10b      	bne.n	8002d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	e007      	b.n	8002d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1cf      	bne.n	8002cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f810 	bl	8002d66 <UART_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e006      	b.n	8002d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d76:	e02c      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d028      	beq.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d86:	f7fe fe25 	bl	80019d4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d21d      	bcs.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002da4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e00f      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d0c3      	beq.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e36:	f023 030c 	bic.w	r3, r3, #12
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <UART_SetConfig+0x114>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d103      	bne.n	8002e6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e64:	f7ff fc04 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	e002      	b.n	8002e72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7ff fbec 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8002e70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009a      	lsls	r2, r3, #2
 8002e7c:	441a      	add	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <UART_SetConfig+0x118>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	0119      	lsls	r1, r3, #4
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <UART_SetConfig+0x118>)
 8002eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	3332      	adds	r3, #50	; 0x32
 8002ebc:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <UART_SetConfig+0x118>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec8:	4419      	add	r1, r3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009a      	lsls	r2, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <UART_SetConfig+0x118>)
 8002ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2064      	movs	r0, #100	; 0x64
 8002eea:	fb00 f303 	mul.w	r3, r0, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	3332      	adds	r3, #50	; 0x32
 8002ef4:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <UART_SetConfig+0x118>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	440a      	add	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40013800 	.word	0x40013800
 8002f14:	51eb851f 	.word	0x51eb851f

08002f18 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f1e:	f3ef 8305 	mrs	r3, IPSR
 8002f22:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2e:	607b      	str	r3, [r7, #4]
  return(result);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <osKernelInitialize+0x32>
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <osKernelInitialize+0x60>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d109      	bne.n	8002f52 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8002f42:	603b      	str	r3, [r7, #0]
  return(result);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f4a:	f06f 0305 	mvn.w	r3, #5
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e00c      	b.n	8002f6c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <osKernelInitialize+0x60>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <osKernelInitialize+0x60>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e002      	b.n	8002f6c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	20000134 	.word	0x20000134

08002f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f82:	f3ef 8305 	mrs	r3, IPSR
 8002f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f92:	607b      	str	r3, [r7, #4]
  return(result);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <osKernelStart+0x32>
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <osKernelStart+0x64>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d109      	bne.n	8002fb6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fa2:	f3ef 8311 	mrs	r3, BASEPRI
 8002fa6:	603b      	str	r3, [r7, #0]
  return(result);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002fae:	f06f 0305 	mvn.w	r3, #5
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e00e      	b.n	8002fd4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <osKernelStart+0x64>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <osKernelStart+0x64>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002fc4:	f001 f890 	bl	80040e8 <vTaskStartScheduler>
      stat = osOK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e002      	b.n	8002fd4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000134 	.word	0x20000134

08002fe4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b092      	sub	sp, #72	; 0x48
 8002fe8:	af04      	add	r7, sp, #16
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff4:	f3ef 8305 	mrs	r3, IPSR
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 8094 	bne.w	800312a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003002:	f3ef 8310 	mrs	r3, PRIMASK
 8003006:	623b      	str	r3, [r7, #32]
  return(result);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 808d 	bne.w	800312a <osThreadNew+0x146>
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <osThreadNew+0x150>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d106      	bne.n	8003026 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003018:	f3ef 8311 	mrs	r3, BASEPRI
 800301c:	61fb      	str	r3, [r7, #28]
  return(result);
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 8082 	bne.w	800312a <osThreadNew+0x146>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d07e      	beq.n	800312a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003030:	2318      	movs	r3, #24
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003034:	2300      	movs	r3, #0
 8003036:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003038:	f107 031b 	add.w	r3, r7, #27
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d045      	beq.n	80030d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <osThreadNew+0x74>
        name = attr->name;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <osThreadNew+0x9a>
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2b38      	cmp	r3, #56	; 0x38
 8003070:	d805      	bhi.n	800307e <osThreadNew+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <osThreadNew+0x9e>
        return (NULL);
 800307e:	2300      	movs	r3, #0
 8003080:	e054      	b.n	800312c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <osThreadNew+0xd4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2bbb      	cmp	r3, #187	; 0xbb
 80030a0:	d90a      	bls.n	80030b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <osThreadNew+0xd4>
        mem = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b6:	e010      	b.n	80030da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10c      	bne.n	80030da <osThreadNew+0xf6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d108      	bne.n	80030da <osThreadNew+0xf6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <osThreadNew+0xf6>
          mem = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030d4:	e001      	b.n	80030da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d110      	bne.n	8003102 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030e8:	9202      	str	r2, [sp, #8]
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fe12 	bl	8003d20 <xTaskCreateStatic>
 80030fc:	4603      	mov	r3, r0
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e013      	b.n	800312a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d110      	bne.n	800312a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	b29a      	uxth	r2, r3
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fe5c 	bl	8003dd8 <xTaskCreate>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d001      	beq.n	800312a <osThreadNew+0x146>
          hTask = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800312a:	697b      	ldr	r3, [r7, #20]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3738      	adds	r7, #56	; 0x38
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000134 	.word	0x20000134

08003138 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003140:	f3ef 8305 	mrs	r3, IPSR
 8003144:	613b      	str	r3, [r7, #16]
  return(result);
 8003146:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10f      	bne.n	800316c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314c:	f3ef 8310 	mrs	r3, PRIMASK
 8003150:	60fb      	str	r3, [r7, #12]
  return(result);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <osDelay+0x34>
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <osDelay+0x58>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d109      	bne.n	8003174 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003160:	f3ef 8311 	mrs	r3, BASEPRI
 8003164:	60bb      	str	r3, [r7, #8]
  return(result);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <osDelay+0x3c>
    stat = osErrorISR;
 800316c:	f06f 0305 	mvn.w	r3, #5
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e007      	b.n	8003184 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <osDelay+0x4c>
      vTaskDelay(ticks);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 ff7e 	bl	8004080 <vTaskDelay>
    }
  }

  return (stat);
 8003184:	697b      	ldr	r3, [r7, #20]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000134 	.word	0x20000134

08003194 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4a06      	ldr	r2, [pc, #24]	; (80031bc <vApplicationGetIdleTaskMemory+0x28>)
 80031a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80031aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	601a      	str	r2, [r3, #0]
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000138 	.word	0x20000138
 80031c0:	200001f4 	.word	0x200001f4

080031c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80031d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <vApplicationGetTimerTaskMemory+0x30>)
 80031da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200003f4 	.word	0x200003f4
 80031f4:	200004b0 	.word	0x200004b0

080031f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f103 0208 	add.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f103 0208 	add.w	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f103 0208 	add.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d103      	bne.n	80032b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	e00c      	b.n	80032ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3308      	adds	r3, #8
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e002      	b.n	80032c2 <vListInsert+0x2e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d2f6      	bcs.n	80032bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6892      	ldr	r2, [r2, #8]
 800331a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6852      	ldr	r2, [r2, #4]
 8003324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	d103      	bne.n	8003338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1e5a      	subs	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
	...

08003358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003382:	f001 fff3 	bl	800536c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	68f9      	ldr	r1, [r7, #12]
 8003390:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	441a      	add	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	3b01      	subs	r3, #1
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	441a      	add	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	22ff      	movs	r2, #255	; 0xff
 80033ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d114      	bne.n	8003402 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01a      	beq.n	8003416 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3310      	adds	r3, #16
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 f91b 	bl	8004620 <xTaskRemoveFromEventList>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <xQueueGenericReset+0xcc>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	e009      	b.n	8003416 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3310      	adds	r3, #16
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fef6 	bl	80031f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3324      	adds	r3, #36	; 0x24
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fef1 	bl	80031f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003416:	f001 ffd9 	bl	80053cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
}
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <xQueueGenericCreateStatic+0x52>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <xQueueGenericCreateStatic+0x56>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <xQueueGenericCreateStatic+0x58>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	623b      	str	r3, [r7, #32]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <xQueueGenericCreateStatic+0x7e>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <xQueueGenericCreateStatic+0x82>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <xQueueGenericCreateStatic+0x84>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	61fb      	str	r3, [r7, #28]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034c6:	2350      	movs	r3, #80	; 0x50
 80034c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b50      	cmp	r3, #80	; 0x50
 80034ce:	d00a      	beq.n	80034e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	61bb      	str	r3, [r7, #24]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80034fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f805 	bl	8003516 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800350e:	4618      	mov	r0, r3
 8003510:	3730      	adds	r7, #48	; 0x30
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e002      	b.n	8003538 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003544:	2101      	movs	r1, #1
 8003546:	69b8      	ldr	r0, [r7, #24]
 8003548:	f7ff ff06 	bl	8003358 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08e      	sub	sp, #56	; 0x38
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800356a:	2300      	movs	r3, #0
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <xQueueGenericSend+0x32>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <xQueueGenericSend+0x40>
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <xQueueGenericSend+0x44>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <xQueueGenericSend+0x46>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <xQueueGenericSend+0x60>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d103      	bne.n	80035ca <xQueueGenericSend+0x6e>
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <xQueueGenericSend+0x72>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <xQueueGenericSend+0x74>
 80035ce:	2300      	movs	r3, #0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xQueueGenericSend+0x8e>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	623b      	str	r3, [r7, #32]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035ea:	f001 f9df 	bl	80049ac <xTaskGetSchedulerState>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <xQueueGenericSend+0x9e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSend+0xa2>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSend+0xa4>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericSend+0xbe>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	61fb      	str	r3, [r7, #28]
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800361a:	f001 fea7 	bl	800536c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <xQueueGenericSend+0xd4>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d129      	bne.n	8003684 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003636:	f000 fa07 	bl	8003a48 <prvCopyDataToQueue>
 800363a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	3324      	adds	r3, #36	; 0x24
 8003648:	4618      	mov	r0, r3
 800364a:	f000 ffe9 	bl	8004620 <xTaskRemoveFromEventList>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003654:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <xQueueGenericSend+0x1f8>)
 8003656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	e00a      	b.n	800367c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800366c:	4b39      	ldr	r3, [pc, #228]	; (8003754 <xQueueGenericSend+0x1f8>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800367c:	f001 fea6 	bl	80053cc <vPortExitCritical>
				return pdPASS;
 8003680:	2301      	movs	r3, #1
 8003682:	e063      	b.n	800374c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800368a:	f001 fe9f 	bl	80053cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800368e:	2300      	movs	r3, #0
 8003690:	e05c      	b.n	800374c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f823 	bl	80046e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036a2:	2301      	movs	r3, #1
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036a6:	f001 fe91 	bl	80053cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036aa:	f000 fd8d 	bl	80041c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ae:	f001 fe5d 	bl	800536c <vPortEnterCritical>
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d103      	bne.n	80036c8 <xQueueGenericSend+0x16c>
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d103      	bne.n	80036de <xQueueGenericSend+0x182>
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036de:	f001 fe75 	bl	80053cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036e2:	1d3a      	adds	r2, r7, #4
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f812 	bl	8004714 <xTaskCheckForTimeOut>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d124      	bne.n	8003740 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036f8:	f000 fa9e 	bl	8003c38 <prvIsQueueFull>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d018      	beq.n	8003734 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	3310      	adds	r3, #16
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f000 ff38 	bl	8004580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003712:	f000 fa29 	bl	8003b68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003716:	f000 fd65 	bl	80041e4 <xTaskResumeAll>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f af7c 	bne.w	800361a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <xQueueGenericSend+0x1f8>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	e772      	b.n	800361a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003736:	f000 fa17 	bl	8003b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800373a:	f000 fd53 	bl	80041e4 <xTaskResumeAll>
 800373e:	e76c      	b.n	800361a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003742:	f000 fa11 	bl	8003b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003746:	f000 fd4d 	bl	80041e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800374a:	2300      	movs	r3, #0
		}
	}
}
 800374c:	4618      	mov	r0, r3
 800374e:	3738      	adds	r7, #56	; 0x38
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <xQueueGenericSendFromISR+0x3c>
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <xQueueGenericSendFromISR+0x40>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <xQueueGenericSendFromISR+0x42>
 8003798:	2300      	movs	r3, #0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	623b      	str	r3, [r7, #32]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d103      	bne.n	80037c2 <xQueueGenericSendFromISR+0x6a>
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <xQueueGenericSendFromISR+0x6e>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueGenericSendFromISR+0x70>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61fb      	str	r3, [r7, #28]
}
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037e2:	f001 fe85 	bl	80054f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037e6:	f3ef 8211 	mrs	r2, BASEPRI
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	61ba      	str	r2, [r7, #24]
 80037fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <xQueueGenericSendFromISR+0xbc>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d12c      	bne.n	800386e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003824:	f000 f910 	bl	8003a48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003828:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d112      	bne.n	8003858 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	3324      	adds	r3, #36	; 0x24
 800383e:	4618      	mov	r0, r3
 8003840:	f000 feee 	bl	8004620 <xTaskRemoveFromEventList>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e007      	b.n	8003868 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800385c:	3301      	adds	r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	b25a      	sxtb	r2, r3
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003868:	2301      	movs	r3, #1
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800386c:	e001      	b.n	8003872 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800387c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003880:	4618      	mov	r0, r3
 8003882:	3738      	adds	r7, #56	; 0x38
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	; 0x30
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <xQueueReceive+0x30>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	623b      	str	r3, [r7, #32]
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <xQueueReceive+0x3e>
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <xQueueReceive+0x42>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueReceive+0x44>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xQueueReceive+0x5e>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	61fb      	str	r3, [r7, #28]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038e6:	f001 f861 	bl	80049ac <xTaskGetSchedulerState>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <xQueueReceive+0x6e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <xQueueReceive+0x72>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <xQueueReceive+0x74>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <xQueueReceive+0x8e>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	61bb      	str	r3, [r7, #24]
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003916:	f001 fd29 	bl	800536c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01f      	beq.n	8003966 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392a:	f000 f8f7 	bl	8003b1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1e5a      	subs	r2, r3, #1
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00f      	beq.n	800395e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	3310      	adds	r3, #16
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fe6c 	bl	8004620 <xTaskRemoveFromEventList>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800394e:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <xQueueReceive+0x1bc>)
 8003950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800395e:	f001 fd35 	bl	80053cc <vPortExitCritical>
				return pdPASS;
 8003962:	2301      	movs	r3, #1
 8003964:	e069      	b.n	8003a3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800396c:	f001 fd2e 	bl	80053cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003970:	2300      	movs	r3, #0
 8003972:	e062      	b.n	8003a3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800397a:	f107 0310 	add.w	r3, r7, #16
 800397e:	4618      	mov	r0, r3
 8003980:	f000 feb2 	bl	80046e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003984:	2301      	movs	r3, #1
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003988:	f001 fd20 	bl	80053cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800398c:	f000 fc1c 	bl	80041c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003990:	f001 fcec 	bl	800536c <vPortEnterCritical>
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800399a:	b25b      	sxtb	r3, r3
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d103      	bne.n	80039aa <xQueueReceive+0x122>
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b0:	b25b      	sxtb	r3, r3
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d103      	bne.n	80039c0 <xQueueReceive+0x138>
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c0:	f001 fd04 	bl	80053cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039c4:	1d3a      	adds	r2, r7, #4
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fea1 	bl	8004714 <xTaskCheckForTimeOut>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d123      	bne.n	8003a20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039da:	f000 f917 	bl	8003c0c <prvIsQueueEmpty>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d017      	beq.n	8003a14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	3324      	adds	r3, #36	; 0x24
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fdc7 	bl	8004580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f4:	f000 f8b8 	bl	8003b68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039f8:	f000 fbf4 	bl	80041e4 <xTaskResumeAll>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d189      	bne.n	8003916 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <xQueueReceive+0x1bc>)
 8003a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	e780      	b.n	8003916 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a16:	f000 f8a7 	bl	8003b68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a1a:	f000 fbe3 	bl	80041e4 <xTaskResumeAll>
 8003a1e:	e77a      	b.n	8003916 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a22:	f000 f8a1 	bl	8003b68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a26:	f000 fbdd 	bl	80041e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a2c:	f000 f8ee 	bl	8003c0c <prvIsQueueEmpty>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f43f af6f 	beq.w	8003916 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3730      	adds	r7, #48	; 0x30
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d14d      	bne.n	8003b0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 ffb8 	bl	80049e8 <xTaskPriorityDisinherit>
 8003a78:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	e043      	b.n	8003b0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d119      	bne.n	8003abc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6898      	ldr	r0, [r3, #8]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	461a      	mov	r2, r3
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	f002 fdb6 	bl	8006604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	441a      	add	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d32b      	bcc.n	8003b0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	e026      	b.n	8003b0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68d8      	ldr	r0, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	f002 fd9c 	bl	8006604 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	425b      	negs	r3, r3
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d207      	bcs.n	8003af8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	425b      	negs	r3, r3
 8003af2:	441a      	add	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d105      	bne.n	8003b0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b12:	697b      	ldr	r3, [r7, #20]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d018      	beq.n	8003b60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	441a      	add	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d303      	bcc.n	8003b50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68d9      	ldr	r1, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	461a      	mov	r2, r3
 8003b5a:	6838      	ldr	r0, [r7, #0]
 8003b5c:	f002 fd52 	bl	8006604 <memcpy>
	}
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b70:	f001 fbfc 	bl	800536c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b7c:	e011      	b.n	8003ba2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d012      	beq.n	8003bac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3324      	adds	r3, #36	; 0x24
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fd48 	bl	8004620 <xTaskRemoveFromEventList>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b96:	f000 fe1f 	bl	80047d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	dce9      	bgt.n	8003b7e <prvUnlockQueue+0x16>
 8003baa:	e000      	b.n	8003bae <prvUnlockQueue+0x46>
					break;
 8003bac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	22ff      	movs	r2, #255	; 0xff
 8003bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003bb6:	f001 fc09 	bl	80053cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bba:	f001 fbd7 	bl	800536c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bc6:	e011      	b.n	8003bec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d012      	beq.n	8003bf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3310      	adds	r3, #16
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fd23 	bl	8004620 <xTaskRemoveFromEventList>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003be0:	f000 fdfa 	bl	80047d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	dce9      	bgt.n	8003bc8 <prvUnlockQueue+0x60>
 8003bf4:	e000      	b.n	8003bf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003bf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	22ff      	movs	r2, #255	; 0xff
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c00:	f001 fbe4 	bl	80053cc <vPortExitCritical>
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c14:	f001 fbaa 	bl	800536c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e001      	b.n	8003c2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 fbcf 	bl	80053cc <vPortExitCritical>

	return xReturn;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c40:	f001 fb94 	bl	800536c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d102      	bne.n	8003c56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e001      	b.n	8003c5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c5a:	f001 fbb7 	bl	80053cc <vPortExitCritical>

	return xReturn;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e014      	b.n	8003ca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c78:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <vQueueAddToRegistry+0x4c>)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c84:	490b      	ldr	r1, [pc, #44]	; (8003cb4 <vQueueAddToRegistry+0x4c>)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c8e:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <vQueueAddToRegistry+0x4c>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c9a:	e006      	b.n	8003caa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b07      	cmp	r3, #7
 8003ca6:	d9e7      	bls.n	8003c78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	200008b0 	.word	0x200008b0

08003cb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003cc8:	f001 fb50 	bl	800536c <vPortEnterCritical>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d103      	bne.n	8003ce2 <vQueueWaitForMessageRestricted+0x2a>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce8:	b25b      	sxtb	r3, r3
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d103      	bne.n	8003cf8 <vQueueWaitForMessageRestricted+0x40>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf8:	f001 fb68 	bl	80053cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fc5b 	bl	80045c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f7ff ff28 	bl	8003b68 <prvUnlockQueue>
	}
 8003d18:	bf00      	nop
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	; 0x38
 8003d24:	af04      	add	r7, sp, #16
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	623b      	str	r3, [r7, #32]
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	61fb      	str	r3, [r7, #28]
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d66:	23bc      	movs	r3, #188	; 0xbc
 8003d68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2bbc      	cmp	r3, #188	; 0xbc
 8003d6e:	d00a      	beq.n	8003d86 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	61bb      	str	r3, [r7, #24]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01e      	beq.n	8003dca <xTaskCreateStatic+0xaa>
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01b      	beq.n	8003dca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003da4:	2300      	movs	r3, #0
 8003da6:	9303      	str	r3, [sp, #12]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	9302      	str	r3, [sp, #8]
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f851 	bl	8003e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dc4:	f000 f8ec 	bl	8003fa0 <prvAddNewTaskToReadyList>
 8003dc8:	e001      	b.n	8003dce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dce:	697b      	ldr	r3, [r7, #20]
	}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3728      	adds	r7, #40	; 0x28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	; 0x30
 8003ddc:	af04      	add	r7, sp, #16
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fbbd 	bl	800556c <pvPortMalloc>
 8003df2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00e      	beq.n	8003e18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003dfa:	20bc      	movs	r0, #188	; 0xbc
 8003dfc:	f001 fbb6 	bl	800556c <pvPortMalloc>
 8003e00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e0e:	e005      	b.n	8003e1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e10:	6978      	ldr	r0, [r7, #20]
 8003e12:	f001 fc6f 	bl	80056f4 <vPortFree>
 8003e16:	e001      	b.n	8003e1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d017      	beq.n	8003e52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9303      	str	r3, [sp, #12]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	9302      	str	r3, [sp, #8]
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f80f 	bl	8003e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e46:	69f8      	ldr	r0, [r7, #28]
 8003e48:	f000 f8aa 	bl	8003fa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e002      	b.n	8003e58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e58:	69bb      	ldr	r3, [r7, #24]
	}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	21a5      	movs	r1, #165	; 0xa5
 8003e7e:	f002 fbcf 	bl	8006620 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	617b      	str	r3, [r7, #20]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	e012      	b.n	8003ee8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	7819      	ldrb	r1, [r3, #0]
 8003eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	3334      	adds	r3, #52	; 0x34
 8003ed2:	460a      	mov	r2, r1
 8003ed4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d9e9      	bls.n	8003ec2 <prvInitialiseNewTask+0x5e>
 8003eee:	e000      	b.n	8003ef2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003ef0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	2b37      	cmp	r3, #55	; 0x37
 8003efe:	d901      	bls.n	8003f04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f00:	2337      	movs	r3, #55	; 0x37
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	2200      	movs	r2, #0
 8003f14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff f98b 	bl	8003236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	3318      	adds	r3, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff f986 	bl	8003236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	3354      	adds	r3, #84	; 0x54
 8003f54:	2260      	movs	r2, #96	; 0x60
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f002 fb61 	bl	8006620 <memset>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <prvInitialiseNewTask+0x130>)
 8003f62:	659a      	str	r2, [r3, #88]	; 0x58
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <prvInitialiseNewTask+0x134>)
 8003f68:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <prvInitialiseNewTask+0x138>)
 8003f6e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	69b8      	ldr	r0, [r7, #24]
 8003f76:	f001 f90b 	bl	8005190 <pxPortInitialiseStack>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f8c:	bf00      	nop
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	0800729c 	.word	0x0800729c
 8003f98:	080072bc 	.word	0x080072bc
 8003f9c:	0800727c 	.word	0x0800727c

08003fa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fa8:	f001 f9e0 	bl	800536c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fac:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <prvAddNewTaskToReadyList+0xc4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <prvAddNewTaskToReadyList+0xc4>)
 8003fb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fb6:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <prvAddNewTaskToReadyList+0xc8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fbe:	4a2a      	ldr	r2, [pc, #168]	; (8004068 <prvAddNewTaskToReadyList+0xc8>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <prvAddNewTaskToReadyList+0xc4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d110      	bne.n	8003fee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fcc:	f000 fc28 	bl	8004820 <prvInitialiseTaskLists>
 8003fd0:	e00d      	b.n	8003fee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fd2:	4b26      	ldr	r3, [pc, #152]	; (800406c <prvAddNewTaskToReadyList+0xcc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <prvAddNewTaskToReadyList+0xc8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d802      	bhi.n	8003fee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <prvAddNewTaskToReadyList+0xc8>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <prvAddNewTaskToReadyList+0xd0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <prvAddNewTaskToReadyList+0xd0>)
 8003ff6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <prvAddNewTaskToReadyList+0xd0>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <prvAddNewTaskToReadyList+0xd4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d903      	bls.n	8004014 <prvAddNewTaskToReadyList+0x74>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	4a18      	ldr	r2, [pc, #96]	; (8004074 <prvAddNewTaskToReadyList+0xd4>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <prvAddNewTaskToReadyList+0xd8>)
 8004022:	441a      	add	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f7ff f90f 	bl	800324e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004030:	f001 f9cc 	bl	80053cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <prvAddNewTaskToReadyList+0xcc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00e      	beq.n	800405a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <prvAddNewTaskToReadyList+0xc8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	429a      	cmp	r2, r3
 8004048:	d207      	bcs.n	800405a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <prvAddNewTaskToReadyList+0xdc>)
 800404c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000dc4 	.word	0x20000dc4
 8004068:	200008f0 	.word	0x200008f0
 800406c:	20000dd0 	.word	0x20000dd0
 8004070:	20000de0 	.word	0x20000de0
 8004074:	20000dcc 	.word	0x20000dcc
 8004078:	200008f4 	.word	0x200008f4
 800407c:	e000ed04 	.word	0xe000ed04

08004080 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d017      	beq.n	80040c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <vTaskDelay+0x60>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <vTaskDelay+0x30>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60bb      	str	r3, [r7, #8]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040b0:	f000 f88a 	bl	80041c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040b4:	2100      	movs	r1, #0
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fd04 	bl	8004ac4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040bc:	f000 f892 	bl	80041e4 <xTaskResumeAll>
 80040c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <vTaskDelay+0x64>)
 80040ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000dec 	.word	0x20000dec
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040f6:	463a      	mov	r2, r7
 80040f8:	1d39      	adds	r1, r7, #4
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff f848 	bl	8003194 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	9202      	str	r2, [sp, #8]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	460a      	mov	r2, r1
 8004116:	4924      	ldr	r1, [pc, #144]	; (80041a8 <vTaskStartScheduler+0xc0>)
 8004118:	4824      	ldr	r0, [pc, #144]	; (80041ac <vTaskStartScheduler+0xc4>)
 800411a:	f7ff fe01 	bl	8003d20 <xTaskCreateStatic>
 800411e:	4603      	mov	r3, r0
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <vTaskStartScheduler+0xc8>)
 8004122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004124:	4b22      	ldr	r3, [pc, #136]	; (80041b0 <vTaskStartScheduler+0xc8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800412c:	2301      	movs	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e001      	b.n	8004136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d102      	bne.n	8004142 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800413c:	f000 fd16 	bl	8004b6c <xTimerCreateTimerTask>
 8004140:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d11b      	bne.n	8004180 <vTaskStartScheduler+0x98>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	613b      	str	r3, [r7, #16]
}
 800415a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <vTaskStartScheduler+0xcc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3354      	adds	r3, #84	; 0x54
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <vTaskStartScheduler+0xd0>)
 8004164:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <vTaskStartScheduler+0xd4>)
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <vTaskStartScheduler+0xd8>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <vTaskStartScheduler+0xdc>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800417a:	f001 f885 	bl	8005288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800417e:	e00e      	b.n	800419e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d10a      	bne.n	800419e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	60fb      	str	r3, [r7, #12]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <vTaskStartScheduler+0xb4>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	08007100 	.word	0x08007100
 80041ac:	080047f1 	.word	0x080047f1
 80041b0:	20000de8 	.word	0x20000de8
 80041b4:	200008f0 	.word	0x200008f0
 80041b8:	20000018 	.word	0x20000018
 80041bc:	20000de4 	.word	0x20000de4
 80041c0:	20000dd0 	.word	0x20000dd0
 80041c4:	20000dc8 	.word	0x20000dc8

080041c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <vTaskSuspendAll+0x18>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	4a03      	ldr	r2, [pc, #12]	; (80041e0 <vTaskSuspendAll+0x18>)
 80041d4:	6013      	str	r3, [r2, #0]
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000dec 	.word	0x20000dec

080041e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041f2:	4b42      	ldr	r3, [pc, #264]	; (80042fc <xTaskResumeAll+0x118>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <xTaskResumeAll+0x2c>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	603b      	str	r3, [r7, #0]
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004210:	f001 f8ac 	bl	800536c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004214:	4b39      	ldr	r3, [pc, #228]	; (80042fc <xTaskResumeAll+0x118>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	4a38      	ldr	r2, [pc, #224]	; (80042fc <xTaskResumeAll+0x118>)
 800421c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <xTaskResumeAll+0x118>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d162      	bne.n	80042ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004226:	4b36      	ldr	r3, [pc, #216]	; (8004300 <xTaskResumeAll+0x11c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d05e      	beq.n	80042ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800422e:	e02f      	b.n	8004290 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <xTaskResumeAll+0x120>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3318      	adds	r3, #24
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f861 	bl	8003304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f85c 	bl	8003304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <xTaskResumeAll+0x124>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d903      	bls.n	8004260 <xTaskResumeAll+0x7c>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <xTaskResumeAll+0x124>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a27      	ldr	r2, [pc, #156]	; (800430c <xTaskResumeAll+0x128>)
 800426e:	441a      	add	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fe ffe9 	bl	800324e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <xTaskResumeAll+0x12c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <xTaskResumeAll+0x130>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <xTaskResumeAll+0x120>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1cb      	bne.n	8004230 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800429e:	f000 fb61 	bl	8004964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <xTaskResumeAll+0x134>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d010      	beq.n	80042d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042ae:	f000 f845 	bl	800433c <xTaskIncrementTick>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <xTaskResumeAll+0x130>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f1      	bne.n	80042ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <xTaskResumeAll+0x134>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <xTaskResumeAll+0x130>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <xTaskResumeAll+0x138>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042ec:	f001 f86e 	bl	80053cc <vPortExitCritical>

	return xAlreadyYielded;
 80042f0:	68bb      	ldr	r3, [r7, #8]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000dec 	.word	0x20000dec
 8004300:	20000dc4 	.word	0x20000dc4
 8004304:	20000d84 	.word	0x20000d84
 8004308:	20000dcc 	.word	0x20000dcc
 800430c:	200008f4 	.word	0x200008f4
 8004310:	200008f0 	.word	0x200008f0
 8004314:	20000dd8 	.word	0x20000dd8
 8004318:	20000dd4 	.word	0x20000dd4
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004326:	4b04      	ldr	r3, [pc, #16]	; (8004338 <xTaskGetTickCount+0x18>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800432c:	687b      	ldr	r3, [r7, #4]
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	20000dc8 	.word	0x20000dc8

0800433c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004346:	4b51      	ldr	r3, [pc, #324]	; (800448c <xTaskIncrementTick+0x150>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 808e 	bne.w	800446c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004350:	4b4f      	ldr	r3, [pc, #316]	; (8004490 <xTaskIncrementTick+0x154>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004358:	4a4d      	ldr	r2, [pc, #308]	; (8004490 <xTaskIncrementTick+0x154>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d120      	bne.n	80043a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <xTaskIncrementTick+0x158>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <xTaskIncrementTick+0x48>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	603b      	str	r3, [r7, #0]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <xTaskIncrementTick+0x46>
 8004384:	4b43      	ldr	r3, [pc, #268]	; (8004494 <xTaskIncrementTick+0x158>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b43      	ldr	r3, [pc, #268]	; (8004498 <xTaskIncrementTick+0x15c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a41      	ldr	r2, [pc, #260]	; (8004494 <xTaskIncrementTick+0x158>)
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4a41      	ldr	r2, [pc, #260]	; (8004498 <xTaskIncrementTick+0x15c>)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4b40      	ldr	r3, [pc, #256]	; (800449c <xTaskIncrementTick+0x160>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	4a3f      	ldr	r2, [pc, #252]	; (800449c <xTaskIncrementTick+0x160>)
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	f000 fadf 	bl	8004964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043a6:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <xTaskIncrementTick+0x164>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d34e      	bcc.n	800444e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b0:	4b38      	ldr	r3, [pc, #224]	; (8004494 <xTaskIncrementTick+0x158>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <xTaskIncrementTick+0x82>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <xTaskIncrementTick+0x84>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c4:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <xTaskIncrementTick+0x164>)
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	601a      	str	r2, [r3, #0]
					break;
 80043cc:	e03f      	b.n	800444e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <xTaskIncrementTick+0x158>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d203      	bcs.n	80043ee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043e6:	4a2e      	ldr	r2, [pc, #184]	; (80044a0 <xTaskIncrementTick+0x164>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6013      	str	r3, [r2, #0]
						break;
 80043ec:	e02f      	b.n	800444e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe ff86 	bl	8003304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3318      	adds	r3, #24
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe ff7d 	bl	8003304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <xTaskIncrementTick+0x168>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d903      	bls.n	800441e <xTaskIncrementTick+0xe2>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	4a22      	ldr	r2, [pc, #136]	; (80044a4 <xTaskIncrementTick+0x168>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <xTaskIncrementTick+0x16c>)
 800442c:	441a      	add	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7fe ff0a 	bl	800324e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <xTaskIncrementTick+0x170>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	429a      	cmp	r2, r3
 8004446:	d3b3      	bcc.n	80043b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004448:	2301      	movs	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800444c:	e7b0      	b.n	80043b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <xTaskIncrementTick+0x170>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	4914      	ldr	r1, [pc, #80]	; (80044a8 <xTaskIncrementTick+0x16c>)
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d907      	bls.n	8004476 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e004      	b.n	8004476 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <xTaskIncrementTick+0x174>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <xTaskIncrementTick+0x174>)
 8004474:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004476:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <xTaskIncrementTick+0x178>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800447e:	2301      	movs	r3, #1
 8004480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004482:	697b      	ldr	r3, [r7, #20]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000dec 	.word	0x20000dec
 8004490:	20000dc8 	.word	0x20000dc8
 8004494:	20000d7c 	.word	0x20000d7c
 8004498:	20000d80 	.word	0x20000d80
 800449c:	20000ddc 	.word	0x20000ddc
 80044a0:	20000de4 	.word	0x20000de4
 80044a4:	20000dcc 	.word	0x20000dcc
 80044a8:	200008f4 	.word	0x200008f4
 80044ac:	200008f0 	.word	0x200008f0
 80044b0:	20000dd4 	.word	0x20000dd4
 80044b4:	20000dd8 	.word	0x20000dd8

080044b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044be:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <vTaskSwitchContext+0xb0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044c6:	4b29      	ldr	r3, [pc, #164]	; (800456c <vTaskSwitchContext+0xb4>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044cc:	e046      	b.n	800455c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80044ce:	4b27      	ldr	r3, [pc, #156]	; (800456c <vTaskSwitchContext+0xb4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044d4:	4b26      	ldr	r3, [pc, #152]	; (8004570 <vTaskSwitchContext+0xb8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e010      	b.n	80044fe <vTaskSwitchContext+0x46>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	607b      	str	r3, [r7, #4]
}
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <vTaskSwitchContext+0x3e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	491d      	ldr	r1, [pc, #116]	; (8004574 <vTaskSwitchContext+0xbc>)
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0e4      	beq.n	80044dc <vTaskSwitchContext+0x24>
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <vTaskSwitchContext+0xbc>)
 800451e:	4413      	add	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3308      	adds	r3, #8
 8004534:	429a      	cmp	r2, r3
 8004536:	d104      	bne.n	8004542 <vTaskSwitchContext+0x8a>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a0b      	ldr	r2, [pc, #44]	; (8004578 <vTaskSwitchContext+0xc0>)
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <vTaskSwitchContext+0xb8>)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <vTaskSwitchContext+0xc0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3354      	adds	r3, #84	; 0x54
 8004558:	4a08      	ldr	r2, [pc, #32]	; (800457c <vTaskSwitchContext+0xc4>)
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000dec 	.word	0x20000dec
 800456c:	20000dd8 	.word	0x20000dd8
 8004570:	20000dcc 	.word	0x20000dcc
 8004574:	200008f4 	.word	0x200008f4
 8004578:	200008f0 	.word	0x200008f0
 800457c:	20000018 	.word	0x20000018

08004580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	60fb      	str	r3, [r7, #12]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045a6:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <vTaskPlaceOnEventList+0x44>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3318      	adds	r3, #24
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fe fe70 	bl	8003294 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045b4:	2101      	movs	r1, #1
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	f000 fa84 	bl	8004ac4 <prvAddCurrentTaskToDelayedList>
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	200008f0 	.word	0x200008f0

080045c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	617b      	str	r3, [r7, #20]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <vTaskPlaceOnEventListRestricted+0x54>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3318      	adds	r3, #24
 80045f6:	4619      	mov	r1, r3
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7fe fe28 	bl	800324e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004604:	f04f 33ff 	mov.w	r3, #4294967295
 8004608:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	68b8      	ldr	r0, [r7, #8]
 800460e:	f000 fa59 	bl	8004ac4 <prvAddCurrentTaskToDelayedList>
	}
 8004612:	bf00      	nop
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	200008f0 	.word	0x200008f0

08004620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60fb      	str	r3, [r7, #12]
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3318      	adds	r3, #24
 8004650:	4618      	mov	r0, r3
 8004652:	f7fe fe57 	bl	8003304 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <xTaskRemoveFromEventList+0xb0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d11d      	bne.n	800469a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fe4e 	bl	8003304 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <xTaskRemoveFromEventList+0xb4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d903      	bls.n	800467c <xTaskRemoveFromEventList+0x5c>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <xTaskRemoveFromEventList+0xb4>)
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <xTaskRemoveFromEventList+0xb8>)
 800468a:	441a      	add	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7fe fddb 	bl	800324e <vListInsertEnd>
 8004698:	e005      	b.n	80046a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	3318      	adds	r3, #24
 800469e:	4619      	mov	r1, r3
 80046a0:	480e      	ldr	r0, [pc, #56]	; (80046dc <xTaskRemoveFromEventList+0xbc>)
 80046a2:	f7fe fdd4 	bl	800324e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <xTaskRemoveFromEventList+0xc0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d905      	bls.n	80046c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <xTaskRemoveFromEventList+0xc4>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e001      	b.n	80046c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046c4:	697b      	ldr	r3, [r7, #20]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000dec 	.word	0x20000dec
 80046d4:	20000dcc 	.word	0x20000dcc
 80046d8:	200008f4 	.word	0x200008f4
 80046dc:	20000d84 	.word	0x20000d84
 80046e0:	200008f0 	.word	0x200008f0
 80046e4:	20000dd8 	.word	0x20000dd8

080046e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <vTaskInternalSetTimeOutState+0x24>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <vTaskInternalSetTimeOutState+0x28>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000ddc 	.word	0x20000ddc
 8004710:	20000dc8 	.word	0x20000dc8

08004714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	613b      	str	r3, [r7, #16]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60fb      	str	r3, [r7, #12]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004756:	f000 fe09 	bl	800536c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <xTaskCheckForTimeOut+0xbc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d102      	bne.n	800477a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e023      	b.n	80047c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <xTaskCheckForTimeOut+0xc0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d007      	beq.n	8004796 <xTaskCheckForTimeOut+0x82>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	e015      	b.n	80047c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	429a      	cmp	r2, r3
 800479e:	d20b      	bcs.n	80047b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff9b 	bl	80046e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	e004      	b.n	80047c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047be:	2301      	movs	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047c2:	f000 fe03 	bl	80053cc <vPortExitCritical>

	return xReturn;
 80047c6:	69fb      	ldr	r3, [r7, #28]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000dc8 	.word	0x20000dc8
 80047d4:	20000ddc 	.word	0x20000ddc

080047d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <vTaskMissedYield+0x14>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000dd8 	.word	0x20000dd8

080047f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047f8:	f000 f852 	bl	80048a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <prvIdleTask+0x28>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d9f9      	bls.n	80047f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <prvIdleTask+0x2c>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004814:	e7f0      	b.n	80047f8 <prvIdleTask+0x8>
 8004816:	bf00      	nop
 8004818:	200008f4 	.word	0x200008f4
 800481c:	e000ed04 	.word	0xe000ed04

08004820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	e00c      	b.n	8004846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4a12      	ldr	r2, [pc, #72]	; (8004880 <prvInitialiseTaskLists+0x60>)
 8004838:	4413      	add	r3, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe fcdc 	bl	80031f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3301      	adds	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b37      	cmp	r3, #55	; 0x37
 800484a:	d9ef      	bls.n	800482c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800484c:	480d      	ldr	r0, [pc, #52]	; (8004884 <prvInitialiseTaskLists+0x64>)
 800484e:	f7fe fcd3 	bl	80031f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004852:	480d      	ldr	r0, [pc, #52]	; (8004888 <prvInitialiseTaskLists+0x68>)
 8004854:	f7fe fcd0 	bl	80031f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004858:	480c      	ldr	r0, [pc, #48]	; (800488c <prvInitialiseTaskLists+0x6c>)
 800485a:	f7fe fccd 	bl	80031f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800485e:	480c      	ldr	r0, [pc, #48]	; (8004890 <prvInitialiseTaskLists+0x70>)
 8004860:	f7fe fcca 	bl	80031f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004864:	480b      	ldr	r0, [pc, #44]	; (8004894 <prvInitialiseTaskLists+0x74>)
 8004866:	f7fe fcc7 	bl	80031f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvInitialiseTaskLists+0x78>)
 800486c:	4a05      	ldr	r2, [pc, #20]	; (8004884 <prvInitialiseTaskLists+0x64>)
 800486e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <prvInitialiseTaskLists+0x7c>)
 8004872:	4a05      	ldr	r2, [pc, #20]	; (8004888 <prvInitialiseTaskLists+0x68>)
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200008f4 	.word	0x200008f4
 8004884:	20000d54 	.word	0x20000d54
 8004888:	20000d68 	.word	0x20000d68
 800488c:	20000d84 	.word	0x20000d84
 8004890:	20000d98 	.word	0x20000d98
 8004894:	20000db0 	.word	0x20000db0
 8004898:	20000d7c 	.word	0x20000d7c
 800489c:	20000d80 	.word	0x20000d80

080048a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048a6:	e019      	b.n	80048dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048a8:	f000 fd60 	bl	800536c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048ac:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <prvCheckTasksWaitingTermination+0x50>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fd23 	bl	8003304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <prvCheckTasksWaitingTermination+0x54>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	4a0b      	ldr	r2, [pc, #44]	; (80048f4 <prvCheckTasksWaitingTermination+0x54>)
 80048c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <prvCheckTasksWaitingTermination+0x58>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <prvCheckTasksWaitingTermination+0x58>)
 80048d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048d2:	f000 fd7b 	bl	80053cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f810 	bl	80048fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <prvCheckTasksWaitingTermination+0x58>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e1      	bne.n	80048a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000d98 	.word	0x20000d98
 80048f4:	20000dc4 	.word	0x20000dc4
 80048f8:	20000dac 	.word	0x20000dac

080048fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3354      	adds	r3, #84	; 0x54
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fff1 	bl	80068f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fee9 	bl	80056f4 <vPortFree>
				vPortFree( pxTCB );
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fee6 	bl	80056f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004928:	e018      	b.n	800495c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004930:	2b01      	cmp	r3, #1
 8004932:	d103      	bne.n	800493c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fedd 	bl	80056f4 <vPortFree>
	}
 800493a:	e00f      	b.n	800495c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004942:	2b02      	cmp	r3, #2
 8004944:	d00a      	beq.n	800495c <prvDeleteTCB+0x60>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60fb      	str	r3, [r7, #12]
}
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <prvDeleteTCB+0x5e>
	}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496a:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <prvResetNextTaskUnblockTime+0x40>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <prvResetNextTaskUnblockTime+0x14>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <prvResetNextTaskUnblockTime+0x16>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <prvResetNextTaskUnblockTime+0x44>)
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004986:	e008      	b.n	800499a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <prvResetNextTaskUnblockTime+0x40>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <prvResetNextTaskUnblockTime+0x44>)
 8004998:	6013      	str	r3, [r2, #0]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20000d7c 	.word	0x20000d7c
 80049a8:	20000de4 	.word	0x20000de4

080049ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <xTaskGetSchedulerState+0x34>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049ba:	2301      	movs	r3, #1
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	e008      	b.n	80049d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <xTaskGetSchedulerState+0x38>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049c8:	2302      	movs	r3, #2
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e001      	b.n	80049d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049d2:	687b      	ldr	r3, [r7, #4]
	}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000dd0 	.word	0x20000dd0
 80049e4:	20000dec 	.word	0x20000dec

080049e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d056      	beq.n	8004aac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049fe:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <xTaskPriorityDisinherit+0xd0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d00a      	beq.n	8004a1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	60bb      	str	r3, [r7, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d02c      	beq.n	8004aac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d128      	bne.n	8004aac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fc50 	bl	8003304 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <xTaskPriorityDisinherit+0xd4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d903      	bls.n	8004a8c <xTaskPriorityDisinherit+0xa4>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <xTaskPriorityDisinherit+0xd4>)
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <xTaskPriorityDisinherit+0xd8>)
 8004a9a:	441a      	add	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe fbd3 	bl	800324e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004aac:	697b      	ldr	r3, [r7, #20]
	}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200008f0 	.word	0x200008f0
 8004abc:	20000dcc 	.word	0x20000dcc
 8004ac0:	200008f4 	.word	0x200008f4

08004ac4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ad4:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fc12 	bl	8003304 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d10a      	bne.n	8004afe <prvAddCurrentTaskToDelayedList+0x3a>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4819      	ldr	r0, [pc, #100]	; (8004b5c <prvAddCurrentTaskToDelayedList+0x98>)
 8004af8:	f7fe fba9 	bl	800324e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004afc:	e026      	b.n	8004b4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d209      	bcs.n	8004b2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b16:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f7fe fbb6 	bl	8003294 <vListInsert>
}
 8004b28:	e010      	b.n	8004b4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f7fe fbac 	bl	8003294 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d202      	bcs.n	8004b4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6013      	str	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000dc8 	.word	0x20000dc8
 8004b58:	200008f0 	.word	0x200008f0
 8004b5c:	20000db0 	.word	0x20000db0
 8004b60:	20000d80 	.word	0x20000d80
 8004b64:	20000d7c 	.word	0x20000d7c
 8004b68:	20000de4 	.word	0x20000de4

08004b6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b76:	f000 facb 	bl	8005110 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b7a:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <xTimerCreateTimerTask+0x80>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d021      	beq.n	8004bc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b8a:	1d3a      	adds	r2, r7, #4
 8004b8c:	f107 0108 	add.w	r1, r7, #8
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fe fb15 	bl	80031c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	9202      	str	r2, [sp, #8]
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	460a      	mov	r2, r1
 8004bac:	4910      	ldr	r1, [pc, #64]	; (8004bf0 <xTimerCreateTimerTask+0x84>)
 8004bae:	4811      	ldr	r0, [pc, #68]	; (8004bf4 <xTimerCreateTimerTask+0x88>)
 8004bb0:	f7ff f8b6 	bl	8003d20 <xTaskCreateStatic>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4a10      	ldr	r2, [pc, #64]	; (8004bf8 <xTimerCreateTimerTask+0x8c>)
 8004bb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bba:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <xTimerCreateTimerTask+0x8c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	613b      	str	r3, [r7, #16]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004be2:	697b      	ldr	r3, [r7, #20]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000e20 	.word	0x20000e20
 8004bf0:	08007108 	.word	0x08007108
 8004bf4:	08004d19 	.word	0x08004d19
 8004bf8:	20000e24 	.word	0x20000e24

08004bfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	623b      	str	r3, [r7, #32]
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c2a:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <xTimerGenericCommand+0x98>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02a      	beq.n	8004c88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b05      	cmp	r3, #5
 8004c42:	dc18      	bgt.n	8004c76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c44:	f7ff feb2 	bl	80049ac <xTaskGetSchedulerState>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d109      	bne.n	8004c62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <xTimerGenericCommand+0x98>)
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	f107 0110 	add.w	r1, r7, #16
 8004c56:	2300      	movs	r3, #0
 8004c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5a:	f7fe fc7f 	bl	800355c <xQueueGenericSend>
 8004c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c60:	e012      	b.n	8004c88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <xTimerGenericCommand+0x98>)
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	f107 0110 	add.w	r1, r7, #16
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f7fe fc75 	bl	800355c <xQueueGenericSend>
 8004c72:	6278      	str	r0, [r7, #36]	; 0x24
 8004c74:	e008      	b.n	8004c88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <xTimerGenericCommand+0x98>)
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	f107 0110 	add.w	r1, r7, #16
 8004c7e:	2300      	movs	r3, #0
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	f7fe fd69 	bl	8003758 <xQueueGenericSendFromISR>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3728      	adds	r7, #40	; 0x28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000e20 	.word	0x20000e20

08004c98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <prvProcessExpiredTimer+0x7c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe fb27 	bl	8003304 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d122      	bne.n	8004d04 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	18d1      	adds	r1, r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	6978      	ldr	r0, [r7, #20]
 8004ccc:	f000 f8c8 	bl	8004e60 <prvInsertTimerInActiveList>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	2100      	movs	r1, #0
 8004ce0:	6978      	ldr	r0, [r7, #20]
 8004ce2:	f7ff ff8b 	bl	8004bfc <xTimerGenericCommand>
 8004ce6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60fb      	str	r3, [r7, #12]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	6978      	ldr	r0, [r7, #20]
 8004d0a:	4798      	blx	r3
}
 8004d0c:	bf00      	nop
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000e18 	.word	0x20000e18

08004d18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d20:	f107 0308 	add.w	r3, r7, #8
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f857 	bl	8004dd8 <prvGetNextExpireTime>
 8004d2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f803 	bl	8004d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d36:	f000 f8d5 	bl	8004ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d3a:	e7f1      	b.n	8004d20 <prvTimerTask+0x8>

08004d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d46:	f7ff fa3f 	bl	80041c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f866 	bl	8004e20 <prvSampleTimeNow>
 8004d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d130      	bne.n	8004dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <prvProcessTimerOrBlockTask+0x3c>
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d806      	bhi.n	8004d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d6a:	f7ff fa3b 	bl	80041e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff ff91 	bl	8004c98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d76:	e024      	b.n	8004dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <prvProcessTimerOrBlockTask+0x90>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <prvProcessTimerOrBlockTask+0x94>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	f7fe ff8b 	bl	8003cb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004da2:	f7ff fa1f 	bl	80041e4 <xTaskResumeAll>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <prvProcessTimerOrBlockTask+0x98>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
}
 8004dbc:	e001      	b.n	8004dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dbe:	f7ff fa11 	bl	80041e4 <xTaskResumeAll>
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000e1c 	.word	0x20000e1c
 8004dd0:	20000e20 	.word	0x20000e20
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <prvGetNextExpireTime+0x44>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <prvGetNextExpireTime+0x44>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e001      	b.n	8004e0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000e18 	.word	0x20000e18

08004e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e28:	f7ff fa7a 	bl	8004320 <xTaskGetTickCount>
 8004e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <prvSampleTimeNow+0x3c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d205      	bcs.n	8004e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e38:	f000 f908 	bl	800504c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e002      	b.n	8004e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e4a:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <prvSampleTimeNow+0x3c>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000e28 	.word	0x20000e28

08004e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d812      	bhi.n	8004eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d302      	bcc.n	8004e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e94:	2301      	movs	r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e01b      	b.n	8004ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <prvInsertTimerInActiveList+0x7c>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f7fe f9f5 	bl	8003294 <vListInsert>
 8004eaa:	e012      	b.n	8004ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d206      	bcs.n	8004ec2 <prvInsertTimerInActiveList+0x62>
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e007      	b.n	8004ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <prvInsertTimerInActiveList+0x80>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fe f9e1 	bl	8003294 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000e1c 	.word	0x20000e1c
 8004ee0:	20000e18 	.word	0x20000e18

08004ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eea:	e09d      	b.n	8005028 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	da18      	bge.n	8004f24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	61fb      	str	r3, [r7, #28]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1a:	6850      	ldr	r0, [r2, #4]
 8004f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1e:	6892      	ldr	r2, [r2, #8]
 8004f20:	4611      	mov	r1, r2
 8004f22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	db7d      	blt.n	8005026 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe f9e2 	bl	8003304 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f40:	463b      	mov	r3, r7
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff ff6c 	bl	8004e20 <prvSampleTimeNow>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d86b      	bhi.n	8005028 <prvProcessReceivedCommands+0x144>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <prvProcessReceivedCommands+0x74>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f81 	.word	0x08004f81
 8004f60:	08004f81 	.word	0x08004f81
 8004f64:	08005029 	.word	0x08005029
 8004f68:	08004fdd 	.word	0x08004fdd
 8004f6c:	08005015 	.word	0x08005015
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f81 	.word	0x08004f81
 8004f78:	08005029 	.word	0x08005029
 8004f7c:	08004fdd 	.word	0x08004fdd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	18d1      	adds	r1, r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8e:	f7ff ff67 	bl	8004e60 <prvInsertTimerInActiveList>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d047      	beq.n	8005028 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d13f      	bne.n	8005028 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	441a      	add	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fba:	f7ff fe1f 	bl	8004bfc <xTimerGenericCommand>
 8004fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d130      	bne.n	8005028 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	61bb      	str	r3, [r7, #24]
}
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	617b      	str	r3, [r7, #20]
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	18d1      	adds	r1, r2, r3
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800500e:	f7ff ff27 	bl	8004e60 <prvInsertTimerInActiveList>
					break;
 8005012:	e009      	b.n	8005028 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800501e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005020:	f000 fb68 	bl	80056f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005024:	e000      	b.n	8005028 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005026:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <prvProcessReceivedCommands+0x164>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	1d39      	adds	r1, r7, #4
 800502e:	2200      	movs	r2, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe fc29 	bl	8003888 <xQueueReceive>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	f47f af57 	bne.w	8004eec <prvProcessReceivedCommands+0x8>
	}
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	3730      	adds	r7, #48	; 0x30
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20000e20 	.word	0x20000e20

0800504c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005052:	e045      	b.n	80050e0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005054:	4b2c      	ldr	r3, [pc, #176]	; (8005108 <prvSwitchTimerLists+0xbc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800505e:	4b2a      	ldr	r3, [pc, #168]	; (8005108 <prvSwitchTimerLists+0xbc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3304      	adds	r3, #4
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe f949 	bl	8003304 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d12e      	bne.n	80050e0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d90e      	bls.n	80050b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <prvSwitchTimerLists+0xbc>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fe f8f2 	bl	8003294 <vListInsert>
 80050b0:	e016      	b.n	80050e0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050b2:	2300      	movs	r3, #0
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	2300      	movs	r3, #0
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	2100      	movs	r1, #0
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fd9d 	bl	8004bfc <xTimerGenericCommand>
 80050c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	603b      	str	r3, [r7, #0]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <prvSwitchTimerLists+0xbc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1b4      	bne.n	8005054 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <prvSwitchTimerLists+0xbc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <prvSwitchTimerLists+0xc0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a04      	ldr	r2, [pc, #16]	; (8005108 <prvSwitchTimerLists+0xbc>)
 80050f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050f8:	4a04      	ldr	r2, [pc, #16]	; (800510c <prvSwitchTimerLists+0xc0>)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	6013      	str	r3, [r2, #0]
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000e18 	.word	0x20000e18
 800510c:	20000e1c 	.word	0x20000e1c

08005110 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005116:	f000 f929 	bl	800536c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <prvCheckForValidListAndQueue+0x60>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d120      	bne.n	8005164 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005122:	4814      	ldr	r0, [pc, #80]	; (8005174 <prvCheckForValidListAndQueue+0x64>)
 8005124:	f7fe f868 	bl	80031f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005128:	4813      	ldr	r0, [pc, #76]	; (8005178 <prvCheckForValidListAndQueue+0x68>)
 800512a:	f7fe f865 	bl	80031f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <prvCheckForValidListAndQueue+0x6c>)
 8005130:	4a10      	ldr	r2, [pc, #64]	; (8005174 <prvCheckForValidListAndQueue+0x64>)
 8005132:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <prvCheckForValidListAndQueue+0x70>)
 8005136:	4a10      	ldr	r2, [pc, #64]	; (8005178 <prvCheckForValidListAndQueue+0x68>)
 8005138:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800513a:	2300      	movs	r3, #0
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	4b11      	ldr	r3, [pc, #68]	; (8005184 <prvCheckForValidListAndQueue+0x74>)
 8005140:	4a11      	ldr	r2, [pc, #68]	; (8005188 <prvCheckForValidListAndQueue+0x78>)
 8005142:	2110      	movs	r1, #16
 8005144:	200a      	movs	r0, #10
 8005146:	f7fe f96f 	bl	8003428 <xQueueGenericCreateStatic>
 800514a:	4603      	mov	r3, r0
 800514c:	4a08      	ldr	r2, [pc, #32]	; (8005170 <prvCheckForValidListAndQueue+0x60>)
 800514e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <prvCheckForValidListAndQueue+0x60>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <prvCheckForValidListAndQueue+0x60>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	490b      	ldr	r1, [pc, #44]	; (800518c <prvCheckForValidListAndQueue+0x7c>)
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fd82 	bl	8003c68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005164:	f000 f932 	bl	80053cc <vPortExitCritical>
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000e20 	.word	0x20000e20
 8005174:	20000df0 	.word	0x20000df0
 8005178:	20000e04 	.word	0x20000e04
 800517c:	20000e18 	.word	0x20000e18
 8005180:	20000e1c 	.word	0x20000e1c
 8005184:	20000ecc 	.word	0x20000ecc
 8005188:	20000e2c 	.word	0x20000e2c
 800518c:	08007110 	.word	0x08007110

08005190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b04      	subs	r3, #4
 80051a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b04      	subs	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3b04      	subs	r3, #4
 80051be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <pxPortInitialiseStack+0x54>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3b14      	subs	r3, #20
 80051ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3b20      	subs	r3, #32
 80051d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051d8:	68fb      	ldr	r3, [r7, #12]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	080051e9 	.word	0x080051e9

080051e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <prvTaskExitError+0x54>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d00a      	beq.n	8005212 <prvTaskExitError+0x2a>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <prvTaskExitError+0x28>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60bb      	str	r3, [r7, #8]
}
 8005224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005226:	bf00      	nop
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0fc      	beq.n	8005228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2000000c 	.word	0x2000000c

08005240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <pxCurrentTCBConst2>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800524a:	f380 8809 	msr	PSP, r0
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	f04e 0e0d 	orr.w	lr, lr, #13
 800525e:	4770      	bx	lr

08005260 <pxCurrentTCBConst2>:
 8005260:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005268:	4806      	ldr	r0, [pc, #24]	; (8005284 <prvPortStartFirstTask+0x1c>)
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f380 8808 	msr	MSP, r0
 8005272:	b662      	cpsie	i
 8005274:	b661      	cpsie	f
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	df00      	svc	0
 8005280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005282:	bf00      	nop
 8005284:	e000ed08 	.word	0xe000ed08

08005288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800528e:	4b32      	ldr	r3, [pc, #200]	; (8005358 <xPortStartScheduler+0xd0>)
 8005290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	22ff      	movs	r2, #255	; 0xff
 800529e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	4b2a      	ldr	r3, [pc, #168]	; (800535c <xPortStartScheduler+0xd4>)
 80052b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052b6:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <xPortStartScheduler+0xd8>)
 80052b8:	2207      	movs	r2, #7
 80052ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052bc:	e009      	b.n	80052d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <xPortStartScheduler+0xd8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	4a26      	ldr	r2, [pc, #152]	; (8005360 <xPortStartScheduler+0xd8>)
 80052c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d0ef      	beq.n	80052be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <xPortStartScheduler+0xd8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f1c3 0307 	rsb	r3, r3, #7
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d00a      	beq.n	8005300 <xPortStartScheduler+0x78>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60bb      	str	r3, [r7, #8]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <xPortStartScheduler+0xd8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <xPortStartScheduler+0xd8>)
 8005308:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800530a:	4b15      	ldr	r3, [pc, #84]	; (8005360 <xPortStartScheduler+0xd8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005312:	4a13      	ldr	r2, [pc, #76]	; (8005360 <xPortStartScheduler+0xd8>)
 8005314:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <xPortStartScheduler+0xdc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a10      	ldr	r2, [pc, #64]	; (8005364 <xPortStartScheduler+0xdc>)
 8005324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <xPortStartScheduler+0xdc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <xPortStartScheduler+0xdc>)
 8005330:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005334:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005336:	f000 f8b9 	bl	80054ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <xPortStartScheduler+0xe0>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005340:	f7ff ff92 	bl	8005268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005344:	f7ff f8b8 	bl	80044b8 <vTaskSwitchContext>
	prvTaskExitError();
 8005348:	f7ff ff4e 	bl	80051e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000e400 	.word	0xe000e400
 800535c:	20000f1c 	.word	0x20000f1c
 8005360:	20000f20 	.word	0x20000f20
 8005364:	e000ed20 	.word	0xe000ed20
 8005368:	2000000c 	.word	0x2000000c

0800536c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	607b      	str	r3, [r7, #4]
}
 8005384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <vPortEnterCritical+0x58>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <vPortEnterCritical+0x58>)
 800538e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <vPortEnterCritical+0x58>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d10f      	bne.n	80053b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <vPortEnterCritical+0x5c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	603b      	str	r3, [r7, #0]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <vPortEnterCritical+0x4a>
	}
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	2000000c 	.word	0x2000000c
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <vPortExitCritical+0x4c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <vPortExitCritical+0x24>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	607b      	str	r3, [r7, #4]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <vPortExitCritical+0x4c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <vPortExitCritical+0x4c>)
 80053f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <vPortExitCritical+0x4c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <vPortExitCritical+0x42>
 8005402:	2300      	movs	r3, #0
 8005404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f383 8811 	msr	BASEPRI, r3
}
 800540c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	2000000c 	.word	0x2000000c
 800541c:	00000000 	.word	0x00000000

08005420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005420:	f3ef 8009 	mrs	r0, PSP
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <pxCurrentTCBConst>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005430:	6010      	str	r0, [r2, #0]
 8005432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005436:	f04f 0050 	mov.w	r0, #80	; 0x50
 800543a:	f380 8811 	msr	BASEPRI, r0
 800543e:	f7ff f83b 	bl	80044b8 <vTaskSwitchContext>
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f380 8811 	msr	BASEPRI, r0
 800544a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	6808      	ldr	r0, [r1, #0]
 8005452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005456:	f380 8809 	msr	PSP, r0
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	4770      	bx	lr

08005460 <pxCurrentTCBConst>:
 8005460:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005482:	f7fe ff5b 	bl	800433c <xTaskIncrementTick>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <SysTick_Handler+0x40>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <vPortSetupTimerInterrupt+0x30>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <vPortSetupTimerInterrupt+0x34>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <vPortSetupTimerInterrupt+0x38>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <vPortSetupTimerInterrupt+0x3c>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <vPortSetupTimerInterrupt+0x40>)
 80054ca:	3b01      	subs	r3, #1
 80054cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ce:	4b03      	ldr	r3, [pc, #12]	; (80054dc <vPortSetupTimerInterrupt+0x30>)
 80054d0:	2207      	movs	r2, #7
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr
 80054dc:	e000e010 	.word	0xe000e010
 80054e0:	e000e018 	.word	0xe000e018
 80054e4:	20000000 	.word	0x20000000
 80054e8:	10624dd3 	.word	0x10624dd3
 80054ec:	e000e014 	.word	0xe000e014

080054f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d914      	bls.n	800552c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <vPortValidateInterruptPriority+0x6c>)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <vPortValidateInterruptPriority+0x70>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	7afa      	ldrb	r2, [r7, #11]
 8005512:	429a      	cmp	r2, r3
 8005514:	d20a      	bcs.n	800552c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	607b      	str	r3, [r7, #4]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <vPortValidateInterruptPriority+0x74>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <vPortValidateInterruptPriority+0x78>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d90a      	bls.n	8005552 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	603b      	str	r3, [r7, #0]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <vPortValidateInterruptPriority+0x60>
	}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	e000e3f0 	.word	0xe000e3f0
 8005560:	20000f1c 	.word	0x20000f1c
 8005564:	e000ed0c 	.word	0xe000ed0c
 8005568:	20000f20 	.word	0x20000f20

0800556c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005578:	f7fe fe26 	bl	80041c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800557c:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <pvPortMalloc+0x174>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005584:	f000 f910 	bl	80057a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005588:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <pvPortMalloc+0x178>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 808e 	bne.w	80056b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01d      	beq.n	80055d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800559c:	2208      	movs	r2, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4413      	add	r3, r2
 80055a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d014      	beq.n	80055d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f023 0307 	bic.w	r3, r3, #7
 80055b4:	3308      	adds	r3, #8
 80055b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <pvPortMalloc+0x6c>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	617b      	str	r3, [r7, #20]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d069      	beq.n	80056b2 <pvPortMalloc+0x146>
 80055de:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <pvPortMalloc+0x17c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d864      	bhi.n	80056b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055e8:	4b40      	ldr	r3, [pc, #256]	; (80056ec <pvPortMalloc+0x180>)
 80055ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055ec:	4b3f      	ldr	r3, [pc, #252]	; (80056ec <pvPortMalloc+0x180>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055f2:	e004      	b.n	80055fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <pvPortMalloc+0xa4>
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f1      	bne.n	80055f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005610:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <pvPortMalloc+0x174>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005616:	429a      	cmp	r2, r3
 8005618:	d04b      	beq.n	80056b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2208      	movs	r2, #8
 8005620:	4413      	add	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1ad2      	subs	r2, r2, r3
 8005634:	2308      	movs	r3, #8
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	429a      	cmp	r2, r3
 800563a:	d91f      	bls.n	800567c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <pvPortMalloc+0xf8>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	613b      	str	r3, [r7, #16]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005676:	69b8      	ldr	r0, [r7, #24]
 8005678:	f000 f8f8 	bl	800586c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <pvPortMalloc+0x17c>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <pvPortMalloc+0x17c>)
 8005688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <pvPortMalloc+0x17c>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <pvPortMalloc+0x184>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d203      	bcs.n	800569e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <pvPortMalloc+0x17c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <pvPortMalloc+0x184>)
 800569c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <pvPortMalloc+0x178>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056b2:	f7fe fd97 	bl	80041e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <pvPortMalloc+0x16a>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	60fb      	str	r3, [r7, #12]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <pvPortMalloc+0x168>
	return pvReturn;
 80056d6:	69fb      	ldr	r3, [r7, #28]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3728      	adds	r7, #40	; 0x28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20001b2c 	.word	0x20001b2c
 80056e4:	20001b38 	.word	0x20001b38
 80056e8:	20001b30 	.word	0x20001b30
 80056ec:	20001b24 	.word	0x20001b24
 80056f0:	20001b34 	.word	0x20001b34

080056f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d048      	beq.n	8005798 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005706:	2308      	movs	r3, #8
 8005708:	425b      	negs	r3, r3
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4413      	add	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <vPortFree+0xac>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4013      	ands	r3, r2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <vPortFree+0x44>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60fb      	str	r3, [r7, #12]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <vPortFree+0x62>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60bb      	str	r3, [r7, #8]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <vPortFree+0xac>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d019      	beq.n	8005798 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d115      	bne.n	8005798 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <vPortFree+0xac>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	43db      	mvns	r3, r3
 8005776:	401a      	ands	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800577c:	f7fe fd24 	bl	80041c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <vPortFree+0xb0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4413      	add	r3, r2
 800578a:	4a06      	ldr	r2, [pc, #24]	; (80057a4 <vPortFree+0xb0>)
 800578c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800578e:	6938      	ldr	r0, [r7, #16]
 8005790:	f000 f86c 	bl	800586c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005794:	f7fe fd26 	bl	80041e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20001b38 	.word	0x20001b38
 80057a4:	20001b30 	.word	0x20001b30

080057a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057b4:	4b27      	ldr	r3, [pc, #156]	; (8005854 <prvHeapInit+0xac>)
 80057b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3307      	adds	r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0307 	bic.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <prvHeapInit+0xac>)
 80057d8:	4413      	add	r3, r2
 80057da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057e0:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <prvHeapInit+0xb0>)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <prvHeapInit+0xb0>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057f4:	2208      	movs	r2, #8
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0307 	bic.w	r3, r3, #7
 8005802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a15      	ldr	r2, [pc, #84]	; (800585c <prvHeapInit+0xb4>)
 8005808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <prvHeapInit+0xb4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <prvHeapInit+0xb4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <prvHeapInit+0xb4>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <prvHeapInit+0xb8>)
 8005836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a09      	ldr	r2, [pc, #36]	; (8005864 <prvHeapInit+0xbc>)
 800583e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005840:	4b09      	ldr	r3, [pc, #36]	; (8005868 <prvHeapInit+0xc0>)
 8005842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000f24 	.word	0x20000f24
 8005858:	20001b24 	.word	0x20001b24
 800585c:	20001b2c 	.word	0x20001b2c
 8005860:	20001b34 	.word	0x20001b34
 8005864:	20001b30 	.word	0x20001b30
 8005868:	20001b38 	.word	0x20001b38

0800586c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005874:	4b27      	ldr	r3, [pc, #156]	; (8005914 <prvInsertBlockIntoFreeList+0xa8>)
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e002      	b.n	8005880 <prvInsertBlockIntoFreeList+0x14>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	d8f7      	bhi.n	800587a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4413      	add	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d108      	bne.n	80058ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	441a      	add	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	441a      	add	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d118      	bne.n	80058f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <prvInsertBlockIntoFreeList+0xac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d00d      	beq.n	80058ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e008      	b.n	80058fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <prvInsertBlockIntoFreeList+0xac>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e003      	b.n	80058fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	d002      	beq.n	800590a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr
 8005914:	20001b24 	.word	0x20001b24
 8005918:	20001b2c 	.word	0x20001b2c

0800591c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800591c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800591e:	2400      	movs	r4, #0
 8005920:	2310      	movs	r3, #16
 8005922:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005926:	6803      	ldr	r3, [r0, #0]
 8005928:	4615      	mov	r5, r2
 800592a:	699e      	ldr	r6, [r3, #24]
 800592c:	e9cd 4400 	strd	r4, r4, [sp]
 8005930:	466b      	mov	r3, sp
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	47b0      	blx	r6
 8005936:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800593a:	f003 0306 	and.w	r3, r3, #6
 800593e:	2b06      	cmp	r3, #6
 8005940:	bf09      	itett	eq
 8005942:	2001      	moveq	r0, #1
 8005944:	4620      	movne	r0, r4
 8005946:	9b00      	ldreq	r3, [sp, #0]
 8005948:	602b      	streq	r3, [r5, #0]
 800594a:	b004      	add	sp, #16
 800594c:	bd70      	pop	{r4, r5, r6, pc}

0800594e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800594e:	9800      	ldr	r0, [sp, #0]
 8005950:	4290      	cmp	r0, r2
 8005952:	bf14      	ite	ne
 8005954:	2001      	movne	r0, #1
 8005956:	2006      	moveq	r0, #6
 8005958:	4770      	bx	lr
	...

0800595c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4604      	mov	r4, r0
 8005960:	4b02      	ldr	r3, [pc, #8]	; (800596c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8005962:	6003      	str	r3, [r0, #0]
 8005964:	f000 fc4f 	bl	8006206 <_ZNSt9type_infoD1Ev>
 8005968:	4620      	mov	r0, r4
 800596a:	bd10      	pop	{r4, pc}
 800596c:	0800718c 	.word	0x0800718c

08005970 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005970:	b510      	push	{r4, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	f7ff fff2 	bl	800595c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005978:	4620      	mov	r0, r4
 800597a:	2108      	movs	r1, #8
 800597c:	f000 f842 	bl	8005a04 <_ZdlPvj>
 8005980:	4620      	mov	r0, r4
 8005982:	bd10      	pop	{r4, pc}

08005984 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800598c:	461f      	mov	r7, r3
 800598e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005992:	4598      	cmp	r8, r3
 8005994:	4606      	mov	r6, r0
 8005996:	4615      	mov	r5, r2
 8005998:	d107      	bne.n	80059aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800599a:	9907      	ldr	r1, [sp, #28]
 800599c:	f000 fc36 	bl	800620c <_ZNKSt9type_infoeqERKS_>
 80059a0:	b118      	cbz	r0, 80059aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80059a2:	7165      	strb	r5, [r4, #5]
 80059a4:	2000      	movs	r0, #0
 80059a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059aa:	4639      	mov	r1, r7
 80059ac:	4630      	mov	r0, r6
 80059ae:	f000 fc2d 	bl	800620c <_ZNKSt9type_infoeqERKS_>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d0f6      	beq.n	80059a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80059b6:	2301      	movs	r3, #1
 80059b8:	f8c4 8000 	str.w	r8, [r4]
 80059bc:	7125      	strb	r5, [r4, #4]
 80059be:	71a3      	strb	r3, [r4, #6]
 80059c0:	e7f0      	b.n	80059a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080059c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80059c2:	b538      	push	{r3, r4, r5, lr}
 80059c4:	4615      	mov	r5, r2
 80059c6:	461c      	mov	r4, r3
 80059c8:	f000 fc20 	bl	800620c <_ZNKSt9type_infoeqERKS_>
 80059cc:	b120      	cbz	r0, 80059d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80059ce:	2308      	movs	r3, #8
 80059d0:	60e3      	str	r3, [r4, #12]
 80059d2:	2306      	movs	r3, #6
 80059d4:	6025      	str	r5, [r4, #0]
 80059d6:	7123      	strb	r3, [r4, #4]
 80059d8:	bd38      	pop	{r3, r4, r5, pc}

080059da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80059da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	4605      	mov	r5, r0
 80059e0:	460c      	mov	r4, r1
 80059e2:	4616      	mov	r6, r2
 80059e4:	461f      	mov	r7, r3
 80059e6:	f000 fc11 	bl	800620c <_ZNKSt9type_infoeqERKS_>
 80059ea:	b948      	cbnz	r0, 8005a00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80059ec:	2f03      	cmp	r7, #3
 80059ee:	d807      	bhi.n	8005a00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	4632      	mov	r2, r6
 80059f4:	4629      	mov	r1, r5
 80059f6:	4620      	mov	r0, r4
 80059f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	4718      	bx	r3
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a04 <_ZdlPvj>:
 8005a04:	f000 bc18 	b.w	8006238 <_ZdlPv>

08005a08 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8005a0e:	4c07      	ldr	r4, [pc, #28]	; (8005a2c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8005a10:	4628      	mov	r0, r5
 8005a12:	60e5      	str	r5, [r4, #12]
 8005a14:	f000 fde6 	bl	80065e4 <malloc>
 8005a18:	60a0      	str	r0, [r4, #8]
 8005a1a:	b910      	cbnz	r0, 8005a22 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8005a1c:	60e0      	str	r0, [r4, #12]
 8005a1e:	6060      	str	r0, [r4, #4]
 8005a20:	bd38      	pop	{r3, r4, r5, pc}
 8005a22:	2300      	movs	r3, #0
 8005a24:	6060      	str	r0, [r4, #4]
 8005a26:	6005      	str	r5, [r0, #0]
 8005a28:	6043      	str	r3, [r0, #4]
 8005a2a:	e7f9      	b.n	8005a20 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8005a2c:	20001b3c 	.word	0x20001b3c

08005a30 <__cxa_end_cleanup>:
 8005a30:	b41e      	push	{r1, r2, r3, r4}
 8005a32:	f000 f89c 	bl	8005b6e <__gnu_end_cleanup>
 8005a36:	bc1e      	pop	{r1, r2, r3, r4}
 8005a38:	f7fb f91c 	bl	8000c74 <_Unwind_Resume>

08005a3c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005a3c:	7803      	ldrb	r3, [r0, #0]
 8005a3e:	2b47      	cmp	r3, #71	; 0x47
 8005a40:	d117      	bne.n	8005a72 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005a42:	7843      	ldrb	r3, [r0, #1]
 8005a44:	2b4e      	cmp	r3, #78	; 0x4e
 8005a46:	d114      	bne.n	8005a72 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005a48:	7883      	ldrb	r3, [r0, #2]
 8005a4a:	2b55      	cmp	r3, #85	; 0x55
 8005a4c:	d111      	bne.n	8005a72 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005a4e:	78c3      	ldrb	r3, [r0, #3]
 8005a50:	2b43      	cmp	r3, #67	; 0x43
 8005a52:	d10e      	bne.n	8005a72 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005a54:	7903      	ldrb	r3, [r0, #4]
 8005a56:	2b43      	cmp	r3, #67	; 0x43
 8005a58:	d10b      	bne.n	8005a72 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005a5a:	7943      	ldrb	r3, [r0, #5]
 8005a5c:	2b2b      	cmp	r3, #43	; 0x2b
 8005a5e:	d108      	bne.n	8005a72 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005a60:	7983      	ldrb	r3, [r0, #6]
 8005a62:	2b2b      	cmp	r3, #43	; 0x2b
 8005a64:	d105      	bne.n	8005a72 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005a66:	79c0      	ldrb	r0, [r0, #7]
 8005a68:	2801      	cmp	r0, #1
 8005a6a:	bf8c      	ite	hi
 8005a6c:	2000      	movhi	r0, #0
 8005a6e:	2001      	movls	r0, #1
 8005a70:	4770      	bx	lr
 8005a72:	2000      	movs	r0, #0
 8005a74:	4770      	bx	lr
	...

08005a78 <__cxa_type_match>:
 8005a78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005a7c:	461d      	mov	r5, r3
 8005a7e:	7803      	ldrb	r3, [r0, #0]
 8005a80:	460e      	mov	r6, r1
 8005a82:	2b47      	cmp	r3, #71	; 0x47
 8005a84:	4602      	mov	r2, r0
 8005a86:	79c1      	ldrb	r1, [r0, #7]
 8005a88:	d113      	bne.n	8005ab2 <__cxa_type_match+0x3a>
 8005a8a:	7843      	ldrb	r3, [r0, #1]
 8005a8c:	2b4e      	cmp	r3, #78	; 0x4e
 8005a8e:	d110      	bne.n	8005ab2 <__cxa_type_match+0x3a>
 8005a90:	7883      	ldrb	r3, [r0, #2]
 8005a92:	2b55      	cmp	r3, #85	; 0x55
 8005a94:	d10d      	bne.n	8005ab2 <__cxa_type_match+0x3a>
 8005a96:	78c3      	ldrb	r3, [r0, #3]
 8005a98:	2b43      	cmp	r3, #67	; 0x43
 8005a9a:	d10a      	bne.n	8005ab2 <__cxa_type_match+0x3a>
 8005a9c:	7903      	ldrb	r3, [r0, #4]
 8005a9e:	2b46      	cmp	r3, #70	; 0x46
 8005aa0:	d107      	bne.n	8005ab2 <__cxa_type_match+0x3a>
 8005aa2:	7943      	ldrb	r3, [r0, #5]
 8005aa4:	2b4f      	cmp	r3, #79	; 0x4f
 8005aa6:	d104      	bne.n	8005ab2 <__cxa_type_match+0x3a>
 8005aa8:	7983      	ldrb	r3, [r0, #6]
 8005aaa:	2b52      	cmp	r3, #82	; 0x52
 8005aac:	d101      	bne.n	8005ab2 <__cxa_type_match+0x3a>
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	d030      	beq.n	8005b14 <__cxa_type_match+0x9c>
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7ff ffc2 	bl	8005a3c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f080 0401 	eor.w	r4, r0, #1
 8005abe:	b2e4      	uxtb	r4, r4
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	9001      	str	r0, [sp, #4]
 8005ac4:	bb4b      	cbnz	r3, 8005b1a <__cxa_type_match+0xa2>
 8005ac6:	bb54      	cbnz	r4, 8005b1e <__cxa_type_match+0xa6>
 8005ac8:	2901      	cmp	r1, #1
 8005aca:	bf0a      	itet	eq
 8005acc:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005ad0:	f1a2 0320 	subne.w	r3, r2, #32
 8005ad4:	3b78      	subeq	r3, #120	; 0x78
 8005ad6:	2901      	cmp	r1, #1
 8005ad8:	bf0c      	ite	eq
 8005ada:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005ade:	3258      	addne	r2, #88	; 0x58
 8005ae0:	681c      	ldr	r4, [r3, #0]
 8005ae2:	9201      	str	r2, [sp, #4]
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	4798      	blx	r3
 8005aec:	b1c8      	cbz	r0, 8005b22 <__cxa_type_match+0xaa>
 8005aee:	2702      	movs	r7, #2
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	6833      	ldr	r3, [r6, #0]
 8005af8:	4621      	mov	r1, r4
 8005afa:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005afe:	4630      	mov	r0, r6
 8005b00:	2301      	movs	r3, #1
 8005b02:	aa01      	add	r2, sp, #4
 8005b04:	47c0      	blx	r8
 8005b06:	b170      	cbz	r0, 8005b26 <__cxa_type_match+0xae>
 8005b08:	9b01      	ldr	r3, [sp, #4]
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	4638      	mov	r0, r7
 8005b0e:	b002      	add	sp, #8
 8005b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b14:	2301      	movs	r3, #1
 8005b16:	460c      	mov	r4, r1
 8005b18:	e7d2      	b.n	8005ac0 <__cxa_type_match+0x48>
 8005b1a:	4c04      	ldr	r4, [pc, #16]	; (8005b2c <__cxa_type_match+0xb4>)
 8005b1c:	e7e2      	b.n	8005ae4 <__cxa_type_match+0x6c>
 8005b1e:	4c04      	ldr	r4, [pc, #16]	; (8005b30 <__cxa_type_match+0xb8>)
 8005b20:	e7e0      	b.n	8005ae4 <__cxa_type_match+0x6c>
 8005b22:	2701      	movs	r7, #1
 8005b24:	e7e7      	b.n	8005af6 <__cxa_type_match+0x7e>
 8005b26:	4607      	mov	r7, r0
 8005b28:	e7f0      	b.n	8005b0c <__cxa_type_match+0x94>
 8005b2a:	bf00      	nop
 8005b2c:	080071b0 	.word	0x080071b0
 8005b30:	080071b8 	.word	0x080071b8

08005b34 <__cxa_begin_cleanup>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	4604      	mov	r4, r0
 8005b38:	f000 f832 	bl	8005ba0 <__cxa_get_globals>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f1a4 0120 	sub.w	r1, r4, #32
 8005b44:	f7ff ff7a 	bl	8005a3c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005b48:	b160      	cbz	r0, 8005b64 <__cxa_begin_cleanup+0x30>
 8005b4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b56:	d103      	bne.n	8005b60 <__cxa_begin_cleanup+0x2c>
 8005b58:	6893      	ldr	r3, [r2, #8]
 8005b5a:	f844 3c08 	str.w	r3, [r4, #-8]
 8005b5e:	6091      	str	r1, [r2, #8]
 8005b60:	2001      	movs	r0, #1
 8005b62:	bd10      	pop	{r4, pc}
 8005b64:	6893      	ldr	r3, [r2, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f9      	beq.n	8005b5e <__cxa_begin_cleanup+0x2a>
 8005b6a:	f000 faa3 	bl	80060b4 <_ZSt9terminatev>

08005b6e <__gnu_end_cleanup>:
 8005b6e:	b510      	push	{r4, lr}
 8005b70:	f000 f816 	bl	8005ba0 <__cxa_get_globals>
 8005b74:	6882      	ldr	r2, [r0, #8]
 8005b76:	4601      	mov	r1, r0
 8005b78:	b90a      	cbnz	r2, 8005b7e <__gnu_end_cleanup+0x10>
 8005b7a:	f000 fa9b 	bl	80060b4 <_ZSt9terminatev>
 8005b7e:	f102 0420 	add.w	r4, r2, #32
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7ff ff5a 	bl	8005a3c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005b88:	b140      	cbz	r0, 8005b9c <__gnu_end_cleanup+0x2e>
 8005b8a:	69d3      	ldr	r3, [r2, #28]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	61d3      	str	r3, [r2, #28]
 8005b90:	b913      	cbnz	r3, 8005b98 <__gnu_end_cleanup+0x2a>
 8005b92:	6990      	ldr	r0, [r2, #24]
 8005b94:	6088      	str	r0, [r1, #8]
 8005b96:	6193      	str	r3, [r2, #24]
 8005b98:	4620      	mov	r0, r4
 8005b9a:	bd10      	pop	{r4, pc}
 8005b9c:	6088      	str	r0, [r1, #8]
 8005b9e:	e7fb      	b.n	8005b98 <__gnu_end_cleanup+0x2a>

08005ba0 <__cxa_get_globals>:
 8005ba0:	4800      	ldr	r0, [pc, #0]	; (8005ba4 <__cxa_get_globals+0x4>)
 8005ba2:	4770      	bx	lr
 8005ba4:	20001b4c 	.word	0x20001b4c

08005ba8 <_ZL12read_uleb128PKhPm>:
 8005ba8:	2300      	movs	r3, #0
 8005baa:	461a      	mov	r2, r3
 8005bac:	b530      	push	{r4, r5, lr}
 8005bae:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005bb2:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8005bb6:	4094      	lsls	r4, r2
 8005bb8:	4323      	orrs	r3, r4
 8005bba:	062c      	lsls	r4, r5, #24
 8005bbc:	f102 0207 	add.w	r2, r2, #7
 8005bc0:	d4f5      	bmi.n	8005bae <_ZL12read_uleb128PKhPm+0x6>
 8005bc2:	600b      	str	r3, [r1, #0]
 8005bc4:	bd30      	pop	{r4, r5, pc}

08005bc6 <_ZL12read_sleb128PKhPl>:
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	461a      	mov	r2, r3
 8005bca:	b530      	push	{r4, r5, lr}
 8005bcc:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005bd0:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8005bd4:	4095      	lsls	r5, r2
 8005bd6:	432b      	orrs	r3, r5
 8005bd8:	0625      	lsls	r5, r4, #24
 8005bda:	f102 0207 	add.w	r2, r2, #7
 8005bde:	d4f5      	bmi.n	8005bcc <_ZL12read_sleb128PKhPl+0x6>
 8005be0:	2a1f      	cmp	r2, #31
 8005be2:	d806      	bhi.n	8005bf2 <_ZL12read_sleb128PKhPl+0x2c>
 8005be4:	0664      	lsls	r4, r4, #25
 8005be6:	bf42      	ittt	mi
 8005be8:	f04f 34ff 	movmi.w	r4, #4294967295
 8005bec:	fa04 f202 	lslmi.w	r2, r4, r2
 8005bf0:	4313      	orrmi	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]
 8005bf4:	bd30      	pop	{r4, r5, pc}

08005bf6 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8005bf6:	2850      	cmp	r0, #80	; 0x50
 8005bf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	4688      	mov	r8, r1
 8005c00:	4615      	mov	r5, r2
 8005c02:	461f      	mov	r7, r3
 8005c04:	d108      	bne.n	8005c18 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8005c06:	1cd0      	adds	r0, r2, #3
 8005c08:	f020 0003 	bic.w	r0, r0, #3
 8005c0c:	f850 4b04 	ldr.w	r4, [r0], #4
 8005c10:	603c      	str	r4, [r7, #0]
 8005c12:	b002      	add	sp, #8
 8005c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c18:	f000 030f 	and.w	r3, r0, #15
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	d82e      	bhi.n	8005c7e <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8005c20:	e8df f003 	tbb	[pc, r3]
 8005c24:	251d0725 	.word	0x251d0725
 8005c28:	2d2d2d29 	.word	0x2d2d2d29
 8005c2c:	2521182d 	.word	0x2521182d
 8005c30:	29          	.byte	0x29
 8005c31:	00          	.byte	0x00
 8005c32:	4628      	mov	r0, r5
 8005c34:	a901      	add	r1, sp, #4
 8005c36:	f7ff ffb7 	bl	8005ba8 <_ZL12read_uleb128PKhPm>
 8005c3a:	9c01      	ldr	r4, [sp, #4]
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	d0e7      	beq.n	8005c10 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8005c40:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	bf08      	it	eq
 8005c48:	46a8      	moveq	r8, r5
 8005c4a:	0633      	lsls	r3, r6, #24
 8005c4c:	4444      	add	r4, r8
 8005c4e:	bf48      	it	mi
 8005c50:	6824      	ldrmi	r4, [r4, #0]
 8005c52:	e7dd      	b.n	8005c10 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8005c54:	4628      	mov	r0, r5
 8005c56:	a901      	add	r1, sp, #4
 8005c58:	f7ff ffb5 	bl	8005bc6 <_ZL12read_sleb128PKhPl>
 8005c5c:	e7ed      	b.n	8005c3a <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f830 4b02 	ldrh.w	r4, [r0], #2
 8005c64:	e7ea      	b.n	8005c3c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005c66:	4628      	mov	r0, r5
 8005c68:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8005c6c:	e7e6      	b.n	8005c3c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f850 4b04 	ldr.w	r4, [r0], #4
 8005c74:	e7e2      	b.n	8005c3c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005c76:	4628      	mov	r0, r5
 8005c78:	f850 4b08 	ldr.w	r4, [r0], #8
 8005c7c:	e7de      	b.n	8005c3c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005c7e:	f000 fb6b 	bl	8006358 <abort>

08005c82 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8005c82:	b508      	push	{r3, lr}
 8005c84:	4603      	mov	r3, r0
 8005c86:	2bff      	cmp	r3, #255	; 0xff
 8005c88:	4608      	mov	r0, r1
 8005c8a:	d010      	beq.n	8005cae <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005c8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c90:	2a30      	cmp	r2, #48	; 0x30
 8005c92:	d012      	beq.n	8005cba <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8005c94:	d807      	bhi.n	8005ca6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8005c96:	2a20      	cmp	r2, #32
 8005c98:	d00b      	beq.n	8005cb2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8005c9a:	d802      	bhi.n	8005ca2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005c9c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8005ca0:	d005      	beq.n	8005cae <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005ca2:	f000 fb59 	bl	8006358 <abort>
 8005ca6:	2a40      	cmp	r2, #64	; 0x40
 8005ca8:	d00b      	beq.n	8005cc2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8005caa:	2a50      	cmp	r2, #80	; 0x50
 8005cac:	d1f9      	bne.n	8005ca2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005cae:	2000      	movs	r0, #0
 8005cb0:	bd08      	pop	{r3, pc}
 8005cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005cb6:	f001 b9ac 	b.w	8007012 <_Unwind_GetTextRelBase>
 8005cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005cbe:	f001 b9a5 	b.w	800700c <_Unwind_GetDataRelBase>
 8005cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005cc6:	f7fb b9d3 	b.w	8001070 <_Unwind_GetRegionStart>

08005cca <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8005cca:	b570      	push	{r4, r5, r6, lr}
 8005ccc:	460c      	mov	r4, r1
 8005cce:	4601      	mov	r1, r0
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4615      	mov	r5, r2
 8005cd4:	461e      	mov	r6, r3
 8005cd6:	f7ff ffd4 	bl	8005c82 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005cda:	4633      	mov	r3, r6
 8005cdc:	4601      	mov	r1, r0
 8005cde:	462a      	mov	r2, r5
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ce6:	f7ff bf86 	b.w	8005bf6 <_ZL28read_encoded_value_with_basehjPKhPj>

08005cea <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8005cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cec:	460c      	mov	r4, r1
 8005cee:	4615      	mov	r5, r2
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	b328      	cbz	r0, 8005d40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8005cf4:	f7fb f9bc 	bl	8001070 <_Unwind_GetRegionStart>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005d02:	29ff      	cmp	r1, #255	; 0xff
 8005d04:	d01e      	beq.n	8005d44 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8005d06:	4602      	mov	r2, r0
 8005d08:	1d2b      	adds	r3, r5, #4
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f7ff ffdd 	bl	8005cca <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005d10:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d14:	2bff      	cmp	r3, #255	; 0xff
 8005d16:	752b      	strb	r3, [r5, #20]
 8005d18:	d016      	beq.n	8005d48 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	a901      	add	r1, sp, #4
 8005d1e:	752b      	strb	r3, [r5, #20]
 8005d20:	f7ff ff42 	bl	8005ba8 <_ZL12read_uleb128PKhPm>
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	4403      	add	r3, r0
 8005d28:	60eb      	str	r3, [r5, #12]
 8005d2a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d2e:	a901      	add	r1, sp, #4
 8005d30:	756b      	strb	r3, [r5, #21]
 8005d32:	f7ff ff39 	bl	8005ba8 <_ZL12read_uleb128PKhPm>
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	4403      	add	r3, r0
 8005d3a:	612b      	str	r3, [r5, #16]
 8005d3c:	b002      	add	sp, #8
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	4603      	mov	r3, r0
 8005d42:	e7da      	b.n	8005cfa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8005d44:	606b      	str	r3, [r5, #4]
 8005d46:	e7e3      	b.n	8005d10 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e7ed      	b.n	8005d28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08005d4c <_Unwind_GetGR>:
 8005d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d4e:	ab03      	add	r3, sp, #12
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	460a      	mov	r2, r1
 8005d56:	4619      	mov	r1, r3
 8005d58:	f7fa fbe0 	bl	800051c <_Unwind_VRS_Get>
 8005d5c:	9803      	ldr	r0, [sp, #12]
 8005d5e:	b005      	add	sp, #20
 8005d60:	f85d fb04 	ldr.w	pc, [sp], #4

08005d64 <__gxx_personality_v0>:
 8005d64:	2300      	movs	r3, #0
 8005d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	b091      	sub	sp, #68	; 0x44
 8005d6c:	9305      	str	r3, [sp, #20]
 8005d6e:	f000 0303 	and.w	r3, r0, #3
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	4606      	mov	r6, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	4617      	mov	r7, r2
 8005d7a:	d00e      	beq.n	8005d9a <__gxx_personality_v0+0x36>
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d003      	beq.n	8005d88 <__gxx_personality_v0+0x24>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d13b      	bne.n	8005dfc <__gxx_personality_v0+0x98>
 8005d84:	0701      	lsls	r1, r0, #28
 8005d86:	d53b      	bpl.n	8005e00 <__gxx_personality_v0+0x9c>
 8005d88:	4639      	mov	r1, r7
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f7fb f958 	bl	8001040 <__gnu_unwind_frame>
 8005d90:	b390      	cbz	r0, 8005df8 <__gxx_personality_v0+0x94>
 8005d92:	2009      	movs	r0, #9
 8005d94:	b011      	add	sp, #68	; 0x44
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	0702      	lsls	r2, r0, #28
 8005d9c:	d406      	bmi.n	8005dac <__gxx_personality_v0+0x48>
 8005d9e:	6a0d      	ldr	r5, [r1, #32]
 8005da0:	4638      	mov	r0, r7
 8005da2:	210d      	movs	r1, #13
 8005da4:	f7ff ffd2 	bl	8005d4c <_Unwind_GetGR>
 8005da8:	4285      	cmp	r5, r0
 8005daa:	d02b      	beq.n	8005e04 <__gxx_personality_v0+0xa0>
 8005dac:	2002      	movs	r0, #2
 8005dae:	2300      	movs	r3, #0
 8005db0:	f006 0608 	and.w	r6, r6, #8
 8005db4:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8005db8:	4306      	orrs	r6, r0
 8005dba:	220c      	movs	r2, #12
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f8cd a000 	str.w	sl, [sp]
 8005dc4:	940a      	str	r4, [sp, #40]	; 0x28
 8005dc6:	f7fa fbcf 	bl	8000568 <_Unwind_VRS_Set>
 8005dca:	2e06      	cmp	r6, #6
 8005dcc:	d11c      	bne.n	8005e08 <__gxx_personality_v0+0xa4>
 8005dce:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8005dd2:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8005dd6:	f1b8 0f00 	cmp.w	r8, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	f04f 0b01 	moveq.w	fp, #1
 8005de0:	f04f 0b03 	movne.w	fp, #3
 8005de4:	f016 0608 	ands.w	r6, r6, #8
 8005de8:	f000 8107 	beq.w	8005ffa <__gxx_personality_v0+0x296>
 8005dec:	f1bb 0f01 	cmp.w	fp, #1
 8005df0:	f040 80ff 	bne.w	8005ff2 <__gxx_personality_v0+0x28e>
 8005df4:	f000 f95e 	bl	80060b4 <_ZSt9terminatev>
 8005df8:	2008      	movs	r0, #8
 8005dfa:	e7cb      	b.n	8005d94 <__gxx_personality_v0+0x30>
 8005dfc:	f000 faac 	bl	8006358 <abort>
 8005e00:	2001      	movs	r0, #1
 8005e02:	e7d4      	b.n	8005dae <__gxx_personality_v0+0x4a>
 8005e04:	2006      	movs	r0, #6
 8005e06:	e7d2      	b.n	8005dae <__gxx_personality_v0+0x4a>
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f7fb f937 	bl	800107c <_Unwind_GetLanguageSpecificData>
 8005e0e:	4681      	mov	r9, r0
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d0b9      	beq.n	8005d88 <__gxx_personality_v0+0x24>
 8005e14:	4652      	mov	r2, sl
 8005e16:	4601      	mov	r1, r0
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff ff66 	bl	8005cea <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005e1e:	4639      	mov	r1, r7
 8005e20:	4605      	mov	r5, r0
 8005e22:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005e26:	f7ff ff2c 	bl	8005c82 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005e2a:	210f      	movs	r1, #15
 8005e2c:	900c      	str	r0, [sp, #48]	; 0x30
 8005e2e:	4638      	mov	r0, r7
 8005e30:	f7ff ff8c 	bl	8005d4c <_Unwind_GetGR>
 8005e34:	f020 0801 	bic.w	r8, r0, #1
 8005e38:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e3e:	42ab      	cmp	r3, r5
 8005e40:	f240 80bf 	bls.w	8005fc2 <__gxx_personality_v0+0x25e>
 8005e44:	462a      	mov	r2, r5
 8005e46:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005e4a:	ab06      	add	r3, sp, #24
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7ff ff3c 	bl	8005cca <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005e52:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005e56:	4602      	mov	r2, r0
 8005e58:	ab07      	add	r3, sp, #28
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f7ff ff35 	bl	8005cca <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005e60:	ab08      	add	r3, sp, #32
 8005e62:	4602      	mov	r2, r0
 8005e64:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f7ff ff2e 	bl	8005cca <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005e6e:	a909      	add	r1, sp, #36	; 0x24
 8005e70:	f7ff fe9a 	bl	8005ba8 <_ZL12read_uleb128PKhPm>
 8005e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e76:	9a06      	ldr	r2, [sp, #24]
 8005e78:	4605      	mov	r5, r0
 8005e7a:	4413      	add	r3, r2
 8005e7c:	4543      	cmp	r3, r8
 8005e7e:	d901      	bls.n	8005e84 <__gxx_personality_v0+0x120>
 8005e80:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005e82:	e7db      	b.n	8005e3c <__gxx_personality_v0+0xd8>
 8005e84:	9a07      	ldr	r2, [sp, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	4543      	cmp	r3, r8
 8005e8a:	d9d7      	bls.n	8005e3c <__gxx_personality_v0+0xd8>
 8005e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e90:	f1b8 0f00 	cmp.w	r8, #0
 8005e94:	d001      	beq.n	8005e9a <__gxx_personality_v0+0x136>
 8005e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e98:	4498      	add	r8, r3
 8005e9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e9c:	b115      	cbz	r5, 8005ea4 <__gxx_personality_v0+0x140>
 8005e9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ea0:	3d01      	subs	r5, #1
 8005ea2:	4405      	add	r5, r0
 8005ea4:	f1b8 0f00 	cmp.w	r8, #0
 8005ea8:	f43f af6e 	beq.w	8005d88 <__gxx_personality_v0+0x24>
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	f000 80f2 	beq.w	8006096 <__gxx_personality_v0+0x332>
 8005eb2:	f016 0308 	ands.w	r3, r6, #8
 8005eb6:	9302      	str	r3, [sp, #8]
 8005eb8:	d034      	beq.n	8005f24 <__gxx_personality_v0+0x1c0>
 8005eba:	2347      	movs	r3, #71	; 0x47
 8005ebc:	7023      	strb	r3, [r4, #0]
 8005ebe:	234e      	movs	r3, #78	; 0x4e
 8005ec0:	7063      	strb	r3, [r4, #1]
 8005ec2:	2355      	movs	r3, #85	; 0x55
 8005ec4:	70a3      	strb	r3, [r4, #2]
 8005ec6:	2343      	movs	r3, #67	; 0x43
 8005ec8:	70e3      	strb	r3, [r4, #3]
 8005eca:	2346      	movs	r3, #70	; 0x46
 8005ecc:	7123      	strb	r3, [r4, #4]
 8005ece:	234f      	movs	r3, #79	; 0x4f
 8005ed0:	7163      	strb	r3, [r4, #5]
 8005ed2:	2352      	movs	r3, #82	; 0x52
 8005ed4:	71a3      	strb	r3, [r4, #6]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	71e3      	strb	r3, [r4, #7]
 8005eda:	f04f 0b00 	mov.w	fp, #0
 8005ede:	a907      	add	r1, sp, #28
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f7ff fe70 	bl	8005bc6 <_ZL12read_sleb128PKhPl>
 8005ee6:	a908      	add	r1, sp, #32
 8005ee8:	9003      	str	r0, [sp, #12]
 8005eea:	f7ff fe6c 	bl	8005bc6 <_ZL12read_sleb128PKhPl>
 8005eee:	9907      	ldr	r1, [sp, #28]
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	d063      	beq.n	8005fbc <__gxx_personality_v0+0x258>
 8005ef4:	dd3a      	ble.n	8005f6c <__gxx_personality_v0+0x208>
 8005ef6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005efa:	28ff      	cmp	r0, #255	; 0xff
 8005efc:	d032      	beq.n	8005f64 <__gxx_personality_v0+0x200>
 8005efe:	f000 0307 	and.w	r3, r0, #7
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	f63f af7a 	bhi.w	8005dfc <__gxx_personality_v0+0x98>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <__gxx_personality_v0+0x1ac>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f69 	.word	0x08005f69
 8005f14:	08005dfd 	.word	0x08005dfd
 8005f18:	08005f37 	.word	0x08005f37
 8005f1c:	08005f69 	.word	0x08005f69
 8005f20:	08005f61 	.word	0x08005f61
 8005f24:	79e3      	ldrb	r3, [r4, #7]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	bf0c      	ite	eq
 8005f2a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8005f2e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8005f32:	9305      	str	r3, [sp, #20]
 8005f34:	e7d1      	b.n	8005eda <__gxx_personality_v0+0x176>
 8005f36:	2502      	movs	r5, #2
 8005f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f3a:	ab09      	add	r3, sp, #36	; 0x24
 8005f3c:	fb05 2211 	mls	r2, r5, r1, r2
 8005f40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f42:	f7ff fe58 	bl	8005bf6 <_ZL28read_encoded_value_with_basehjPKhPj>
 8005f46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f48:	b131      	cbz	r1, 8005f58 <__gxx_personality_v0+0x1f4>
 8005f4a:	b35c      	cbz	r4, 8005fa4 <__gxx_personality_v0+0x240>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4620      	mov	r0, r4
 8005f50:	ab05      	add	r3, sp, #20
 8005f52:	f7ff fd91 	bl	8005a78 <__cxa_type_match>
 8005f56:	b328      	cbz	r0, 8005fa4 <__gxx_personality_v0+0x240>
 8005f58:	f04f 0b03 	mov.w	fp, #3
 8005f5c:	9d07      	ldr	r5, [sp, #28]
 8005f5e:	e034      	b.n	8005fca <__gxx_personality_v0+0x266>
 8005f60:	2508      	movs	r5, #8
 8005f62:	e7e9      	b.n	8005f38 <__gxx_personality_v0+0x1d4>
 8005f64:	2500      	movs	r5, #0
 8005f66:	e7e7      	b.n	8005f38 <__gxx_personality_v0+0x1d4>
 8005f68:	2504      	movs	r5, #4
 8005f6a:	e7e5      	b.n	8005f38 <__gxx_personality_v0+0x1d4>
 8005f6c:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8005f70:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8005f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f76:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8005f7a:	313f      	adds	r1, #63	; 0x3f
 8005f7c:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8005f80:	b1bc      	cbz	r4, 8005fb2 <__gxx_personality_v0+0x24e>
 8005f82:	9a02      	ldr	r2, [sp, #8]
 8005f84:	b9aa      	cbnz	r2, 8005fb2 <__gxx_personality_v0+0x24e>
 8005f86:	9b05      	ldr	r3, [sp, #20]
 8005f88:	3d04      	subs	r5, #4
 8005f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005f90:	2900      	cmp	r1, #0
 8005f92:	d0e1      	beq.n	8005f58 <__gxx_personality_v0+0x1f4>
 8005f94:	2200      	movs	r2, #0
 8005f96:	4620      	mov	r0, r4
 8005f98:	ab09      	add	r3, sp, #36	; 0x24
 8005f9a:	4429      	add	r1, r5
 8005f9c:	f7ff fd6c 	bl	8005a78 <__cxa_type_match>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d0f3      	beq.n	8005f8c <__gxx_personality_v0+0x228>
 8005fa4:	9d08      	ldr	r5, [sp, #32]
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	d071      	beq.n	800608e <__gxx_personality_v0+0x32a>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	442b      	add	r3, r5
 8005fae:	461d      	mov	r5, r3
 8005fb0:	e795      	b.n	8005ede <__gxx_personality_v0+0x17a>
 8005fb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f4      	bne.n	8005fa4 <__gxx_personality_v0+0x240>
 8005fba:	e7cd      	b.n	8005f58 <__gxx_personality_v0+0x1f4>
 8005fbc:	f04f 0b01 	mov.w	fp, #1
 8005fc0:	e7f0      	b.n	8005fa4 <__gxx_personality_v0+0x240>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	f04f 0b01 	mov.w	fp, #1
 8005fc8:	46a8      	mov	r8, r5
 8005fca:	07f3      	lsls	r3, r6, #31
 8005fcc:	f57f af0a 	bpl.w	8005de4 <__gxx_personality_v0+0x80>
 8005fd0:	f1bb 0f02 	cmp.w	fp, #2
 8005fd4:	f43f aed8 	beq.w	8005d88 <__gxx_personality_v0+0x24>
 8005fd8:	210d      	movs	r1, #13
 8005fda:	4638      	mov	r0, r7
 8005fdc:	9e05      	ldr	r6, [sp, #20]
 8005fde:	f7ff feb5 	bl	8005d4c <_Unwind_GetGR>
 8005fe2:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8005fe6:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8005fea:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005fee:	2006      	movs	r0, #6
 8005ff0:	e6d0      	b.n	8005d94 <__gxx_personality_v0+0x30>
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	da22      	bge.n	800603c <__gxx_personality_v0+0x2d8>
 8005ff6:	f000 f86f 	bl	80060d8 <_ZSt10unexpectedv>
 8005ffa:	f1bb 0f01 	cmp.w	fp, #1
 8005ffe:	d102      	bne.n	8006006 <__gxx_personality_v0+0x2a2>
 8006000:	4620      	mov	r0, r4
 8006002:	f000 f938 	bl	8006276 <__cxa_call_terminate>
 8006006:	2d00      	cmp	r5, #0
 8006008:	da18      	bge.n	800603c <__gxx_personality_v0+0x2d8>
 800600a:	4652      	mov	r2, sl
 800600c:	4649      	mov	r1, r9
 800600e:	4638      	mov	r0, r7
 8006010:	f7ff fe6b 	bl	8005cea <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006014:	4639      	mov	r1, r7
 8006016:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800601a:	f7ff fe32 	bl	8005c82 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800601e:	43eb      	mvns	r3, r5
 8006020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006022:	900c      	str	r0, [sp, #48]	; 0x30
 8006024:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006028:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800602c:	b10a      	cbz	r2, 8006032 <__gxx_personality_v0+0x2ce>
 800602e:	3601      	adds	r6, #1
 8006030:	e7fa      	b.n	8006028 <__gxx_personality_v0+0x2c4>
 8006032:	2204      	movs	r2, #4
 8006034:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8006038:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 800603c:	2300      	movs	r3, #0
 800603e:	ae09      	add	r6, sp, #36	; 0x24
 8006040:	461a      	mov	r2, r3
 8006042:	4619      	mov	r1, r3
 8006044:	4638      	mov	r0, r7
 8006046:	9600      	str	r6, [sp, #0]
 8006048:	9409      	str	r4, [sp, #36]	; 0x24
 800604a:	f7fa fa8d 	bl	8000568 <_Unwind_VRS_Set>
 800604e:	2300      	movs	r3, #0
 8006050:	2201      	movs	r2, #1
 8006052:	4619      	mov	r1, r3
 8006054:	4638      	mov	r0, r7
 8006056:	9600      	str	r6, [sp, #0]
 8006058:	9509      	str	r5, [sp, #36]	; 0x24
 800605a:	f7fa fa85 	bl	8000568 <_Unwind_VRS_Set>
 800605e:	210f      	movs	r1, #15
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff fe73 	bl	8005d4c <_Unwind_GetGR>
 8006066:	2300      	movs	r3, #0
 8006068:	f000 0001 	and.w	r0, r0, #1
 800606c:	ea40 0008 	orr.w	r0, r0, r8
 8006070:	9009      	str	r0, [sp, #36]	; 0x24
 8006072:	220f      	movs	r2, #15
 8006074:	4619      	mov	r1, r3
 8006076:	4638      	mov	r0, r7
 8006078:	9600      	str	r6, [sp, #0]
 800607a:	f7fa fa75 	bl	8000568 <_Unwind_VRS_Set>
 800607e:	f1bb 0f02 	cmp.w	fp, #2
 8006082:	d102      	bne.n	800608a <__gxx_personality_v0+0x326>
 8006084:	4620      	mov	r0, r4
 8006086:	f7ff fd55 	bl	8005b34 <__cxa_begin_cleanup>
 800608a:	2007      	movs	r0, #7
 800608c:	e682      	b.n	8005d94 <__gxx_personality_v0+0x30>
 800608e:	f1bb 0f00 	cmp.w	fp, #0
 8006092:	f43f ae79 	beq.w	8005d88 <__gxx_personality_v0+0x24>
 8006096:	f04f 0b02 	mov.w	fp, #2
 800609a:	e796      	b.n	8005fca <__gxx_personality_v0+0x266>

0800609c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800609c:	b508      	push	{r3, lr}
 800609e:	4780      	blx	r0
 80060a0:	f000 f95a 	bl	8006358 <abort>

080060a4 <_ZSt13get_terminatev>:
 80060a4:	4b02      	ldr	r3, [pc, #8]	; (80060b0 <_ZSt13get_terminatev+0xc>)
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	f3bf 8f5b 	dmb	ish
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	20000014 	.word	0x20000014

080060b4 <_ZSt9terminatev>:
 80060b4:	b508      	push	{r3, lr}
 80060b6:	f7ff fff5 	bl	80060a4 <_ZSt13get_terminatev>
 80060ba:	f7ff ffef 	bl	800609c <_ZN10__cxxabiv111__terminateEPFvvE>

080060be <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80060be:	b508      	push	{r3, lr}
 80060c0:	4780      	blx	r0
 80060c2:	f7ff fff7 	bl	80060b4 <_ZSt9terminatev>
	...

080060c8 <_ZSt14get_unexpectedv>:
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <_ZSt14get_unexpectedv+0xc>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	f3bf 8f5b 	dmb	ish
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000010 	.word	0x20000010

080060d8 <_ZSt10unexpectedv>:
 80060d8:	b508      	push	{r3, lr}
 80060da:	f7ff fff5 	bl	80060c8 <_ZSt14get_unexpectedv>
 80060de:	f7ff ffee 	bl	80060be <_ZN10__cxxabiv112__unexpectedEPFvvE>

080060e2 <_Znwj>:
 80060e2:	2801      	cmp	r0, #1
 80060e4:	bf38      	it	cc
 80060e6:	2001      	movcc	r0, #1
 80060e8:	b510      	push	{r4, lr}
 80060ea:	4604      	mov	r4, r0
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fa79 	bl	80065e4 <malloc>
 80060f2:	b930      	cbnz	r0, 8006102 <_Znwj+0x20>
 80060f4:	f000 f928 	bl	8006348 <_ZSt15get_new_handlerv>
 80060f8:	b908      	cbnz	r0, 80060fe <_Znwj+0x1c>
 80060fa:	f000 f92d 	bl	8006358 <abort>
 80060fe:	4780      	blx	r0
 8006100:	e7f4      	b.n	80060ec <_Znwj+0xa>
 8006102:	bd10      	pop	{r4, pc}

08006104 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8006104:	b510      	push	{r4, lr}
 8006106:	4604      	mov	r4, r0
 8006108:	4b02      	ldr	r3, [pc, #8]	; (8006114 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800610a:	6003      	str	r3, [r0, #0]
 800610c:	f7ff fc26 	bl	800595c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006110:	4620      	mov	r0, r4
 8006112:	bd10      	pop	{r4, pc}
 8006114:	08007240 	.word	0x08007240

08006118 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8006118:	b510      	push	{r4, lr}
 800611a:	4604      	mov	r4, r0
 800611c:	f7ff fff2 	bl	8006104 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8006120:	4620      	mov	r0, r4
 8006122:	210c      	movs	r1, #12
 8006124:	f7ff fc6e 	bl	8005a04 <_ZdlPvj>
 8006128:	4620      	mov	r0, r4
 800612a:	bd10      	pop	{r4, pc}

0800612c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800612c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006130:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006134:	4606      	mov	r6, r0
 8006136:	4590      	cmp	r8, r2
 8006138:	460f      	mov	r7, r1
 800613a:	4615      	mov	r5, r2
 800613c:	461c      	mov	r4, r3
 800613e:	d00b      	beq.n	8006158 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8006140:	68b0      	ldr	r0, [r6, #8]
 8006142:	462a      	mov	r2, r5
 8006144:	6803      	ldr	r3, [r0, #0]
 8006146:	f8cd 8018 	str.w	r8, [sp, #24]
 800614a:	6a1e      	ldr	r6, [r3, #32]
 800614c:	4639      	mov	r1, r7
 800614e:	4623      	mov	r3, r4
 8006150:	46b4      	mov	ip, r6
 8006152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006156:	4760      	bx	ip
 8006158:	4619      	mov	r1, r3
 800615a:	f000 f857 	bl	800620c <_ZNKSt9type_infoeqERKS_>
 800615e:	2800      	cmp	r0, #0
 8006160:	d0ee      	beq.n	8006140 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8006162:	2006      	movs	r0, #6
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006168 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8006168:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	460d      	mov	r5, r1
 800616e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8006172:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8006176:	4619      	mov	r1, r3
 8006178:	4681      	mov	r9, r0
 800617a:	4617      	mov	r7, r2
 800617c:	4698      	mov	r8, r3
 800617e:	f000 f845 	bl	800620c <_ZNKSt9type_infoeqERKS_>
 8006182:	b190      	cbz	r0, 80061aa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8006184:	2d00      	cmp	r5, #0
 8006186:	6034      	str	r4, [r6, #0]
 8006188:	7137      	strb	r7, [r6, #4]
 800618a:	db09      	blt.n	80061a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800618c:	442c      	add	r4, r5
 800618e:	45a2      	cmp	sl, r4
 8006190:	bf0c      	ite	eq
 8006192:	2406      	moveq	r4, #6
 8006194:	2401      	movne	r4, #1
 8006196:	71b4      	strb	r4, [r6, #6]
 8006198:	2000      	movs	r0, #0
 800619a:	b001      	add	sp, #4
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	3502      	adds	r5, #2
 80061a2:	d1f9      	bne.n	8006198 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80061a4:	2301      	movs	r3, #1
 80061a6:	71b3      	strb	r3, [r6, #6]
 80061a8:	e7f6      	b.n	8006198 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80061aa:	4554      	cmp	r4, sl
 80061ac:	d106      	bne.n	80061bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80061ae:	4659      	mov	r1, fp
 80061b0:	4648      	mov	r0, r9
 80061b2:	f000 f82b 	bl	800620c <_ZNKSt9type_infoeqERKS_>
 80061b6:	b108      	cbz	r0, 80061bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80061b8:	7177      	strb	r7, [r6, #5]
 80061ba:	e7ed      	b.n	8006198 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80061bc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80061c0:	463a      	mov	r2, r7
 80061c2:	6803      	ldr	r3, [r0, #0]
 80061c4:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80061c8:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80061cc:	69dc      	ldr	r4, [r3, #28]
 80061ce:	4629      	mov	r1, r5
 80061d0:	4643      	mov	r3, r8
 80061d2:	46a4      	mov	ip, r4
 80061d4:	b001      	add	sp, #4
 80061d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	4760      	bx	ip

080061dc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80061dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	4607      	mov	r7, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	4615      	mov	r5, r2
 80061e6:	461e      	mov	r6, r3
 80061e8:	f7ff fbeb 	bl	80059c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80061ec:	b948      	cbnz	r0, 8006202 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	462a      	mov	r2, r5
 80061f2:	6803      	ldr	r3, [r0, #0]
 80061f4:	4621      	mov	r1, r4
 80061f6:	699f      	ldr	r7, [r3, #24]
 80061f8:	4633      	mov	r3, r6
 80061fa:	46bc      	mov	ip, r7
 80061fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006200:	4760      	bx	ip
 8006202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006206 <_ZNSt9type_infoD1Ev>:
 8006206:	4770      	bx	lr

08006208 <_ZNKSt9type_info14__is_pointer_pEv>:
 8006208:	2000      	movs	r0, #0
 800620a:	4770      	bx	lr

0800620c <_ZNKSt9type_infoeqERKS_>:
 800620c:	4281      	cmp	r1, r0
 800620e:	b508      	push	{r3, lr}
 8006210:	d00e      	beq.n	8006230 <_ZNKSt9type_infoeqERKS_+0x24>
 8006212:	6840      	ldr	r0, [r0, #4]
 8006214:	7803      	ldrb	r3, [r0, #0]
 8006216:	2b2a      	cmp	r3, #42	; 0x2a
 8006218:	d00c      	beq.n	8006234 <_ZNKSt9type_infoeqERKS_+0x28>
 800621a:	6849      	ldr	r1, [r1, #4]
 800621c:	780b      	ldrb	r3, [r1, #0]
 800621e:	2b2a      	cmp	r3, #42	; 0x2a
 8006220:	bf08      	it	eq
 8006222:	3101      	addeq	r1, #1
 8006224:	f7f9 ff94 	bl	8000150 <strcmp>
 8006228:	fab0 f080 	clz	r0, r0
 800622c:	0940      	lsrs	r0, r0, #5
 800622e:	bd08      	pop	{r3, pc}
 8006230:	2001      	movs	r0, #1
 8006232:	e7fc      	b.n	800622e <_ZNKSt9type_infoeqERKS_+0x22>
 8006234:	2000      	movs	r0, #0
 8006236:	e7fa      	b.n	800622e <_ZNKSt9type_infoeqERKS_+0x22>

08006238 <_ZdlPv>:
 8006238:	f000 b9dc 	b.w	80065f4 <free>

0800623c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800623c:	7803      	ldrb	r3, [r0, #0]
 800623e:	2b47      	cmp	r3, #71	; 0x47
 8006240:	d117      	bne.n	8006272 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006242:	7843      	ldrb	r3, [r0, #1]
 8006244:	2b4e      	cmp	r3, #78	; 0x4e
 8006246:	d114      	bne.n	8006272 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006248:	7883      	ldrb	r3, [r0, #2]
 800624a:	2b55      	cmp	r3, #85	; 0x55
 800624c:	d111      	bne.n	8006272 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800624e:	78c3      	ldrb	r3, [r0, #3]
 8006250:	2b43      	cmp	r3, #67	; 0x43
 8006252:	d10e      	bne.n	8006272 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006254:	7903      	ldrb	r3, [r0, #4]
 8006256:	2b43      	cmp	r3, #67	; 0x43
 8006258:	d10b      	bne.n	8006272 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800625a:	7943      	ldrb	r3, [r0, #5]
 800625c:	2b2b      	cmp	r3, #43	; 0x2b
 800625e:	d108      	bne.n	8006272 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006260:	7983      	ldrb	r3, [r0, #6]
 8006262:	2b2b      	cmp	r3, #43	; 0x2b
 8006264:	d105      	bne.n	8006272 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006266:	79c0      	ldrb	r0, [r0, #7]
 8006268:	2801      	cmp	r0, #1
 800626a:	bf8c      	ite	hi
 800626c:	2000      	movhi	r0, #0
 800626e:	2001      	movls	r0, #1
 8006270:	4770      	bx	lr
 8006272:	2000      	movs	r0, #0
 8006274:	4770      	bx	lr

08006276 <__cxa_call_terminate>:
 8006276:	b510      	push	{r4, lr}
 8006278:	4604      	mov	r4, r0
 800627a:	b148      	cbz	r0, 8006290 <__cxa_call_terminate+0x1a>
 800627c:	f000 f83b 	bl	80062f6 <__cxa_begin_catch>
 8006280:	4620      	mov	r0, r4
 8006282:	f7ff ffdb 	bl	800623c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006286:	b118      	cbz	r0, 8006290 <__cxa_call_terminate+0x1a>
 8006288:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800628c:	f7ff ff06 	bl	800609c <_ZN10__cxxabiv111__terminateEPFvvE>
 8006290:	f7ff ff10 	bl	80060b4 <_ZSt9terminatev>

08006294 <__cxa_call_unexpected>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4602      	mov	r2, r0
 8006298:	f7ff ffd0 	bl	800623c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800629c:	4604      	mov	r4, r0
 800629e:	b140      	cbz	r0, 80062b2 <__cxa_call_unexpected+0x1e>
 80062a0:	2500      	movs	r5, #0
 80062a2:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 f825 	bl	80062f6 <__cxa_begin_catch>
 80062ac:	b11d      	cbz	r5, 80062b6 <__cxa_call_unexpected+0x22>
 80062ae:	f7ff ff13 	bl	80060d8 <_ZSt10unexpectedv>
 80062b2:	2501      	movs	r5, #1
 80062b4:	e7f7      	b.n	80062a6 <__cxa_call_unexpected+0x12>
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff ff01 	bl	80060be <_ZN10__cxxabiv112__unexpectedEPFvvE>

080062bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80062bc:	7803      	ldrb	r3, [r0, #0]
 80062be:	2b47      	cmp	r3, #71	; 0x47
 80062c0:	d117      	bne.n	80062f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062c2:	7843      	ldrb	r3, [r0, #1]
 80062c4:	2b4e      	cmp	r3, #78	; 0x4e
 80062c6:	d114      	bne.n	80062f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062c8:	7883      	ldrb	r3, [r0, #2]
 80062ca:	2b55      	cmp	r3, #85	; 0x55
 80062cc:	d111      	bne.n	80062f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062ce:	78c3      	ldrb	r3, [r0, #3]
 80062d0:	2b43      	cmp	r3, #67	; 0x43
 80062d2:	d10e      	bne.n	80062f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062d4:	7903      	ldrb	r3, [r0, #4]
 80062d6:	2b43      	cmp	r3, #67	; 0x43
 80062d8:	d10b      	bne.n	80062f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062da:	7943      	ldrb	r3, [r0, #5]
 80062dc:	2b2b      	cmp	r3, #43	; 0x2b
 80062de:	d108      	bne.n	80062f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062e0:	7983      	ldrb	r3, [r0, #6]
 80062e2:	2b2b      	cmp	r3, #43	; 0x2b
 80062e4:	d105      	bne.n	80062f2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062e6:	79c0      	ldrb	r0, [r0, #7]
 80062e8:	2801      	cmp	r0, #1
 80062ea:	bf8c      	ite	hi
 80062ec:	2000      	movhi	r0, #0
 80062ee:	2001      	movls	r0, #1
 80062f0:	4770      	bx	lr
 80062f2:	2000      	movs	r0, #0
 80062f4:	4770      	bx	lr

080062f6 <__cxa_begin_catch>:
 80062f6:	b538      	push	{r3, r4, r5, lr}
 80062f8:	4604      	mov	r4, r0
 80062fa:	f7ff fc51 	bl	8005ba0 <__cxa_get_globals>
 80062fe:	4602      	mov	r2, r0
 8006300:	6805      	ldr	r5, [r0, #0]
 8006302:	4620      	mov	r0, r4
 8006304:	f1a4 0120 	sub.w	r1, r4, #32
 8006308:	f7ff ffd8 	bl	80062bc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800630c:	b928      	cbnz	r0, 800631a <__cxa_begin_catch+0x24>
 800630e:	b10d      	cbz	r5, 8006314 <__cxa_begin_catch+0x1e>
 8006310:	f7ff fed0 	bl	80060b4 <_ZSt9terminatev>
 8006314:	6011      	str	r1, [r2, #0]
 8006316:	4628      	mov	r0, r5
 8006318:	bd38      	pop	{r3, r4, r5, pc}
 800631a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800631e:	4620      	mov	r0, r4
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfb4      	ite	lt
 8006324:	f1c3 0301 	rsblt	r3, r3, #1
 8006328:	3301      	addge	r3, #1
 800632a:	f844 3c0c 	str.w	r3, [r4, #-12]
 800632e:	6853      	ldr	r3, [r2, #4]
 8006330:	428d      	cmp	r5, r1
 8006332:	f103 33ff 	add.w	r3, r3, #4294967295
 8006336:	6053      	str	r3, [r2, #4]
 8006338:	bf1c      	itt	ne
 800633a:	f844 5c10 	strne.w	r5, [r4, #-16]
 800633e:	6011      	strne	r1, [r2, #0]
 8006340:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006342:	f7fa f8e3 	bl	800050c <_Unwind_Complete>
 8006346:	e7e6      	b.n	8006316 <__cxa_begin_catch+0x20>

08006348 <_ZSt15get_new_handlerv>:
 8006348:	4b02      	ldr	r3, [pc, #8]	; (8006354 <_ZSt15get_new_handlerv+0xc>)
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	f3bf 8f5b 	dmb	ish
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20001b58 	.word	0x20001b58

08006358 <abort>:
 8006358:	2006      	movs	r0, #6
 800635a:	b508      	push	{r3, lr}
 800635c:	f000 fb5c 	bl	8006a18 <raise>
 8006360:	2001      	movs	r0, #1
 8006362:	f7fb f9a8 	bl	80016b6 <_exit>
	...

08006368 <__errno>:
 8006368:	4b01      	ldr	r3, [pc, #4]	; (8006370 <__errno+0x8>)
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20000018 	.word	0x20000018

08006374 <std>:
 8006374:	2300      	movs	r3, #0
 8006376:	b510      	push	{r4, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	e9c0 3300 	strd	r3, r3, [r0]
 800637e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006382:	6083      	str	r3, [r0, #8]
 8006384:	8181      	strh	r1, [r0, #12]
 8006386:	6643      	str	r3, [r0, #100]	; 0x64
 8006388:	81c2      	strh	r2, [r0, #14]
 800638a:	6183      	str	r3, [r0, #24]
 800638c:	4619      	mov	r1, r3
 800638e:	2208      	movs	r2, #8
 8006390:	305c      	adds	r0, #92	; 0x5c
 8006392:	f000 f945 	bl	8006620 <memset>
 8006396:	4b05      	ldr	r3, [pc, #20]	; (80063ac <std+0x38>)
 8006398:	6224      	str	r4, [r4, #32]
 800639a:	6263      	str	r3, [r4, #36]	; 0x24
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <std+0x3c>)
 800639e:	62a3      	str	r3, [r4, #40]	; 0x28
 80063a0:	4b04      	ldr	r3, [pc, #16]	; (80063b4 <std+0x40>)
 80063a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <std+0x44>)
 80063a6:	6323      	str	r3, [r4, #48]	; 0x30
 80063a8:	bd10      	pop	{r4, pc}
 80063aa:	bf00      	nop
 80063ac:	08006a51 	.word	0x08006a51
 80063b0:	08006a73 	.word	0x08006a73
 80063b4:	08006aab 	.word	0x08006aab
 80063b8:	08006acf 	.word	0x08006acf

080063bc <_cleanup_r>:
 80063bc:	4901      	ldr	r1, [pc, #4]	; (80063c4 <_cleanup_r+0x8>)
 80063be:	f000 b8af 	b.w	8006520 <_fwalk_reent>
 80063c2:	bf00      	nop
 80063c4:	08006e25 	.word	0x08006e25

080063c8 <__sfmoreglue>:
 80063c8:	2268      	movs	r2, #104	; 0x68
 80063ca:	b570      	push	{r4, r5, r6, lr}
 80063cc:	1e4d      	subs	r5, r1, #1
 80063ce:	4355      	muls	r5, r2
 80063d0:	460e      	mov	r6, r1
 80063d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063d6:	f000 f993 	bl	8006700 <_malloc_r>
 80063da:	4604      	mov	r4, r0
 80063dc:	b140      	cbz	r0, 80063f0 <__sfmoreglue+0x28>
 80063de:	2100      	movs	r1, #0
 80063e0:	e9c0 1600 	strd	r1, r6, [r0]
 80063e4:	300c      	adds	r0, #12
 80063e6:	60a0      	str	r0, [r4, #8]
 80063e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063ec:	f000 f918 	bl	8006620 <memset>
 80063f0:	4620      	mov	r0, r4
 80063f2:	bd70      	pop	{r4, r5, r6, pc}

080063f4 <__sfp_lock_acquire>:
 80063f4:	4801      	ldr	r0, [pc, #4]	; (80063fc <__sfp_lock_acquire+0x8>)
 80063f6:	f000 b8f2 	b.w	80065de <__retarget_lock_acquire_recursive>
 80063fa:	bf00      	nop
 80063fc:	20001b5d 	.word	0x20001b5d

08006400 <__sfp_lock_release>:
 8006400:	4801      	ldr	r0, [pc, #4]	; (8006408 <__sfp_lock_release+0x8>)
 8006402:	f000 b8ed 	b.w	80065e0 <__retarget_lock_release_recursive>
 8006406:	bf00      	nop
 8006408:	20001b5d 	.word	0x20001b5d

0800640c <__sinit_lock_acquire>:
 800640c:	4801      	ldr	r0, [pc, #4]	; (8006414 <__sinit_lock_acquire+0x8>)
 800640e:	f000 b8e6 	b.w	80065de <__retarget_lock_acquire_recursive>
 8006412:	bf00      	nop
 8006414:	20001b5e 	.word	0x20001b5e

08006418 <__sinit_lock_release>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__sinit_lock_release+0x8>)
 800641a:	f000 b8e1 	b.w	80065e0 <__retarget_lock_release_recursive>
 800641e:	bf00      	nop
 8006420:	20001b5e 	.word	0x20001b5e

08006424 <__sinit>:
 8006424:	b510      	push	{r4, lr}
 8006426:	4604      	mov	r4, r0
 8006428:	f7ff fff0 	bl	800640c <__sinit_lock_acquire>
 800642c:	69a3      	ldr	r3, [r4, #24]
 800642e:	b11b      	cbz	r3, 8006438 <__sinit+0x14>
 8006430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006434:	f7ff bff0 	b.w	8006418 <__sinit_lock_release>
 8006438:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800643c:	6523      	str	r3, [r4, #80]	; 0x50
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <__sinit+0x68>)
 8006440:	4a13      	ldr	r2, [pc, #76]	; (8006490 <__sinit+0x6c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	62a2      	str	r2, [r4, #40]	; 0x28
 8006446:	42a3      	cmp	r3, r4
 8006448:	bf08      	it	eq
 800644a:	2301      	moveq	r3, #1
 800644c:	4620      	mov	r0, r4
 800644e:	bf08      	it	eq
 8006450:	61a3      	streq	r3, [r4, #24]
 8006452:	f000 f81f 	bl	8006494 <__sfp>
 8006456:	6060      	str	r0, [r4, #4]
 8006458:	4620      	mov	r0, r4
 800645a:	f000 f81b 	bl	8006494 <__sfp>
 800645e:	60a0      	str	r0, [r4, #8]
 8006460:	4620      	mov	r0, r4
 8006462:	f000 f817 	bl	8006494 <__sfp>
 8006466:	2200      	movs	r2, #0
 8006468:	2104      	movs	r1, #4
 800646a:	60e0      	str	r0, [r4, #12]
 800646c:	6860      	ldr	r0, [r4, #4]
 800646e:	f7ff ff81 	bl	8006374 <std>
 8006472:	2201      	movs	r2, #1
 8006474:	2109      	movs	r1, #9
 8006476:	68a0      	ldr	r0, [r4, #8]
 8006478:	f7ff ff7c 	bl	8006374 <std>
 800647c:	2202      	movs	r2, #2
 800647e:	2112      	movs	r1, #18
 8006480:	68e0      	ldr	r0, [r4, #12]
 8006482:	f7ff ff77 	bl	8006374 <std>
 8006486:	2301      	movs	r3, #1
 8006488:	61a3      	str	r3, [r4, #24]
 800648a:	e7d1      	b.n	8006430 <__sinit+0xc>
 800648c:	080072dc 	.word	0x080072dc
 8006490:	080063bd 	.word	0x080063bd

08006494 <__sfp>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	4607      	mov	r7, r0
 8006498:	f7ff ffac 	bl	80063f4 <__sfp_lock_acquire>
 800649c:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <__sfp+0x84>)
 800649e:	681e      	ldr	r6, [r3, #0]
 80064a0:	69b3      	ldr	r3, [r6, #24]
 80064a2:	b913      	cbnz	r3, 80064aa <__sfp+0x16>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ffbd 	bl	8006424 <__sinit>
 80064aa:	3648      	adds	r6, #72	; 0x48
 80064ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	d503      	bpl.n	80064bc <__sfp+0x28>
 80064b4:	6833      	ldr	r3, [r6, #0]
 80064b6:	b30b      	cbz	r3, 80064fc <__sfp+0x68>
 80064b8:	6836      	ldr	r6, [r6, #0]
 80064ba:	e7f7      	b.n	80064ac <__sfp+0x18>
 80064bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064c0:	b9d5      	cbnz	r5, 80064f8 <__sfp+0x64>
 80064c2:	4b16      	ldr	r3, [pc, #88]	; (800651c <__sfp+0x88>)
 80064c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064c8:	60e3      	str	r3, [r4, #12]
 80064ca:	6665      	str	r5, [r4, #100]	; 0x64
 80064cc:	f000 f886 	bl	80065dc <__retarget_lock_init_recursive>
 80064d0:	f7ff ff96 	bl	8006400 <__sfp_lock_release>
 80064d4:	2208      	movs	r2, #8
 80064d6:	4629      	mov	r1, r5
 80064d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064e0:	6025      	str	r5, [r4, #0]
 80064e2:	61a5      	str	r5, [r4, #24]
 80064e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064e8:	f000 f89a 	bl	8006620 <memset>
 80064ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064f4:	4620      	mov	r0, r4
 80064f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f8:	3468      	adds	r4, #104	; 0x68
 80064fa:	e7d9      	b.n	80064b0 <__sfp+0x1c>
 80064fc:	2104      	movs	r1, #4
 80064fe:	4638      	mov	r0, r7
 8006500:	f7ff ff62 	bl	80063c8 <__sfmoreglue>
 8006504:	4604      	mov	r4, r0
 8006506:	6030      	str	r0, [r6, #0]
 8006508:	2800      	cmp	r0, #0
 800650a:	d1d5      	bne.n	80064b8 <__sfp+0x24>
 800650c:	f7ff ff78 	bl	8006400 <__sfp_lock_release>
 8006510:	230c      	movs	r3, #12
 8006512:	603b      	str	r3, [r7, #0]
 8006514:	e7ee      	b.n	80064f4 <__sfp+0x60>
 8006516:	bf00      	nop
 8006518:	080072dc 	.word	0x080072dc
 800651c:	ffff0001 	.word	0xffff0001

08006520 <_fwalk_reent>:
 8006520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006524:	4606      	mov	r6, r0
 8006526:	4688      	mov	r8, r1
 8006528:	2700      	movs	r7, #0
 800652a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800652e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006532:	f1b9 0901 	subs.w	r9, r9, #1
 8006536:	d505      	bpl.n	8006544 <_fwalk_reent+0x24>
 8006538:	6824      	ldr	r4, [r4, #0]
 800653a:	2c00      	cmp	r4, #0
 800653c:	d1f7      	bne.n	800652e <_fwalk_reent+0xe>
 800653e:	4638      	mov	r0, r7
 8006540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006544:	89ab      	ldrh	r3, [r5, #12]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d907      	bls.n	800655a <_fwalk_reent+0x3a>
 800654a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800654e:	3301      	adds	r3, #1
 8006550:	d003      	beq.n	800655a <_fwalk_reent+0x3a>
 8006552:	4629      	mov	r1, r5
 8006554:	4630      	mov	r0, r6
 8006556:	47c0      	blx	r8
 8006558:	4307      	orrs	r7, r0
 800655a:	3568      	adds	r5, #104	; 0x68
 800655c:	e7e9      	b.n	8006532 <_fwalk_reent+0x12>
	...

08006560 <__libc_init_array>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	2600      	movs	r6, #0
 8006564:	4d0c      	ldr	r5, [pc, #48]	; (8006598 <__libc_init_array+0x38>)
 8006566:	4c0d      	ldr	r4, [pc, #52]	; (800659c <__libc_init_array+0x3c>)
 8006568:	1b64      	subs	r4, r4, r5
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	42a6      	cmp	r6, r4
 800656e:	d109      	bne.n	8006584 <__libc_init_array+0x24>
 8006570:	f000 fd52 	bl	8007018 <_init>
 8006574:	2600      	movs	r6, #0
 8006576:	4d0a      	ldr	r5, [pc, #40]	; (80065a0 <__libc_init_array+0x40>)
 8006578:	4c0a      	ldr	r4, [pc, #40]	; (80065a4 <__libc_init_array+0x44>)
 800657a:	1b64      	subs	r4, r4, r5
 800657c:	10a4      	asrs	r4, r4, #2
 800657e:	42a6      	cmp	r6, r4
 8006580:	d105      	bne.n	800658e <__libc_init_array+0x2e>
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	f855 3b04 	ldr.w	r3, [r5], #4
 8006588:	4798      	blx	r3
 800658a:	3601      	adds	r6, #1
 800658c:	e7ee      	b.n	800656c <__libc_init_array+0xc>
 800658e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006592:	4798      	blx	r3
 8006594:	3601      	adds	r6, #1
 8006596:	e7f2      	b.n	800657e <__libc_init_array+0x1e>
 8006598:	080074ac 	.word	0x080074ac
 800659c:	080074ac 	.word	0x080074ac
 80065a0:	080074ac 	.word	0x080074ac
 80065a4:	080074b8 	.word	0x080074b8

080065a8 <__itoa>:
 80065a8:	1e93      	subs	r3, r2, #2
 80065aa:	2b22      	cmp	r3, #34	; 0x22
 80065ac:	b510      	push	{r4, lr}
 80065ae:	460c      	mov	r4, r1
 80065b0:	d904      	bls.n	80065bc <__itoa+0x14>
 80065b2:	2300      	movs	r3, #0
 80065b4:	461c      	mov	r4, r3
 80065b6:	700b      	strb	r3, [r1, #0]
 80065b8:	4620      	mov	r0, r4
 80065ba:	bd10      	pop	{r4, pc}
 80065bc:	2a0a      	cmp	r2, #10
 80065be:	d109      	bne.n	80065d4 <__itoa+0x2c>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	da07      	bge.n	80065d4 <__itoa+0x2c>
 80065c4:	232d      	movs	r3, #45	; 0x2d
 80065c6:	700b      	strb	r3, [r1, #0]
 80065c8:	2101      	movs	r1, #1
 80065ca:	4240      	negs	r0, r0
 80065cc:	4421      	add	r1, r4
 80065ce:	f000 fa83 	bl	8006ad8 <__utoa>
 80065d2:	e7f1      	b.n	80065b8 <__itoa+0x10>
 80065d4:	2100      	movs	r1, #0
 80065d6:	e7f9      	b.n	80065cc <__itoa+0x24>

080065d8 <itoa>:
 80065d8:	f7ff bfe6 	b.w	80065a8 <__itoa>

080065dc <__retarget_lock_init_recursive>:
 80065dc:	4770      	bx	lr

080065de <__retarget_lock_acquire_recursive>:
 80065de:	4770      	bx	lr

080065e0 <__retarget_lock_release_recursive>:
 80065e0:	4770      	bx	lr
	...

080065e4 <malloc>:
 80065e4:	4b02      	ldr	r3, [pc, #8]	; (80065f0 <malloc+0xc>)
 80065e6:	4601      	mov	r1, r0
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	f000 b889 	b.w	8006700 <_malloc_r>
 80065ee:	bf00      	nop
 80065f0:	20000018 	.word	0x20000018

080065f4 <free>:
 80065f4:	4b02      	ldr	r3, [pc, #8]	; (8006600 <free+0xc>)
 80065f6:	4601      	mov	r1, r0
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	f000 b819 	b.w	8006630 <_free_r>
 80065fe:	bf00      	nop
 8006600:	20000018 	.word	0x20000018

08006604 <memcpy>:
 8006604:	440a      	add	r2, r1
 8006606:	4291      	cmp	r1, r2
 8006608:	f100 33ff 	add.w	r3, r0, #4294967295
 800660c:	d100      	bne.n	8006610 <memcpy+0xc>
 800660e:	4770      	bx	lr
 8006610:	b510      	push	{r4, lr}
 8006612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006616:	4291      	cmp	r1, r2
 8006618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661c:	d1f9      	bne.n	8006612 <memcpy+0xe>
 800661e:	bd10      	pop	{r4, pc}

08006620 <memset>:
 8006620:	4603      	mov	r3, r0
 8006622:	4402      	add	r2, r0
 8006624:	4293      	cmp	r3, r2
 8006626:	d100      	bne.n	800662a <memset+0xa>
 8006628:	4770      	bx	lr
 800662a:	f803 1b01 	strb.w	r1, [r3], #1
 800662e:	e7f9      	b.n	8006624 <memset+0x4>

08006630 <_free_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4605      	mov	r5, r0
 8006634:	2900      	cmp	r1, #0
 8006636:	d040      	beq.n	80066ba <_free_r+0x8a>
 8006638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663c:	1f0c      	subs	r4, r1, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfb8      	it	lt
 8006642:	18e4      	addlt	r4, r4, r3
 8006644:	f000 fca2 	bl	8006f8c <__malloc_lock>
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <_free_r+0x8c>)
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	b933      	cbnz	r3, 800665c <_free_r+0x2c>
 800664e:	6063      	str	r3, [r4, #4]
 8006650:	6014      	str	r4, [r2, #0]
 8006652:	4628      	mov	r0, r5
 8006654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006658:	f000 bc9e 	b.w	8006f98 <__malloc_unlock>
 800665c:	42a3      	cmp	r3, r4
 800665e:	d908      	bls.n	8006672 <_free_r+0x42>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	1821      	adds	r1, r4, r0
 8006664:	428b      	cmp	r3, r1
 8006666:	bf01      	itttt	eq
 8006668:	6819      	ldreq	r1, [r3, #0]
 800666a:	685b      	ldreq	r3, [r3, #4]
 800666c:	1809      	addeq	r1, r1, r0
 800666e:	6021      	streq	r1, [r4, #0]
 8006670:	e7ed      	b.n	800664e <_free_r+0x1e>
 8006672:	461a      	mov	r2, r3
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	b10b      	cbz	r3, 800667c <_free_r+0x4c>
 8006678:	42a3      	cmp	r3, r4
 800667a:	d9fa      	bls.n	8006672 <_free_r+0x42>
 800667c:	6811      	ldr	r1, [r2, #0]
 800667e:	1850      	adds	r0, r2, r1
 8006680:	42a0      	cmp	r0, r4
 8006682:	d10b      	bne.n	800669c <_free_r+0x6c>
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	4401      	add	r1, r0
 8006688:	1850      	adds	r0, r2, r1
 800668a:	4283      	cmp	r3, r0
 800668c:	6011      	str	r1, [r2, #0]
 800668e:	d1e0      	bne.n	8006652 <_free_r+0x22>
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4401      	add	r1, r0
 8006696:	6011      	str	r1, [r2, #0]
 8006698:	6053      	str	r3, [r2, #4]
 800669a:	e7da      	b.n	8006652 <_free_r+0x22>
 800669c:	d902      	bls.n	80066a4 <_free_r+0x74>
 800669e:	230c      	movs	r3, #12
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	e7d6      	b.n	8006652 <_free_r+0x22>
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	1821      	adds	r1, r4, r0
 80066a8:	428b      	cmp	r3, r1
 80066aa:	bf01      	itttt	eq
 80066ac:	6819      	ldreq	r1, [r3, #0]
 80066ae:	685b      	ldreq	r3, [r3, #4]
 80066b0:	1809      	addeq	r1, r1, r0
 80066b2:	6021      	streq	r1, [r4, #0]
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	6054      	str	r4, [r2, #4]
 80066b8:	e7cb      	b.n	8006652 <_free_r+0x22>
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	20001b60 	.word	0x20001b60

080066c0 <sbrk_aligned>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	4e0e      	ldr	r6, [pc, #56]	; (80066fc <sbrk_aligned+0x3c>)
 80066c4:	460c      	mov	r4, r1
 80066c6:	6831      	ldr	r1, [r6, #0]
 80066c8:	4605      	mov	r5, r0
 80066ca:	b911      	cbnz	r1, 80066d2 <sbrk_aligned+0x12>
 80066cc:	f000 f96c 	bl	80069a8 <_sbrk_r>
 80066d0:	6030      	str	r0, [r6, #0]
 80066d2:	4621      	mov	r1, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 f967 	bl	80069a8 <_sbrk_r>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	d00a      	beq.n	80066f4 <sbrk_aligned+0x34>
 80066de:	1cc4      	adds	r4, r0, #3
 80066e0:	f024 0403 	bic.w	r4, r4, #3
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d007      	beq.n	80066f8 <sbrk_aligned+0x38>
 80066e8:	1a21      	subs	r1, r4, r0
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 f95c 	bl	80069a8 <_sbrk_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d101      	bne.n	80066f8 <sbrk_aligned+0x38>
 80066f4:	f04f 34ff 	mov.w	r4, #4294967295
 80066f8:	4620      	mov	r0, r4
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	20001b64 	.word	0x20001b64

08006700 <_malloc_r>:
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	1ccd      	adds	r5, r1, #3
 8006706:	f025 0503 	bic.w	r5, r5, #3
 800670a:	3508      	adds	r5, #8
 800670c:	2d0c      	cmp	r5, #12
 800670e:	bf38      	it	cc
 8006710:	250c      	movcc	r5, #12
 8006712:	2d00      	cmp	r5, #0
 8006714:	4607      	mov	r7, r0
 8006716:	db01      	blt.n	800671c <_malloc_r+0x1c>
 8006718:	42a9      	cmp	r1, r5
 800671a:	d905      	bls.n	8006728 <_malloc_r+0x28>
 800671c:	230c      	movs	r3, #12
 800671e:	2600      	movs	r6, #0
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	4630      	mov	r0, r6
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	4e2e      	ldr	r6, [pc, #184]	; (80067e4 <_malloc_r+0xe4>)
 800672a:	f000 fc2f 	bl	8006f8c <__malloc_lock>
 800672e:	6833      	ldr	r3, [r6, #0]
 8006730:	461c      	mov	r4, r3
 8006732:	bb34      	cbnz	r4, 8006782 <_malloc_r+0x82>
 8006734:	4629      	mov	r1, r5
 8006736:	4638      	mov	r0, r7
 8006738:	f7ff ffc2 	bl	80066c0 <sbrk_aligned>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	4604      	mov	r4, r0
 8006740:	d14d      	bne.n	80067de <_malloc_r+0xde>
 8006742:	6834      	ldr	r4, [r6, #0]
 8006744:	4626      	mov	r6, r4
 8006746:	2e00      	cmp	r6, #0
 8006748:	d140      	bne.n	80067cc <_malloc_r+0xcc>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	4631      	mov	r1, r6
 800674e:	4638      	mov	r0, r7
 8006750:	eb04 0803 	add.w	r8, r4, r3
 8006754:	f000 f928 	bl	80069a8 <_sbrk_r>
 8006758:	4580      	cmp	r8, r0
 800675a:	d13a      	bne.n	80067d2 <_malloc_r+0xd2>
 800675c:	6821      	ldr	r1, [r4, #0]
 800675e:	3503      	adds	r5, #3
 8006760:	1a6d      	subs	r5, r5, r1
 8006762:	f025 0503 	bic.w	r5, r5, #3
 8006766:	3508      	adds	r5, #8
 8006768:	2d0c      	cmp	r5, #12
 800676a:	bf38      	it	cc
 800676c:	250c      	movcc	r5, #12
 800676e:	4638      	mov	r0, r7
 8006770:	4629      	mov	r1, r5
 8006772:	f7ff ffa5 	bl	80066c0 <sbrk_aligned>
 8006776:	3001      	adds	r0, #1
 8006778:	d02b      	beq.n	80067d2 <_malloc_r+0xd2>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	442b      	add	r3, r5
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	e00e      	b.n	80067a0 <_malloc_r+0xa0>
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	1b52      	subs	r2, r2, r5
 8006786:	d41e      	bmi.n	80067c6 <_malloc_r+0xc6>
 8006788:	2a0b      	cmp	r2, #11
 800678a:	d916      	bls.n	80067ba <_malloc_r+0xba>
 800678c:	1961      	adds	r1, r4, r5
 800678e:	42a3      	cmp	r3, r4
 8006790:	6025      	str	r5, [r4, #0]
 8006792:	bf18      	it	ne
 8006794:	6059      	strne	r1, [r3, #4]
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	bf08      	it	eq
 800679a:	6031      	streq	r1, [r6, #0]
 800679c:	5162      	str	r2, [r4, r5]
 800679e:	604b      	str	r3, [r1, #4]
 80067a0:	4638      	mov	r0, r7
 80067a2:	f104 060b 	add.w	r6, r4, #11
 80067a6:	f000 fbf7 	bl	8006f98 <__malloc_unlock>
 80067aa:	f026 0607 	bic.w	r6, r6, #7
 80067ae:	1d23      	adds	r3, r4, #4
 80067b0:	1af2      	subs	r2, r6, r3
 80067b2:	d0b6      	beq.n	8006722 <_malloc_r+0x22>
 80067b4:	1b9b      	subs	r3, r3, r6
 80067b6:	50a3      	str	r3, [r4, r2]
 80067b8:	e7b3      	b.n	8006722 <_malloc_r+0x22>
 80067ba:	6862      	ldr	r2, [r4, #4]
 80067bc:	42a3      	cmp	r3, r4
 80067be:	bf0c      	ite	eq
 80067c0:	6032      	streq	r2, [r6, #0]
 80067c2:	605a      	strne	r2, [r3, #4]
 80067c4:	e7ec      	b.n	80067a0 <_malloc_r+0xa0>
 80067c6:	4623      	mov	r3, r4
 80067c8:	6864      	ldr	r4, [r4, #4]
 80067ca:	e7b2      	b.n	8006732 <_malloc_r+0x32>
 80067cc:	4634      	mov	r4, r6
 80067ce:	6876      	ldr	r6, [r6, #4]
 80067d0:	e7b9      	b.n	8006746 <_malloc_r+0x46>
 80067d2:	230c      	movs	r3, #12
 80067d4:	4638      	mov	r0, r7
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	f000 fbde 	bl	8006f98 <__malloc_unlock>
 80067dc:	e7a1      	b.n	8006722 <_malloc_r+0x22>
 80067de:	6025      	str	r5, [r4, #0]
 80067e0:	e7de      	b.n	80067a0 <_malloc_r+0xa0>
 80067e2:	bf00      	nop
 80067e4:	20001b60 	.word	0x20001b60

080067e8 <_puts_r>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	460e      	mov	r6, r1
 80067ec:	4605      	mov	r5, r0
 80067ee:	b118      	cbz	r0, 80067f8 <_puts_r+0x10>
 80067f0:	6983      	ldr	r3, [r0, #24]
 80067f2:	b90b      	cbnz	r3, 80067f8 <_puts_r+0x10>
 80067f4:	f7ff fe16 	bl	8006424 <__sinit>
 80067f8:	69ab      	ldr	r3, [r5, #24]
 80067fa:	68ac      	ldr	r4, [r5, #8]
 80067fc:	b913      	cbnz	r3, 8006804 <_puts_r+0x1c>
 80067fe:	4628      	mov	r0, r5
 8006800:	f7ff fe10 	bl	8006424 <__sinit>
 8006804:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <_puts_r+0xd0>)
 8006806:	429c      	cmp	r4, r3
 8006808:	d120      	bne.n	800684c <_puts_r+0x64>
 800680a:	686c      	ldr	r4, [r5, #4]
 800680c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800680e:	07db      	lsls	r3, r3, #31
 8006810:	d405      	bmi.n	800681e <_puts_r+0x36>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	0598      	lsls	r0, r3, #22
 8006816:	d402      	bmi.n	800681e <_puts_r+0x36>
 8006818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800681a:	f7ff fee0 	bl	80065de <__retarget_lock_acquire_recursive>
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	0719      	lsls	r1, r3, #28
 8006822:	d51d      	bpl.n	8006860 <_puts_r+0x78>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	b1db      	cbz	r3, 8006860 <_puts_r+0x78>
 8006828:	3e01      	subs	r6, #1
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006830:	3b01      	subs	r3, #1
 8006832:	60a3      	str	r3, [r4, #8]
 8006834:	bb39      	cbnz	r1, 8006886 <_puts_r+0x9e>
 8006836:	2b00      	cmp	r3, #0
 8006838:	da38      	bge.n	80068ac <_puts_r+0xc4>
 800683a:	4622      	mov	r2, r4
 800683c:	210a      	movs	r1, #10
 800683e:	4628      	mov	r0, r5
 8006840:	f000 f98c 	bl	8006b5c <__swbuf_r>
 8006844:	3001      	adds	r0, #1
 8006846:	d011      	beq.n	800686c <_puts_r+0x84>
 8006848:	250a      	movs	r5, #10
 800684a:	e011      	b.n	8006870 <_puts_r+0x88>
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <_puts_r+0xd4>)
 800684e:	429c      	cmp	r4, r3
 8006850:	d101      	bne.n	8006856 <_puts_r+0x6e>
 8006852:	68ac      	ldr	r4, [r5, #8]
 8006854:	e7da      	b.n	800680c <_puts_r+0x24>
 8006856:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <_puts_r+0xd8>)
 8006858:	429c      	cmp	r4, r3
 800685a:	bf08      	it	eq
 800685c:	68ec      	ldreq	r4, [r5, #12]
 800685e:	e7d5      	b.n	800680c <_puts_r+0x24>
 8006860:	4621      	mov	r1, r4
 8006862:	4628      	mov	r0, r5
 8006864:	f000 f9de 	bl	8006c24 <__swsetup_r>
 8006868:	2800      	cmp	r0, #0
 800686a:	d0dd      	beq.n	8006828 <_puts_r+0x40>
 800686c:	f04f 35ff 	mov.w	r5, #4294967295
 8006870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006872:	07da      	lsls	r2, r3, #31
 8006874:	d405      	bmi.n	8006882 <_puts_r+0x9a>
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	059b      	lsls	r3, r3, #22
 800687a:	d402      	bmi.n	8006882 <_puts_r+0x9a>
 800687c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800687e:	f7ff feaf 	bl	80065e0 <__retarget_lock_release_recursive>
 8006882:	4628      	mov	r0, r5
 8006884:	bd70      	pop	{r4, r5, r6, pc}
 8006886:	2b00      	cmp	r3, #0
 8006888:	da04      	bge.n	8006894 <_puts_r+0xac>
 800688a:	69a2      	ldr	r2, [r4, #24]
 800688c:	429a      	cmp	r2, r3
 800688e:	dc06      	bgt.n	800689e <_puts_r+0xb6>
 8006890:	290a      	cmp	r1, #10
 8006892:	d004      	beq.n	800689e <_puts_r+0xb6>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	6022      	str	r2, [r4, #0]
 800689a:	7019      	strb	r1, [r3, #0]
 800689c:	e7c5      	b.n	800682a <_puts_r+0x42>
 800689e:	4622      	mov	r2, r4
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 f95b 	bl	8006b5c <__swbuf_r>
 80068a6:	3001      	adds	r0, #1
 80068a8:	d1bf      	bne.n	800682a <_puts_r+0x42>
 80068aa:	e7df      	b.n	800686c <_puts_r+0x84>
 80068ac:	250a      	movs	r5, #10
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	6022      	str	r2, [r4, #0]
 80068b4:	701d      	strb	r5, [r3, #0]
 80068b6:	e7db      	b.n	8006870 <_puts_r+0x88>
 80068b8:	0800729c 	.word	0x0800729c
 80068bc:	080072bc 	.word	0x080072bc
 80068c0:	0800727c 	.word	0x0800727c

080068c4 <puts>:
 80068c4:	4b02      	ldr	r3, [pc, #8]	; (80068d0 <puts+0xc>)
 80068c6:	4601      	mov	r1, r0
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	f7ff bf8d 	b.w	80067e8 <_puts_r>
 80068ce:	bf00      	nop
 80068d0:	20000018 	.word	0x20000018

080068d4 <cleanup_glue>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	460c      	mov	r4, r1
 80068d8:	6809      	ldr	r1, [r1, #0]
 80068da:	4605      	mov	r5, r0
 80068dc:	b109      	cbz	r1, 80068e2 <cleanup_glue+0xe>
 80068de:	f7ff fff9 	bl	80068d4 <cleanup_glue>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ea:	f7ff bea1 	b.w	8006630 <_free_r>
	...

080068f0 <_reclaim_reent>:
 80068f0:	4b2c      	ldr	r3, [pc, #176]	; (80069a4 <_reclaim_reent+0xb4>)
 80068f2:	b570      	push	{r4, r5, r6, lr}
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4604      	mov	r4, r0
 80068f8:	4283      	cmp	r3, r0
 80068fa:	d051      	beq.n	80069a0 <_reclaim_reent+0xb0>
 80068fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068fe:	b143      	cbz	r3, 8006912 <_reclaim_reent+0x22>
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d14a      	bne.n	800699c <_reclaim_reent+0xac>
 8006906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006908:	6819      	ldr	r1, [r3, #0]
 800690a:	b111      	cbz	r1, 8006912 <_reclaim_reent+0x22>
 800690c:	4620      	mov	r0, r4
 800690e:	f7ff fe8f 	bl	8006630 <_free_r>
 8006912:	6961      	ldr	r1, [r4, #20]
 8006914:	b111      	cbz	r1, 800691c <_reclaim_reent+0x2c>
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff fe8a 	bl	8006630 <_free_r>
 800691c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800691e:	b111      	cbz	r1, 8006926 <_reclaim_reent+0x36>
 8006920:	4620      	mov	r0, r4
 8006922:	f7ff fe85 	bl	8006630 <_free_r>
 8006926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006928:	b111      	cbz	r1, 8006930 <_reclaim_reent+0x40>
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff fe80 	bl	8006630 <_free_r>
 8006930:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006932:	b111      	cbz	r1, 800693a <_reclaim_reent+0x4a>
 8006934:	4620      	mov	r0, r4
 8006936:	f7ff fe7b 	bl	8006630 <_free_r>
 800693a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800693c:	b111      	cbz	r1, 8006944 <_reclaim_reent+0x54>
 800693e:	4620      	mov	r0, r4
 8006940:	f7ff fe76 	bl	8006630 <_free_r>
 8006944:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006946:	b111      	cbz	r1, 800694e <_reclaim_reent+0x5e>
 8006948:	4620      	mov	r0, r4
 800694a:	f7ff fe71 	bl	8006630 <_free_r>
 800694e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006950:	b111      	cbz	r1, 8006958 <_reclaim_reent+0x68>
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff fe6c 	bl	8006630 <_free_r>
 8006958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695a:	b111      	cbz	r1, 8006962 <_reclaim_reent+0x72>
 800695c:	4620      	mov	r0, r4
 800695e:	f7ff fe67 	bl	8006630 <_free_r>
 8006962:	69a3      	ldr	r3, [r4, #24]
 8006964:	b1e3      	cbz	r3, 80069a0 <_reclaim_reent+0xb0>
 8006966:	4620      	mov	r0, r4
 8006968:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800696a:	4798      	blx	r3
 800696c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800696e:	b1b9      	cbz	r1, 80069a0 <_reclaim_reent+0xb0>
 8006970:	4620      	mov	r0, r4
 8006972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006976:	f7ff bfad 	b.w	80068d4 <cleanup_glue>
 800697a:	5949      	ldr	r1, [r1, r5]
 800697c:	b941      	cbnz	r1, 8006990 <_reclaim_reent+0xa0>
 800697e:	3504      	adds	r5, #4
 8006980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006982:	2d80      	cmp	r5, #128	; 0x80
 8006984:	68d9      	ldr	r1, [r3, #12]
 8006986:	d1f8      	bne.n	800697a <_reclaim_reent+0x8a>
 8006988:	4620      	mov	r0, r4
 800698a:	f7ff fe51 	bl	8006630 <_free_r>
 800698e:	e7ba      	b.n	8006906 <_reclaim_reent+0x16>
 8006990:	680e      	ldr	r6, [r1, #0]
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fe4c 	bl	8006630 <_free_r>
 8006998:	4631      	mov	r1, r6
 800699a:	e7ef      	b.n	800697c <_reclaim_reent+0x8c>
 800699c:	2500      	movs	r5, #0
 800699e:	e7ef      	b.n	8006980 <_reclaim_reent+0x90>
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	bf00      	nop
 80069a4:	20000018 	.word	0x20000018

080069a8 <_sbrk_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	2300      	movs	r3, #0
 80069ac:	4d05      	ldr	r5, [pc, #20]	; (80069c4 <_sbrk_r+0x1c>)
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fa fef2 	bl	800179c <_sbrk>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_sbrk_r+0x1a>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_sbrk_r+0x1a>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20001b68 	.word	0x20001b68

080069c8 <_raise_r>:
 80069c8:	291f      	cmp	r1, #31
 80069ca:	b538      	push	{r3, r4, r5, lr}
 80069cc:	4604      	mov	r4, r0
 80069ce:	460d      	mov	r5, r1
 80069d0:	d904      	bls.n	80069dc <_raise_r+0x14>
 80069d2:	2316      	movs	r3, #22
 80069d4:	6003      	str	r3, [r0, #0]
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80069de:	b112      	cbz	r2, 80069e6 <_raise_r+0x1e>
 80069e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069e4:	b94b      	cbnz	r3, 80069fa <_raise_r+0x32>
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 f830 	bl	8006a4c <_getpid_r>
 80069ec:	462a      	mov	r2, r5
 80069ee:	4601      	mov	r1, r0
 80069f0:	4620      	mov	r0, r4
 80069f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f6:	f000 b817 	b.w	8006a28 <_kill_r>
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d00a      	beq.n	8006a14 <_raise_r+0x4c>
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	d103      	bne.n	8006a0a <_raise_r+0x42>
 8006a02:	2316      	movs	r3, #22
 8006a04:	6003      	str	r3, [r0, #0]
 8006a06:	2001      	movs	r0, #1
 8006a08:	e7e7      	b.n	80069da <_raise_r+0x12>
 8006a0a:	2400      	movs	r4, #0
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a12:	4798      	blx	r3
 8006a14:	2000      	movs	r0, #0
 8006a16:	e7e0      	b.n	80069da <_raise_r+0x12>

08006a18 <raise>:
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <raise+0xc>)
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	f7ff bfd3 	b.w	80069c8 <_raise_r>
 8006a22:	bf00      	nop
 8006a24:	20000018 	.word	0x20000018

08006a28 <_kill_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4d06      	ldr	r5, [pc, #24]	; (8006a48 <_kill_r+0x20>)
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	f7fa fe2e 	bl	8001696 <_kill>
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	d102      	bne.n	8006a44 <_kill_r+0x1c>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	b103      	cbz	r3, 8006a44 <_kill_r+0x1c>
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	20001b68 	.word	0x20001b68

08006a4c <_getpid_r>:
 8006a4c:	f7fa be1c 	b.w	8001688 <_getpid>

08006a50 <__sread>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	460c      	mov	r4, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	f000 faa4 	bl	8006fa4 <_read_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	bfab      	itete	ge
 8006a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a62:	89a3      	ldrhlt	r3, [r4, #12]
 8006a64:	181b      	addge	r3, r3, r0
 8006a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a6a:	bfac      	ite	ge
 8006a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a6e:	81a3      	strhlt	r3, [r4, #12]
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <__swrite>:
 8006a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	461f      	mov	r7, r3
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	05db      	lsls	r3, r3, #23
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4616      	mov	r6, r2
 8006a82:	d505      	bpl.n	8006a90 <__swrite+0x1e>
 8006a84:	2302      	movs	r3, #2
 8006a86:	2200      	movs	r2, #0
 8006a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8c:	f000 fa06 	bl	8006e9c <_lseek_r>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	4632      	mov	r2, r6
 8006a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	f000 b8ab 	b.w	8006c00 <_write_r>

08006aaa <__sseek>:
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 f9f3 	bl	8006e9c <_lseek_r>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	bf15      	itete	ne
 8006abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ac6:	81a3      	strheq	r3, [r4, #12]
 8006ac8:	bf18      	it	ne
 8006aca:	81a3      	strhne	r3, [r4, #12]
 8006acc:	bd10      	pop	{r4, pc}

08006ace <__sclose>:
 8006ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad2:	f000 b915 	b.w	8006d00 <_close_r>
	...

08006ad8 <__utoa>:
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b08b      	sub	sp, #44	; 0x2c
 8006adc:	4605      	mov	r5, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	466e      	mov	r6, sp
 8006ae2:	4c1d      	ldr	r4, [pc, #116]	; (8006b58 <__utoa+0x80>)
 8006ae4:	f104 0c20 	add.w	ip, r4, #32
 8006ae8:	4637      	mov	r7, r6
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	6861      	ldr	r1, [r4, #4]
 8006aee:	3408      	adds	r4, #8
 8006af0:	c703      	stmia	r7!, {r0, r1}
 8006af2:	4564      	cmp	r4, ip
 8006af4:	463e      	mov	r6, r7
 8006af6:	d1f7      	bne.n	8006ae8 <__utoa+0x10>
 8006af8:	7921      	ldrb	r1, [r4, #4]
 8006afa:	6820      	ldr	r0, [r4, #0]
 8006afc:	7139      	strb	r1, [r7, #4]
 8006afe:	1e91      	subs	r1, r2, #2
 8006b00:	2922      	cmp	r1, #34	; 0x22
 8006b02:	6038      	str	r0, [r7, #0]
 8006b04:	f04f 0100 	mov.w	r1, #0
 8006b08:	d904      	bls.n	8006b14 <__utoa+0x3c>
 8006b0a:	7019      	strb	r1, [r3, #0]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	b00b      	add	sp, #44	; 0x2c
 8006b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b14:	1e58      	subs	r0, r3, #1
 8006b16:	4684      	mov	ip, r0
 8006b18:	fbb5 f7f2 	udiv	r7, r5, r2
 8006b1c:	fb02 5617 	mls	r6, r2, r7, r5
 8006b20:	3628      	adds	r6, #40	; 0x28
 8006b22:	446e      	add	r6, sp
 8006b24:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006b28:	460c      	mov	r4, r1
 8006b2a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006b2e:	462e      	mov	r6, r5
 8006b30:	42b2      	cmp	r2, r6
 8006b32:	463d      	mov	r5, r7
 8006b34:	f101 0101 	add.w	r1, r1, #1
 8006b38:	d9ee      	bls.n	8006b18 <__utoa+0x40>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	545a      	strb	r2, [r3, r1]
 8006b3e:	1919      	adds	r1, r3, r4
 8006b40:	1aa5      	subs	r5, r4, r2
 8006b42:	42aa      	cmp	r2, r5
 8006b44:	dae3      	bge.n	8006b0e <__utoa+0x36>
 8006b46:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006b4a:	780e      	ldrb	r6, [r1, #0]
 8006b4c:	3201      	adds	r2, #1
 8006b4e:	7006      	strb	r6, [r0, #0]
 8006b50:	f801 5901 	strb.w	r5, [r1], #-1
 8006b54:	e7f4      	b.n	8006b40 <__utoa+0x68>
 8006b56:	bf00      	nop
 8006b58:	080072e0 	.word	0x080072e0

08006b5c <__swbuf_r>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	460e      	mov	r6, r1
 8006b60:	4614      	mov	r4, r2
 8006b62:	4605      	mov	r5, r0
 8006b64:	b118      	cbz	r0, 8006b6e <__swbuf_r+0x12>
 8006b66:	6983      	ldr	r3, [r0, #24]
 8006b68:	b90b      	cbnz	r3, 8006b6e <__swbuf_r+0x12>
 8006b6a:	f7ff fc5b 	bl	8006424 <__sinit>
 8006b6e:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <__swbuf_r+0x98>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d12b      	bne.n	8006bcc <__swbuf_r+0x70>
 8006b74:	686c      	ldr	r4, [r5, #4]
 8006b76:	69a3      	ldr	r3, [r4, #24]
 8006b78:	60a3      	str	r3, [r4, #8]
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	071a      	lsls	r2, r3, #28
 8006b7e:	d52f      	bpl.n	8006be0 <__swbuf_r+0x84>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	b36b      	cbz	r3, 8006be0 <__swbuf_r+0x84>
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	b2f6      	uxtb	r6, r6
 8006b8a:	1ac0      	subs	r0, r0, r3
 8006b8c:	6963      	ldr	r3, [r4, #20]
 8006b8e:	4637      	mov	r7, r6
 8006b90:	4283      	cmp	r3, r0
 8006b92:	dc04      	bgt.n	8006b9e <__swbuf_r+0x42>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f944 	bl	8006e24 <_fflush_r>
 8006b9c:	bb30      	cbnz	r0, 8006bec <__swbuf_r+0x90>
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	60a3      	str	r3, [r4, #8]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	6022      	str	r2, [r4, #0]
 8006bac:	701e      	strb	r6, [r3, #0]
 8006bae:	6963      	ldr	r3, [r4, #20]
 8006bb0:	4283      	cmp	r3, r0
 8006bb2:	d004      	beq.n	8006bbe <__swbuf_r+0x62>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	07db      	lsls	r3, r3, #31
 8006bb8:	d506      	bpl.n	8006bc8 <__swbuf_r+0x6c>
 8006bba:	2e0a      	cmp	r6, #10
 8006bbc:	d104      	bne.n	8006bc8 <__swbuf_r+0x6c>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 f92f 	bl	8006e24 <_fflush_r>
 8006bc6:	b988      	cbnz	r0, 8006bec <__swbuf_r+0x90>
 8006bc8:	4638      	mov	r0, r7
 8006bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <__swbuf_r+0x9c>)
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d101      	bne.n	8006bd6 <__swbuf_r+0x7a>
 8006bd2:	68ac      	ldr	r4, [r5, #8]
 8006bd4:	e7cf      	b.n	8006b76 <__swbuf_r+0x1a>
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <__swbuf_r+0xa0>)
 8006bd8:	429c      	cmp	r4, r3
 8006bda:	bf08      	it	eq
 8006bdc:	68ec      	ldreq	r4, [r5, #12]
 8006bde:	e7ca      	b.n	8006b76 <__swbuf_r+0x1a>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 f81e 	bl	8006c24 <__swsetup_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d0cb      	beq.n	8006b84 <__swbuf_r+0x28>
 8006bec:	f04f 37ff 	mov.w	r7, #4294967295
 8006bf0:	e7ea      	b.n	8006bc8 <__swbuf_r+0x6c>
 8006bf2:	bf00      	nop
 8006bf4:	0800729c 	.word	0x0800729c
 8006bf8:	080072bc 	.word	0x080072bc
 8006bfc:	0800727c 	.word	0x0800727c

08006c00 <_write_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4d05      	ldr	r5, [pc, #20]	; (8006c20 <_write_r+0x20>)
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f7fa fd78 	bl	8001704 <_write>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_write_r+0x1e>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_write_r+0x1e>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	20001b68 	.word	0x20001b68

08006c24 <__swsetup_r>:
 8006c24:	4b32      	ldr	r3, [pc, #200]	; (8006cf0 <__swsetup_r+0xcc>)
 8006c26:	b570      	push	{r4, r5, r6, lr}
 8006c28:	681d      	ldr	r5, [r3, #0]
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	b125      	cbz	r5, 8006c3a <__swsetup_r+0x16>
 8006c30:	69ab      	ldr	r3, [r5, #24]
 8006c32:	b913      	cbnz	r3, 8006c3a <__swsetup_r+0x16>
 8006c34:	4628      	mov	r0, r5
 8006c36:	f7ff fbf5 	bl	8006424 <__sinit>
 8006c3a:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <__swsetup_r+0xd0>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	d10f      	bne.n	8006c60 <__swsetup_r+0x3c>
 8006c40:	686c      	ldr	r4, [r5, #4]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c48:	0719      	lsls	r1, r3, #28
 8006c4a:	d42c      	bmi.n	8006ca6 <__swsetup_r+0x82>
 8006c4c:	06dd      	lsls	r5, r3, #27
 8006c4e:	d411      	bmi.n	8006c74 <__swsetup_r+0x50>
 8006c50:	2309      	movs	r3, #9
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	e03e      	b.n	8006cde <__swsetup_r+0xba>
 8006c60:	4b25      	ldr	r3, [pc, #148]	; (8006cf8 <__swsetup_r+0xd4>)
 8006c62:	429c      	cmp	r4, r3
 8006c64:	d101      	bne.n	8006c6a <__swsetup_r+0x46>
 8006c66:	68ac      	ldr	r4, [r5, #8]
 8006c68:	e7eb      	b.n	8006c42 <__swsetup_r+0x1e>
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <__swsetup_r+0xd8>)
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	bf08      	it	eq
 8006c70:	68ec      	ldreq	r4, [r5, #12]
 8006c72:	e7e6      	b.n	8006c42 <__swsetup_r+0x1e>
 8006c74:	0758      	lsls	r0, r3, #29
 8006c76:	d512      	bpl.n	8006c9e <__swsetup_r+0x7a>
 8006c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c7a:	b141      	cbz	r1, 8006c8e <__swsetup_r+0x6a>
 8006c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c80:	4299      	cmp	r1, r3
 8006c82:	d002      	beq.n	8006c8a <__swsetup_r+0x66>
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7ff fcd3 	bl	8006630 <_free_r>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	2300      	movs	r3, #0
 8006c98:	6063      	str	r3, [r4, #4]
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	f043 0308 	orr.w	r3, r3, #8
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	b94b      	cbnz	r3, 8006cbe <__swsetup_r+0x9a>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d003      	beq.n	8006cbe <__swsetup_r+0x9a>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 f927 	bl	8006f0c <__smakebuf_r>
 8006cbe:	89a0      	ldrh	r0, [r4, #12]
 8006cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc4:	f010 0301 	ands.w	r3, r0, #1
 8006cc8:	d00a      	beq.n	8006ce0 <__swsetup_r+0xbc>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60a3      	str	r3, [r4, #8]
 8006cce:	6963      	ldr	r3, [r4, #20]
 8006cd0:	425b      	negs	r3, r3
 8006cd2:	61a3      	str	r3, [r4, #24]
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	b943      	cbnz	r3, 8006cea <__swsetup_r+0xc6>
 8006cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cdc:	d1ba      	bne.n	8006c54 <__swsetup_r+0x30>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	0781      	lsls	r1, r0, #30
 8006ce2:	bf58      	it	pl
 8006ce4:	6963      	ldrpl	r3, [r4, #20]
 8006ce6:	60a3      	str	r3, [r4, #8]
 8006ce8:	e7f4      	b.n	8006cd4 <__swsetup_r+0xb0>
 8006cea:	2000      	movs	r0, #0
 8006cec:	e7f7      	b.n	8006cde <__swsetup_r+0xba>
 8006cee:	bf00      	nop
 8006cf0:	20000018 	.word	0x20000018
 8006cf4:	0800729c 	.word	0x0800729c
 8006cf8:	080072bc 	.word	0x080072bc
 8006cfc:	0800727c 	.word	0x0800727c

08006d00 <_close_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	2300      	movs	r3, #0
 8006d04:	4d05      	ldr	r5, [pc, #20]	; (8006d1c <_close_r+0x1c>)
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	f7fa fd16 	bl	800173c <_close>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_close_r+0x1a>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_close_r+0x1a>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	20001b68 	.word	0x20001b68

08006d20 <__sflush_r>:
 8006d20:	898a      	ldrh	r2, [r1, #12]
 8006d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d24:	4605      	mov	r5, r0
 8006d26:	0710      	lsls	r0, r2, #28
 8006d28:	460c      	mov	r4, r1
 8006d2a:	d457      	bmi.n	8006ddc <__sflush_r+0xbc>
 8006d2c:	684b      	ldr	r3, [r1, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dc04      	bgt.n	8006d3c <__sflush_r+0x1c>
 8006d32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	dc01      	bgt.n	8006d3c <__sflush_r+0x1c>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	d0fa      	beq.n	8006d38 <__sflush_r+0x18>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d48:	682f      	ldr	r7, [r5, #0]
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	d032      	beq.n	8006db4 <__sflush_r+0x94>
 8006d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	075a      	lsls	r2, r3, #29
 8006d54:	d505      	bpl.n	8006d62 <__sflush_r+0x42>
 8006d56:	6863      	ldr	r3, [r4, #4]
 8006d58:	1ac0      	subs	r0, r0, r3
 8006d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d5c:	b10b      	cbz	r3, 8006d62 <__sflush_r+0x42>
 8006d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d60:	1ac0      	subs	r0, r0, r3
 8006d62:	2300      	movs	r3, #0
 8006d64:	4602      	mov	r2, r0
 8006d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d68:	4628      	mov	r0, r5
 8006d6a:	6a21      	ldr	r1, [r4, #32]
 8006d6c:	47b0      	blx	r6
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	d106      	bne.n	8006d82 <__sflush_r+0x62>
 8006d74:	6829      	ldr	r1, [r5, #0]
 8006d76:	291d      	cmp	r1, #29
 8006d78:	d82c      	bhi.n	8006dd4 <__sflush_r+0xb4>
 8006d7a:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <__sflush_r+0x100>)
 8006d7c:	40ca      	lsrs	r2, r1
 8006d7e:	07d6      	lsls	r6, r2, #31
 8006d80:	d528      	bpl.n	8006dd4 <__sflush_r+0xb4>
 8006d82:	2200      	movs	r2, #0
 8006d84:	6062      	str	r2, [r4, #4]
 8006d86:	6922      	ldr	r2, [r4, #16]
 8006d88:	04d9      	lsls	r1, r3, #19
 8006d8a:	6022      	str	r2, [r4, #0]
 8006d8c:	d504      	bpl.n	8006d98 <__sflush_r+0x78>
 8006d8e:	1c42      	adds	r2, r0, #1
 8006d90:	d101      	bne.n	8006d96 <__sflush_r+0x76>
 8006d92:	682b      	ldr	r3, [r5, #0]
 8006d94:	b903      	cbnz	r3, 8006d98 <__sflush_r+0x78>
 8006d96:	6560      	str	r0, [r4, #84]	; 0x54
 8006d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d9a:	602f      	str	r7, [r5, #0]
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	d0cb      	beq.n	8006d38 <__sflush_r+0x18>
 8006da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006da4:	4299      	cmp	r1, r3
 8006da6:	d002      	beq.n	8006dae <__sflush_r+0x8e>
 8006da8:	4628      	mov	r0, r5
 8006daa:	f7ff fc41 	bl	8006630 <_free_r>
 8006dae:	2000      	movs	r0, #0
 8006db0:	6360      	str	r0, [r4, #52]	; 0x34
 8006db2:	e7c2      	b.n	8006d3a <__sflush_r+0x1a>
 8006db4:	6a21      	ldr	r1, [r4, #32]
 8006db6:	2301      	movs	r3, #1
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b0      	blx	r6
 8006dbc:	1c41      	adds	r1, r0, #1
 8006dbe:	d1c7      	bne.n	8006d50 <__sflush_r+0x30>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0c4      	beq.n	8006d50 <__sflush_r+0x30>
 8006dc6:	2b1d      	cmp	r3, #29
 8006dc8:	d001      	beq.n	8006dce <__sflush_r+0xae>
 8006dca:	2b16      	cmp	r3, #22
 8006dcc:	d101      	bne.n	8006dd2 <__sflush_r+0xb2>
 8006dce:	602f      	str	r7, [r5, #0]
 8006dd0:	e7b2      	b.n	8006d38 <__sflush_r+0x18>
 8006dd2:	89a3      	ldrh	r3, [r4, #12]
 8006dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	e7ae      	b.n	8006d3a <__sflush_r+0x1a>
 8006ddc:	690f      	ldr	r7, [r1, #16]
 8006dde:	2f00      	cmp	r7, #0
 8006de0:	d0aa      	beq.n	8006d38 <__sflush_r+0x18>
 8006de2:	0793      	lsls	r3, r2, #30
 8006de4:	bf18      	it	ne
 8006de6:	2300      	movne	r3, #0
 8006de8:	680e      	ldr	r6, [r1, #0]
 8006dea:	bf08      	it	eq
 8006dec:	694b      	ldreq	r3, [r1, #20]
 8006dee:	1bf6      	subs	r6, r6, r7
 8006df0:	600f      	str	r7, [r1, #0]
 8006df2:	608b      	str	r3, [r1, #8]
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	dd9f      	ble.n	8006d38 <__sflush_r+0x18>
 8006df8:	4633      	mov	r3, r6
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	6a21      	ldr	r1, [r4, #32]
 8006e00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e04:	47e0      	blx	ip
 8006e06:	2800      	cmp	r0, #0
 8006e08:	dc06      	bgt.n	8006e18 <__sflush_r+0xf8>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	e790      	b.n	8006d3a <__sflush_r+0x1a>
 8006e18:	4407      	add	r7, r0
 8006e1a:	1a36      	subs	r6, r6, r0
 8006e1c:	e7ea      	b.n	8006df4 <__sflush_r+0xd4>
 8006e1e:	bf00      	nop
 8006e20:	20400001 	.word	0x20400001

08006e24 <_fflush_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	690b      	ldr	r3, [r1, #16]
 8006e28:	4605      	mov	r5, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	b913      	cbnz	r3, 8006e34 <_fflush_r+0x10>
 8006e2e:	2500      	movs	r5, #0
 8006e30:	4628      	mov	r0, r5
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	b118      	cbz	r0, 8006e3e <_fflush_r+0x1a>
 8006e36:	6983      	ldr	r3, [r0, #24]
 8006e38:	b90b      	cbnz	r3, 8006e3e <_fflush_r+0x1a>
 8006e3a:	f7ff faf3 	bl	8006424 <__sinit>
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <_fflush_r+0x6c>)
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d11b      	bne.n	8006e7c <_fflush_r+0x58>
 8006e44:	686c      	ldr	r4, [r5, #4]
 8006e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0ef      	beq.n	8006e2e <_fflush_r+0xa>
 8006e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e50:	07d0      	lsls	r0, r2, #31
 8006e52:	d404      	bmi.n	8006e5e <_fflush_r+0x3a>
 8006e54:	0599      	lsls	r1, r3, #22
 8006e56:	d402      	bmi.n	8006e5e <_fflush_r+0x3a>
 8006e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e5a:	f7ff fbc0 	bl	80065de <__retarget_lock_acquire_recursive>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	4621      	mov	r1, r4
 8006e62:	f7ff ff5d 	bl	8006d20 <__sflush_r>
 8006e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e68:	4605      	mov	r5, r0
 8006e6a:	07da      	lsls	r2, r3, #31
 8006e6c:	d4e0      	bmi.n	8006e30 <_fflush_r+0xc>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	059b      	lsls	r3, r3, #22
 8006e72:	d4dd      	bmi.n	8006e30 <_fflush_r+0xc>
 8006e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e76:	f7ff fbb3 	bl	80065e0 <__retarget_lock_release_recursive>
 8006e7a:	e7d9      	b.n	8006e30 <_fflush_r+0xc>
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <_fflush_r+0x70>)
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d101      	bne.n	8006e86 <_fflush_r+0x62>
 8006e82:	68ac      	ldr	r4, [r5, #8]
 8006e84:	e7df      	b.n	8006e46 <_fflush_r+0x22>
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <_fflush_r+0x74>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	bf08      	it	eq
 8006e8c:	68ec      	ldreq	r4, [r5, #12]
 8006e8e:	e7da      	b.n	8006e46 <_fflush_r+0x22>
 8006e90:	0800729c 	.word	0x0800729c
 8006e94:	080072bc 	.word	0x080072bc
 8006e98:	0800727c 	.word	0x0800727c

08006e9c <_lseek_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4d05      	ldr	r5, [pc, #20]	; (8006ebc <_lseek_r+0x20>)
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7fa fc6a 	bl	8001784 <_lseek>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_lseek_r+0x1e>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_lseek_r+0x1e>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20001b68 	.word	0x20001b68

08006ec0 <__swhatbuf_r>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	460e      	mov	r6, r1
 8006ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ec8:	4614      	mov	r4, r2
 8006eca:	2900      	cmp	r1, #0
 8006ecc:	461d      	mov	r5, r3
 8006ece:	b096      	sub	sp, #88	; 0x58
 8006ed0:	da08      	bge.n	8006ee4 <__swhatbuf_r+0x24>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ed8:	602a      	str	r2, [r5, #0]
 8006eda:	061a      	lsls	r2, r3, #24
 8006edc:	d410      	bmi.n	8006f00 <__swhatbuf_r+0x40>
 8006ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ee2:	e00e      	b.n	8006f02 <__swhatbuf_r+0x42>
 8006ee4:	466a      	mov	r2, sp
 8006ee6:	f000 f86f 	bl	8006fc8 <_fstat_r>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	dbf1      	blt.n	8006ed2 <__swhatbuf_r+0x12>
 8006eee:	9a01      	ldr	r2, [sp, #4]
 8006ef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ef8:	425a      	negs	r2, r3
 8006efa:	415a      	adcs	r2, r3
 8006efc:	602a      	str	r2, [r5, #0]
 8006efe:	e7ee      	b.n	8006ede <__swhatbuf_r+0x1e>
 8006f00:	2340      	movs	r3, #64	; 0x40
 8006f02:	2000      	movs	r0, #0
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	b016      	add	sp, #88	; 0x58
 8006f08:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f0c <__smakebuf_r>:
 8006f0c:	898b      	ldrh	r3, [r1, #12]
 8006f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f10:	079d      	lsls	r5, r3, #30
 8006f12:	4606      	mov	r6, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	d507      	bpl.n	8006f28 <__smakebuf_r+0x1c>
 8006f18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	6123      	str	r3, [r4, #16]
 8006f20:	2301      	movs	r3, #1
 8006f22:	6163      	str	r3, [r4, #20]
 8006f24:	b002      	add	sp, #8
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	466a      	mov	r2, sp
 8006f2a:	ab01      	add	r3, sp, #4
 8006f2c:	f7ff ffc8 	bl	8006ec0 <__swhatbuf_r>
 8006f30:	9900      	ldr	r1, [sp, #0]
 8006f32:	4605      	mov	r5, r0
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff fbe3 	bl	8006700 <_malloc_r>
 8006f3a:	b948      	cbnz	r0, 8006f50 <__smakebuf_r+0x44>
 8006f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f40:	059a      	lsls	r2, r3, #22
 8006f42:	d4ef      	bmi.n	8006f24 <__smakebuf_r+0x18>
 8006f44:	f023 0303 	bic.w	r3, r3, #3
 8006f48:	f043 0302 	orr.w	r3, r3, #2
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	e7e3      	b.n	8006f18 <__smakebuf_r+0xc>
 8006f50:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <__smakebuf_r+0x7c>)
 8006f52:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	6020      	str	r0, [r4, #0]
 8006f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5c:	81a3      	strh	r3, [r4, #12]
 8006f5e:	9b00      	ldr	r3, [sp, #0]
 8006f60:	6120      	str	r0, [r4, #16]
 8006f62:	6163      	str	r3, [r4, #20]
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	b15b      	cbz	r3, 8006f80 <__smakebuf_r+0x74>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f6e:	f000 f83d 	bl	8006fec <_isatty_r>
 8006f72:	b128      	cbz	r0, 8006f80 <__smakebuf_r+0x74>
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	89a0      	ldrh	r0, [r4, #12]
 8006f82:	4305      	orrs	r5, r0
 8006f84:	81a5      	strh	r5, [r4, #12]
 8006f86:	e7cd      	b.n	8006f24 <__smakebuf_r+0x18>
 8006f88:	080063bd 	.word	0x080063bd

08006f8c <__malloc_lock>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	; (8006f94 <__malloc_lock+0x8>)
 8006f8e:	f7ff bb26 	b.w	80065de <__retarget_lock_acquire_recursive>
 8006f92:	bf00      	nop
 8006f94:	20001b5c 	.word	0x20001b5c

08006f98 <__malloc_unlock>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__malloc_unlock+0x8>)
 8006f9a:	f7ff bb21 	b.w	80065e0 <__retarget_lock_release_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	20001b5c 	.word	0x20001b5c

08006fa4 <_read_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	2200      	movs	r2, #0
 8006fae:	4d05      	ldr	r5, [pc, #20]	; (8006fc4 <_read_r+0x20>)
 8006fb0:	602a      	str	r2, [r5, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f7fa fb89 	bl	80016ca <_read>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_read_r+0x1e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_read_r+0x1e>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20001b68 	.word	0x20001b68

08006fc8 <_fstat_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4d06      	ldr	r5, [pc, #24]	; (8006fe8 <_fstat_r+0x20>)
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	602b      	str	r3, [r5, #0]
 8006fd6:	f7fa fbbc 	bl	8001752 <_fstat>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d102      	bne.n	8006fe4 <_fstat_r+0x1c>
 8006fde:	682b      	ldr	r3, [r5, #0]
 8006fe0:	b103      	cbz	r3, 8006fe4 <_fstat_r+0x1c>
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	bd38      	pop	{r3, r4, r5, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20001b68 	.word	0x20001b68

08006fec <_isatty_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4d05      	ldr	r5, [pc, #20]	; (8007008 <_isatty_r+0x1c>)
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	f7fa fbba 	bl	8001770 <_isatty>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_isatty_r+0x1a>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_isatty_r+0x1a>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20001b68 	.word	0x20001b68

0800700c <_Unwind_GetDataRelBase>:
 800700c:	b508      	push	{r3, lr}
 800700e:	f7ff f9a3 	bl	8006358 <abort>

08007012 <_Unwind_GetTextRelBase>:
 8007012:	b508      	push	{r3, lr}
 8007014:	f7ff fffa 	bl	800700c <_Unwind_GetDataRelBase>

08007018 <_init>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	bf00      	nop
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr

08007024 <_fini>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	bf00      	nop
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr
